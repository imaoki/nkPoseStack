/*! © 2023 imaoki | MIT License | https://github.com/imaoki */

// /////////////////////////////////////////////////////////////////////////////
// ボイラープレート
// /////////////////////////////////////////////////////////////////////////////
// 配列
/*1.0.0*/proc int minFloatArrayCount(float $a[], float $b[]) {int $numA = `size $a`;int $numB = `size $b`;return `min $numA $numB`;}proc int minIntArrayCount(int $a[], int $b[]) {int $numA = `size $a`;int $numB = `size $b`;return `min $numA $numB`;}proc int minStringArrayCount(string $a[], string $b[]) {int $numA = `size $a`;int $numB = `size $b`;return `min $numA $numB`;}
// ファイル
/*1.0.0*/proc string escapeStringForPythonAtFile(string $input) {string $escapedText;int $size = `size $input`;for ($i = 1; $i <= $size; $i++) {string $c = `substring $input $i $i`;switch ($c) {case "\\": $escapedText += "\\\\"; break;case "'": $escapedText += "\\'"; break;case "\n": $escapedText += "\\n"; break;case "\r": $escapedText += "\\r"; break;default: $escapedText += $c; break;}}return $escapedText;}proc string getSourceFilename(string $procName) {string $filename;string $thisIs = `whatIs $procName`;string $pattern1 = "^Mel procedure found in: *";string $pattern2 = "^Script found in: *";if (`match $pattern1 $thisIs` != "") {$filename = `substitute $pattern1 $thisIs ""`;}else if (`match $pattern2 $thisIs` != "") {$filename = `substitute $pattern2 $thisIs ""`;}return $filename;}proc string getSourceDirname(string $procName) {return dirname(getSourceFilename($procName));}proc int existsDirname(string $dirname) {return `filetest -d $dirname`;}proc int existsFilename(string $filename) {return `filetest -f $filename`;}proc string[] getDirnames(string $dirname) {string $subDirnames[];string $filenames[] = `getFileList -fld $dirname`;for ($i = 0; $i < `size $filenames`; $i++) {string $subDirname = $dirname + "/" + $filenames[$i];if (existsDirname($subDirname)) {$subDirnames[`size $subDirnames`] = $subDirname;}}$subDirnames = `sort $subDirnames`;return $subDirnames;}proc string[] getFilenames(string $dirname, string $filenamePattern) {string $filenames[] = `getFileList -fs $filenamePattern -fld $dirname`;for ($i = 0; $i < `size $filenames`; $i++) {$filenames[$i] = $dirname + "/" + $filenames[$i];}$filenames = `sort $filenames`;return $filenames;}proc string[] readAllLines(string $filename, string $encoding) {if (!`size $encoding`) $encoding = "utf-8";string $lines[];if (existsFilename($filename)) {python("with open('" + $filename + "', 'r', encoding='" + $encoding + "') as f:" + " lines = tuple(s.rstrip() for s in f.readlines())");$lines = `python("lines")`;}return $lines;}proc string readAllText(string $filename, string $encoding) {if (!`size $encoding`) $encoding = "utf-8";string $text;if (existsFilename($filename)) {python("with open('" + $filename + "', 'r', encoding='" + $encoding + "') as f: text = f.read()");$text = `python("text")`;}return $text;}proc int writeAllText(string $filename, string $encoding, string $input) {string $dirname = dirname($filename);if (!existsDirname($dirname)) return false;$input = escapeStringForPythonAtFile($input);if (!`size $encoding`) $encoding = "utf-8";python("with open('" + $filename + "', 'w', encoding='" + $encoding + "') as f:" + " num = f.write('" + $input + "')");return (`python("num")` > 0);}
// ノード
/*1.0.0*/proc string[] getSelectedNodes() {return `ls -l -sl -typ "joint" -typ "transform"`;}proc string getParentNode(string $n) {string $parent;string $parents[] = `listRelatives -f -p $n`;if (`size $parents` > 0) $parent = $parents[0];return $parent;}
// 数値
/*1.0.0*/proc int isInRangeFloat(float $value, float $min, float $max) {return ($min <= $value && $value <= $max);}proc int isInRangeInt(int $value, int $min, int $max) {return ($min <= $value && $value <= $max);}
// オブザーバ
/*1.0.0*/global string $nkObservers[];proc string escapeStringParam(string $input) {string $escapedText;int $size = `size $input`;for ($i = 1; $i <= $size; $i++) {string $c = `substring $input $i $i`;switch ($c) {case "\\": $escapedText += "\\\\"; break;case "\"": $escapedText += "\\\""; break;case "\n": $escapedText += "\\n"; break;case "\r": $escapedText += "\\r"; break;case "\t": $escapedText += "\\t"; break;default: $escapedText += $c; break;}}return $escapedText;}proc string[] escapeStringParams(string $input[]) {string $escapedArray[];for ($s in $input) {$escapedArray[`size $escapedArray`] = escapeStringParam($s);}return $escapedArray;}proc string floatParamsToString(float $params[]) {string $param = "{";int $numParams = `size $params`;for ($i = 0; $i < $numParams; $i++) {string $floatString = (string) $params[$i];if (!`gmatch $floatString "*.*"`) $floatString += ".0";$param += $floatString + (($i < $numParams - 1) ? ", " : "");}$param += "}";return $param;}proc string intParamsToString(int $params[]) {string $param = "{}";if (`size $param`) {$param = "{" + intArrayToString($params, ", ") + "}";}return $param;}proc string stringParamsToString(string $params[]) {string $param = "{}";if (`size $param`) {$param = "{\"" + stringArrayToString(escapeStringParams($params), "\", \"") + "\"}";}return $param;}proc clearObservers() {global string $nkObservers[];clear $nkObservers;}proc int isValidEvent(string $event) {return (isValidString($event, "^[^;]+$"));}proc int isValidProc(string $proc) {return (isValidString($proc, "^[a-zA-Z\|:\._][a-zA-Z0-9\|:\._]*$"));}proc int isValidObserver(string $observer) {return (isValidString($observer, "^[^;]+;[a-zA-Z\|:\._][a-zA-Z0-9\|:\._]*$"));}proc string makeObserver(string $event, string $proc) {string $observer;if (isValidEvent($event) && isValidProc($proc)) {$observer = $event + ";" + $proc;}return $observer;}proc string extractEvent(string $observer) {string $event;string $buffer[];if (`tokenize $observer ";" $buffer` == 2) {$event = $buffer[0];}return $event;}proc string extractProc(string $observer) {string $proc;string $buffer[];if (`tokenize $observer ";" $buffer` == 2) {$proc = $buffer[1];}return $proc;}proc int findObserver(string $observer) {global string $nkObservers[];int $index = -1;for ($i = 0; $i < `size $nkObservers`; $i++) {if ($observer == $nkObservers[$i]) {$index = $i;break;}}return $index;}proc int existsObserver(string $observer) {return (findObserver($observer) >= 0);}proc string[] getObserverProcs(string $event) {global string $nkObservers[];string $procs[];if (!isValidEvent($event)) return $procs;for ($observer in $nkObservers) {if (extractEvent($observer) == $event) {$procs[`size $procs`] = extractProc($observer);}}return $procs;}proc int subscribe(string $event, string $proc) {global string $nkObservers[];string $observer = makeObserver($event, $proc);if (!isValidObserver($observer)) return false;if (existsObserver($observer)) return false;$nkObservers[`size $nkObservers`] = $observer;return true;}proc int unsubscribe(string $event, string $proc) {global string $nkObservers[];string $observer = makeObserver($event, $proc);if (!isValidObserver($observer)) return false;int $index = findObserver($observer);if ($index < 0) return false;stringArrayRemoveAtIndex($index, $nkObservers);return true;}proc notify(string $event) {string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval $proc;}}}proc notifyFloat(string $event, float $param) {string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval $proc $param;}}}proc notifyInt(string $event, int $param) {string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval $proc $param;}}}proc notifyString(string $event, string $param) {string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval $proc $param;}}}proc notifyFloatArray(string $event, float $params[]) {string $param = floatParamsToString($params);string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval ($proc + "(" + $param + ")");}}}proc notifyIntArray(string $event, int $params[]) {string $param = intParamsToString($params);string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval ($proc + "(" + $param + ")");}}}proc notifyStringArray(string $event, string $params[]) {string $param = stringParamsToString($params);string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval ($proc + "(" + $param + ")");}}}
// クォータニオン
/*1.0.0*/proc int reverseRotateOrder(int $order) {int $reverseOrder[] = {5, 3, 4, 1, 2, 0};return $reverseOrder[$order];}proc float[] eulerToQuat(float $r[], int $order) {float $qx = 0.0;float $qy = 0.0;float $qz = 0.0;float $qw = 1.0;float $rx = `deg_to_rad $r[0]`;float $ry = `deg_to_rad $r[1]`;float $rz = `deg_to_rad $r[2]`;float $cx = cos(0.5 * $rx);float $cy = cos(0.5 * $ry);float $cz = cos(0.5 * $rz);float $sx = sin(0.5 * $rx);float $sy = sin(0.5 * $ry);float $sz = sin(0.5 * $rz);switch ($order) {case 0:$qx = $sx * $cy * $cz + $cx * $sy * $sz;$qy = $cx * $sy * $cz - $sx * $cy * $sz;$qz = $cx * $cy * $sz + $sx * $sy * $cz;$qw = $cx * $cy * $cz - $sx * $sy * $sz;break;case 1:$qx = $sx * $cy * $cz + $cx * $sy * $sz;$qy = $cx * $sy * $cz + $sx * $cy * $sz;$qz = $cx * $cy * $sz - $sx * $sy * $cz;$qw = $cx * $cy * $cz - $sx * $sy * $sz;break;case 2:$qx = $sx * $cy * $cz - $cx * $sy * $sz;$qy = $cx * $sy * $cz + $sx * $cy * $sz;$qz = $cx * $cy * $sz + $sx * $sy * $cz;$qw = $cx * $cy * $cz - $sx * $sy * $sz;break;case 3:$qx = $sx * $cy * $cz - $cx * $sy * $sz;$qy = $cx * $sy * $cz - $sx * $cy * $sz;$qz = $cx * $cy * $sz + $sx * $sy * $cz;$qw = $cx * $cy * $cz + $sx * $sy * $sz;break;case 4:$qx = $sx * $cy * $cz + $cx * $sy * $sz;$qy = $cx * $sy * $cz - $sx * $cy * $sz;$qz = $cx * $cy * $sz - $sx * $sy * $cz;$qw = $cx * $cy * $cz + $sx * $sy * $sz;break;case 5:$qx = $sx * $cy * $cz - $cx * $sy * $sz;$qy = $cx * $sy * $cz + $sx * $cy * $sz;$qz = $cx * $cy * $sz - $sx * $sy * $cz;$qw = $cx * $cy * $cz + $sx * $sy * $sz;break;default: break;}return {$qx, $qy, $qz, $qw};}proc float[] quatToEuler(float $q[], int $order) {float $rx = 0.0;float $ry = 0.0;float $rz = 0.0;float $qx = $q[0];float $qy = $q[1];float $qz = $q[2];float $qw = $q[3];float $sx;float $sy;float $sz;int $unlocked;switch ($order) {case 0:$sy = 2 * $qx * $qz + 2 * $qy * $qw;$unlocked = abs($sy) < 0.9999999;$rx = $unlocked ? atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1) : atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1);$ry = asin($sy);$rz = $unlocked ? atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1) : 0;break;case 1:$sz = 2 * $qx * $qy + 2 * $qz * $qw;$unlocked = abs($sz) < 0.9999999;$rx = $unlocked ? atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1) : 0;$ry = $unlocked ? atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1) : atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1);$rz = asin($sz);break;case 2:$sx = 2 * $qy * $qz + 2 * $qx * $qw;$unlocked = abs($sx) < 0.9999999;$rx = asin($sx);$ry = $unlocked ? atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1) : 0;$rz = $unlocked ? atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1) : atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1);break;case 3:$sz = -(2 * $qx * $qy - 2 * $qz * $qw);$unlocked = abs($sz) < 0.9999999;$rx = $unlocked ? atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1) : atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1);$ry = $unlocked ? atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1) : 0;$rz = asin($sz);break;case 4:$sx = -(2 * $qy * $qz - 2 * $qx * $qw);$unlocked = abs($sx) < 0.9999999;$rx = asin($sx);$ry = $unlocked ? atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1) : atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1);$rz = $unlocked ? atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1) : 0;break;case 5:$sy = -(2 * $qx * $qz - 2 * $qy * $qw);$unlocked = abs($sy) < 0.9999999;$rx = $unlocked ? atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1) : 0;$ry = asin($sy);$rz = $unlocked ? atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1) : atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1);break;default: break;}$rx = `rad_to_deg $rx`;$ry = `rad_to_deg $ry`;$rz = `rad_to_deg $rz`;return {$rx, $ry, $rz};}proc float[] angleAxisToQuat(float $degree, float $axis[]) {float $ha = `deg_to_rad $degree` * 0.5;float $s = sin($ha);float $qx = $axis[0] * $s;float $qy = $axis[1] * $s;float $qz = $axis[2] * $s;float $qw = cos($ha);return {$qx, $qy, $qz, $qw};}proc float[] quatAdd(float $q1[], float $q2[]) {float $q1x = $q1[0];float $q1y = $q1[1];float $q1z = $q1[2];float $q1w = $q1[3];float $q2x = $q2[0];float $q2y = $q2[1];float $q2z = $q2[2];float $q2w = $q2[3];float $qx = $q1x + $q2x;float $qy = $q1y + $q2y;float $qz = $q1z + $q2z;float $qw = $q1w + $q2w;return {$qx, $qy, $qz, $qw};}proc float[] quatSubtract(float $q1[], float $q2[]) {float $q1x = $q1[0];float $q1y = $q1[1];float $q1z = $q1[2];float $q1w = $q1[3];float $q2x = $q2[0];float $q2y = $q2[1];float $q2z = $q2[2];float $q2w = $q2[3];float $qx = $q1x - $q2x;float $qy = $q1y - $q2y;float $qz = $q1z - $q2z;float $qw = $q1w - $q2w;return {$qx, $qy, $qz, $qw};}proc float[] quatMultiply(float $q1[], float $q2[]) {float $q1x = $q1[0];float $q1y = $q1[1];float $q1z = $q1[2];float $q1w = $q1[3];float $q2x = $q2[0];float $q2y = $q2[1];float $q2z = $q2[2];float $q2w = $q2[3];float $qx = $q1x * $q2w + $q1w * $q2x + $q1y * $q2z - $q1z * $q2y;float $qy = $q1y * $q2w + $q1w * $q2y + $q1z * $q2x - $q1x * $q2z;float $qz = $q1z * $q2w + $q1w * $q2z + $q1x * $q2y - $q1y * $q2x;float $qw = $q1w * $q2w - $q1x * $q2x - $q1y * $q2y - $q1z * $q2z;return {$qx, $qy, $qz, $qw};}proc float[] quatInverse(float $q[]) {return {$q[0] * -1, $q[1] * -1, $q[2] * -1, $q[3]};}proc float[] rotateVectorByQuat(float $v[], float $q[]) {float $iq[] = quatInverse($q);float $vq[] = {$v[0], $v[1], $v[2], 0};$vq = quatMultiply(quatMultiply($q, $vq), $iq);return {$vq[0], $vq[1], $vq[2]};}proc float[] quatFlip(float $q[], float $axis[]) {float $flipQ[] = angleAxisToQuat(180.0, $axis);return quatMultiply($flipQ, $q);}
// UIコントロール
/*1.1.0*/proc int windowGetExists(string $control) {return `window -q -ex $control`;}proc int windowGetVisible(string $control) {return `window -q -vis $control`;}proc windowClose(string $control) {if (windowGetExists($control)) {deleteUI $control;}}proc windowPrefRemove(string $control) {if (windowGetExists($control)) windowClose($control);if (`windowPref -ex $control`) windowPref -r $control;}proc int[] checkBoxGrpGetEnable(string $control) {return `checkBoxGrp -q -en $control`;}proc checkBoxGrpSetEnable(int $enable, string $control) {checkBoxGrp -e -en $enable $control;}proc int[] checkBoxGrpGetValues(int $ncb, string $control) {$ncb = `clamp 1 4 $ncb`;int $values[];if ($ncb > 0) $values[0] = `checkBoxGrp -q -v1 $control`;if ($ncb > 1) $values[1] = `checkBoxGrp -q -v2 $control`;if ($ncb > 2) $values[2] = `checkBoxGrp -q -v3 $control`;if ($ncb > 3) $values[3] = `checkBoxGrp -q -v4 $control`;return $values;}proc checkBoxGrpSetValues(int $values[], string $control) {int $ncb = `size $values`;if ($ncb > 0) checkBoxGrp -e -v1 $values[0] $control;if ($ncb > 1) checkBoxGrp -e -v2 $values[1] $control;if ($ncb > 2) checkBoxGrp -e -v3 $values[2] $control;if ($ncb > 3) checkBoxGrp -e -v4 $values[3] $control;}proc int radioButtonGrpGetEnable(string $control) {return `radioButtonGrp -q -en $control`;}proc radioButtonGrpSetEnable(int $enable, string $control) {radioButtonGrp -e -en $enable $control;}proc int radioButtonGrpGetSelect(string $control) {return (`radioButtonGrp -q -sl $control` - 1);}proc radioButtonGrpSetSelect(int $index, string $control) {radioButtonGrp -e -sl ($index + 1) $control;}proc int textFieldGrpGetEnable(string $control) {return `textFieldGrp -q -en $control`;}proc textFieldGrpSetEnable(int $enable, string $control) {textFieldGrp -e -en $enable $control;}proc int textFieldGrpGetInsertionPosition(string $control) {return (`textFieldGrp -q -ip $control` - 1);}proc textFieldGrpSetInsertionPosition(int $position, string $control) {textFieldGrp -e -ip ($position + 1) $control;}proc string textFieldGrpGetText(string $control) {return `textFieldGrp -q -tx $control`;}proc textFieldGrpSetText(string $text, string $control) {textFieldGrp -e -tx $text $control;}proc textScrollListAppend(string $label, string $control) {textScrollList -e -a $label $control;}proc textScrollListAppendPosition(int $index, string $label, string $control) {textScrollList -e -ap ($index + 1) $label $control;}proc textScrollListRemoveAll(string $control) {textScrollList -e -ra $control;}proc textScrollListRemoveIndexedItem(int $index, string $control) {textScrollList -e -rii ($index + 1) $control;}proc textScrollListSetSelectIndexedItem(int $index, string $control) {textScrollList -e -sii ($index + 1) $control;}proc textScrollListSetSelectIndexedItems(int $indices[], string $control) {for ($i in $indices) {textScrollList -e -sii ($i + 1) $control;}}proc int[] textScrollListGetSelectIndexedItems(string $control) {int $indices[] = `textScrollList -q -sii $control`;for ($i = 0; $i < `size $indices`; $i++) $indices[$i] -= 1;return $indices;}proc int textScrollListGetSelectIndexedItem(string $control) {int $indices[] = textScrollListGetSelectIndexedItems($control);return ((`size $indices`) ? $indices[0] : -1);}proc string[] textScrollListGetSelectItems(string $control) {return `textScrollList -q -si $control`;}proc string textScrollListGetSelectItem(string $control) {string $items[] = textScrollListGetSelectItems($control);return ((`size $items`) ? $items[0] : "");}proc workspaceControlClose(string $control) {workspaceControl -e -cl $control;}proc int workspaceControlGetExists(string $control) {return `workspaceControl -q -ex $control`;}proc int workspaceControlGetFloating(string $control) {return `workspaceControl -q -fl $control`;}proc workspaceControlSetFloating(int $state, string $control) {workspaceControl -e -fl $state $control;}proc int workspaceControlGetVisible(string $control) {return `workspaceControl -q -vis $control`;}proc int isWorkspaceControl(string $control) {return `objectTypeUI $control` == "workspaceControl";}proc buildWorkspaceControl(string $workspaceControlName,string $mainProcName,string $buildProcName) {if (!workspaceControlGetExists($workspaceControlName)) {string $sourceFilename = getSourceFilename($mainProcName);string $uiScript = "if (!`exists " + $buildProcName + "`)" + " source \"" + $sourceFilename + "\"; " + $buildProcName + "();";string $nkSnippetWindow = `workspaceControl -dup false -fl true -l $mainProcName -rt false -ui $uiScript$workspaceControlName`;}}global string $nkUIControls[];proc nkUIAppendControls(string $controls[]) {global string $nkUIControls[];for ($control in $controls) {$nkUIControls[`size $nkUIControls`] = $control;}}proc nkUIRemoveControls(string $root, string $end) {global string $nkUIControls[];string $paths[];for ($control in $nkUIControls) {string $buffer[];int $depth = `tokenize $control "|" $buffer`;string $first = ($depth > 0) ? $buffer[0] : "";string $last = ($depth > 0) ? $buffer[$depth - 1] : "";int $shouldRemove = (!`size $end`) ? $first == $root : $first == $root && $last == $end;if ($shouldRemove) $paths[`size $paths`] = $control;}if (`size $paths` > 0) {$nkUIControls = stringArrayRemove($paths, $nkUIControls);}}proc string nkUIGetControl(string $root, string $end) {global string $nkUIControls[];string $path;for ($control in $nkUIControls) {string $buffer[];int $depth = `tokenize $control "|" $buffer`;string $first = ($depth > 0) ? $buffer[0] : "";string $last = ($depth > 0) ? $buffer[$depth - 1] : "";if ($first == $root && $last == $end) {$path = $control;break;}}return $path;}proc string nkUIGetParentableWindow(string $windowName) {string $window = nkUIGetControl($windowName, $windowName);if (isWorkspaceControl($window) && !workspaceControlGetFloating($window)) {$window = "MayaWindow";}return $window;}

// /////////////////////////////////////////////////////////////////////////////
// ドメイン
// /////////////////////////////////////////////////////////////////////////////
/*-
@var <string[]>
```ebnf
            pose = '"' , pose_name , "=" , pose_transforms , '"' ;
       pose_name = { any_char - illegal_char }+ ;
 pose_transforms = { pose_transform }+ ;
  pose_transform = transform_header , transform_values , ";" ;
transform_header = transform_node , "[" , pose_setting , "]" ;
  transform_node = "|" , node_name , { "|" , node_name } ;
       node_name = ( letter | "_" ) , { letter | digit | "_" } ;
    pose_setting = paste_setting , "/" , select_setting , "/" , mirror_setting ;
   paste_setting = bool , "," , bool , "," , bool ;
  select_setting = select_pattern , "," , select_pattern ;
  mirror_setting = axis , "," , axis , "," , axis , "," , bool , "," , bool ;
  select_pattern = { letter | digit | "_" | "|" }+ ;
            axis = ? 0-2 ? ;
            bool = ? 0-1 ? ;
transform_values = t , "," , q , "," , s , "," , h ;
               t = number , "," , number , "," , number ;
               q = number , "," , number , "," , number , "," , number ;
               s = number , "," , number , "," , number ;
               h = number , "," , number , "," , number ;
          number = [ "-" ] , ( integer | real ) ;
           digit = ? 0-9 ? ;
          letter = ? a-zA-Z ? ;
    illegal_char = "=" | ";" | "[" | "]" | "/" | "," ;
        any_char = ? Any visible characters ? ;
```
*/
global string $nkPoseStackPoses[];

/*-
@var <boolean[3]>
*/
global int $nkPoseStackInitPasteSetting[];

/*-
@var <string[2]>
*/
global string $nkPoseStackInitSelectSetting[];

/*-
@var <int[5]>
*/
global int $nkPoseStackInitMirrorSetting[];

/*-
@returns <>
*/
proc initializeInitParameters() {
  // print("initializeInitParameters\n"); // debug
  global int $nkPoseStackInitPasteSetting[];
  global string $nkPoseStackInitSelectSetting[];
  global int $nkPoseStackInitMirrorSetting[];
  if (!`size $nkPoseStackInitPasteSetting`) {
    $nkPoseStackInitPasteSetting = {true, true, false};
    // print("  nkPoseStackInitPasteSetting :{" + intArrayToString($nkPoseStackInitPasteSetting, ", ") + "}\n"); // debug
  }
  if (!`size $nkPoseStackInitSelectSetting`) {
    $nkPoseStackInitSelectSetting = {"_L", "_R"};
    // print("  nkPoseStackInitSelectSetting:{" + stringArrayToString($nkPoseStackInitSelectSetting, ", ") + "}\n"); // debug
  }
  if (!`size $nkPoseStackInitMirrorSetting`) {
    $nkPoseStackInitMirrorSetting = {0, 0, 1, false, false};
    // print("  nkPoseStackInitMirrorSetting:{" + intArrayToString($nkPoseStackInitMirrorSetting, ", ") + "}\n"); // debug
  }
}

// -----------------------------------------------------------------------------
// トランスフォーム
// -----------------------------------------------------------------------------
/*-
@param $n <string>
@param $poseSetting <string>
@returns <string>
*/
proc string makeTransformHeader(string $n, string $poseSetting) {
  return ($n + "[" + $poseSetting + "]");
}

/*-
@param $n <string>
@returns <float[13]>
*/
proc float[] makeTransformValues(string $n) {
  // print("makeTransformValues\n"); // debug
  // print("  n:" + $n + "\n"); // debug
  float $values[] = {
    0, 0, 0,
    0, 0, 0, 1,
    1, 1, 1,
    0, 0, 0
  };
  string $type = `nodeType $n`;
  if ($type == "transform" || $type == "joint") {
    float $t[] = `getAttr ($n + ".translate")`;
    float $r[] = `getAttr ($n + ".rotate")`;
    float $s[] = `getAttr ($n + ".scale")`;
    float $h[] = `getAttr ($n + ".shear")`;
    // print("  t :{" + floatArrayToString($t, ", ") + "}\n"); // debug
    // print("  r :{" + floatArrayToString($r, ", ") + "}\n"); // debug
    // print("  s :{" + floatArrayToString($s, ", ") + "}\n"); // debug
    // print("  h :{" + floatArrayToString($h, ", ") + "}\n"); // debug

    int $o = `getAttr ($n + ".rotateOrder")`;
    $o = reverseRotateOrder($o);
    int $oXYZ = reverseRotateOrder(0);

    float $rq[] = eulerToQuat($r, $o);

    float $ra[] = `getAttr ($n + ".rotateAxis")`;
    $ra = eulerToQuat($ra, $oXYZ);

    float $jo[] = {0, 0, 0, 1};
    if (`attributeQuery -n $n -ex "jointOrient"`) {
      $jo = `getAttr ($n + ".jointOrient")`;
      $jo = eulerToQuat($jo, $oXYZ);
    }

    float $q[] = quatMultiply($jo, quatMultiply($ra, $rq));

    // print("  o :" + $o + "\n"); // debug
    // print("  rq:{" + floatArrayToString($rq, ", ") + "}\n"); // debug
    // print("  ra:{" + floatArrayToString($ra, ", ") + "}\n"); // debug
    // print("  jo:{" + floatArrayToString($jo, ", ") + "}\n"); // debug
    // print("  q :{" + floatArrayToString($q, ", ") + "}\n"); // debug

    $values = {
      $t[0], $t[1], $t[2],
      $q[0], $q[1], $q[2], $q[3],
      $s[0], $s[1], $s[2],
      $h[0], $h[1], $h[2]
    };
  }
  return $values;
}

/*-
@param $header <string>
@param $values <float[]>
@returns <string>
*/
proc string makePoseTransform(string $header, float $values[]) {
  return ($header + floatArrayToString($values, ",") + ";");
}

/*-
@param $nodes <string[]>
@param $poseSettings <string[]>
@returns <string[]>
*/
proc string[] makePoseTransforms(string $nodes[], string $poseSettings[]) {
  // print("makePoseTransforms\n"); // debug
  // print("  nodes       :{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  // print("  poseSettings:{\n    " + stringArrayToString($poseSettings, ",\n    ") + "\n  }\n"); // debug
  string $poseTransforms[];
  int $numTransforms = minStringArrayCount($nodes, $poseSettings);
  for ($i = 0; $i < $numTransforms; $i++) {
    string $n = $nodes[$i];
    // print("  n:" + $n + "\n"); // debug
    string $header = makeTransformHeader($n, $poseSettings[$i]);
    float $values[] = makeTransformValues($n);
    string $poseTransform = makePoseTransform($header, $values);
    // print("    poseTransform:" + $poseTransform + "\n"); // debug
    $poseTransforms[$i] = $poseTransform;
  }
  return $poseTransforms;
}

/*-
@param $n <string>
@param $m <float[12]>
@param $shouldSetT <boolean>
@param $shouldSetR <boolean>
@param $shouldSetS <boolean>
@returns <>
*/
proc setTransformAttributes(
  string $n,
  float $m[],
  int $shouldApplyT,
  int $shouldApplyR,
  int $shouldApplyS
) {
  // print("setTransformAttributes\n"); // debug
  // print("  n           :" + $n + "\n"); // debug
  // print("  m           :{" + floatArrayToString($m, ", ") + "}\n"); // debug
  // print("  shouldApplyT:" + $shouldApplyT + "\n"); // debug
  // print("  shouldApplyR:" + $shouldApplyR + "\n"); // debug
  // print("  shouldApplyS:" + $shouldApplyS + "\n"); // debug
  if (`objExists $n` && `size $m` == 12) {
    float $t[] = {$m[0], $m[1], $m[2]};
    float $r[] = {$m[3], $m[4], $m[5]};
    float $s[] = {$m[6], $m[7], $m[8]};
    float $h[] = {$m[9], $m[10], $m[11]};
    // print("  t:{" + floatArrayToString($t, ", ") + "}\n"); // debug
    // print("  r:{" + floatArrayToString($r, ", ") + "}\n"); // debug
    // print("  s:{" + floatArrayToString($s, ", ") + "}\n"); // debug
    // print("  h:{" + floatArrayToString($h, ", ") + "}\n"); // debug

    string $tx = $n + ".tx";
    string $ty = $n + ".ty";
    string $tz = $n + ".tz";
    string $rx = $n + ".rx";
    string $ry = $n + ".ry";
    string $rz = $n + ".rz";
    string $sx = $n + ".sx";
    string $sy = $n + ".sy";
    string $sz = $n + ".sz";

    if ($shouldApplyT) {
      if (!`getAttr -l $tx`) setAttr $tx $t[0];
      if (!`getAttr -l $ty`) setAttr $ty $t[1];
      if (!`getAttr -l $tz`) setAttr $tz $t[2];
    }
    if ($shouldApplyR) {
      if (!`getAttr -l $rx`) setAttr $rx $r[0];
      if (!`getAttr -l $ry`) setAttr $ry $r[1];
      if (!`getAttr -l $rz`) setAttr $rz $r[2];
    }
    if ($shouldApplyS) {
      if (!`getAttr -l $sx`) setAttr $sx $s[0];
      if (!`getAttr -l $sy`) setAttr $sy $s[1];
      if (!`getAttr -l $sz`) setAttr $sz $s[2];
    }
  }
}

/*-
@param $n <string>
@param $m <float[13]>
@returns <float[12]>
*/
proc float[] asIsTransform(string $n, float $m[]) {
  // print("asIsTransform\n"); // debug
  // print("  n :" + $n + "\n"); // debug
  // print("  m :{" + floatArrayToString($m, ", ") + "}\n"); // debug

  float $t[] = {$m[0], $m[1], $m[2]};
  float $q[] = {$m[3], $m[4], $m[5], $m[6]};
  float $s[] = {$m[7], $m[8], $m[9]};
  float $h[] = {$m[10], $m[11], $m[12]};
  // print("  t :{" + floatArrayToString($t, ", ") + "}\n"); // debug
  // print("  q :{" + floatArrayToString($q, ", ") + "}\n"); // debug
  // print("  s :{" + floatArrayToString($s, ", ") + "}\n"); // debug
  // print("  h :{" + floatArrayToString($h, ", ") + "}\n"); // debug

  int $o = `getAttr ($n + ".rotateOrder")`;
  $o = reverseRotateOrder($o);
  int $oXYZ = reverseRotateOrder(0);

  float $ra[] = `getAttr ($n + ".rotateAxis")`;
  $ra = quatInverse(eulerToQuat($ra, $oXYZ));

  float $jo[] = {0, 0, 0, 1};
  if (`attributeQuery -n $n -ex "jointOrient"`) {
    $jo = `getAttr ($n + ".jointOrient")`;
    $jo = quatInverse(eulerToQuat($jo, $oXYZ));
  }

  float $rq[] = quatMultiply($jo, quatMultiply($ra, $q));
  float $r[] = quatToEuler($rq, $o);

  // print("  o :" + $o + "\n"); // debug
  // print("  q :{" + floatArrayToString($q, ", ") + "}\n"); // debug
  // print("  ra:{" + floatArrayToString($ra, ", ") + "}\n"); // debug
  // print("  jo:{" + floatArrayToString($jo, ", ") + "}\n"); // debug
  // print("  rq:{" + floatArrayToString($rq, ", ") + "}\n"); // debug
  // print("  r :{" + floatArrayToString($r, ", ") + "}\n"); // debug

  float $values[] = {
    $t[0], $t[1], $t[2],
    $r[0], $r[1], $r[2],
    $s[0], $s[1], $s[2],
    $h[0], $h[1], $h[2]
  };
  // print("  values:{" + floatArrayToString($values, ", ") + "}\n"); // debug

  return $values;
}

/*-
@param $n <string>
@param $m <float[13]>
@param $hasCommonParent <boolean>
@param $mirrorAxis <int>
@param $primaryAxis <int>
@param $secondaryAxis <int>
@param $invertPrimaryAxis <boolean>
@param $invertSecondaryAxis <boolean>
@returns <float[12]>
*/
proc float[] mirrorTransform(
  string $n,
  float $m[],
  int $hasCommonParent,
  int $mirrorAxis,
  int $primaryAxis,
  int $secondaryAxis,
  int $invertPrimaryAxis,
  int $invertSecondaryAxis
) {
  // print("mirrorTransform\n"); // debug
  // print("  n                  :" + $n + "\n"); // debug
  // print("  m                  :{" + floatArrayToString($m, ", ") + "}\n"); // debug
  // print("  hasCommonParent    :" + $hasCommonParent + "\n"); // debug
  // print("  mirrorAxis         :" + $mirrorAxis + "\n"); // debug
  // print("  primaryAxis        :" + $primaryAxis + "\n"); // debug
  // print("  secondaryAxis      :" + $secondaryAxis + "\n"); // debug
  // print("  invertPrimaryAxis  :" + $invertPrimaryAxis + "\n"); // debug
  // print("  invertSecondaryAxis:" + $invertSecondaryAxis + "\n"); // debug

  float $t[] = {$m[0], $m[1], $m[2]};
  float $q[] = {$m[3], $m[4], $m[5], $m[6]};
  float $s[] = {$m[7], $m[8], $m[9]};
  float $h[] = {$m[10], $m[11], $m[12]};
  // print("  t :{" + floatArrayToString($t, ", ") + "}\n"); // debug
  // print("  q :{" + floatArrayToString($q, ", ") + "}\n"); // debug
  // print("  s :{" + floatArrayToString($s, ", ") + "}\n"); // debug
  // print("  h :{" + floatArrayToString($h, ", ") + "}\n"); // debug

  // 位置のミラーリング
  if ($hasCommonParent) {
    $t[$mirrorAxis] *= -1;
  }
  else {
    if ($invertPrimaryAxis) $t[$primaryAxis] *= -1;
    if ($invertSecondaryAxis) $t[$secondaryAxis] *= -1;
    if ($invertPrimaryAxis == $invertSecondaryAxis) {
      // 第三の軸を反転
      int $usedAxis[];
      $usedAxis[$primaryAxis] = 1;
      $usedAxis[$secondaryAxis] = 1;
      int $i;
      for ($i = 0; $i < 3; $i++) if (!$usedAxis[$i]) break;
      $t[$i] *= -1;
    }
  }

  // 回転のミラーリング
  int $o = `getAttr ($n + ".rotateOrder")`;
  $o = reverseRotateOrder($o);
  int $oXYZ = reverseRotateOrder(0);

  float $ra[] = `getAttr ($n + ".rotateAxis")`;
  $ra = quatInverse(eulerToQuat($ra, $oXYZ));

  float $jo[] = {0, 0, 0, 1};
  if (`attributeQuery -n $n -ex "jointOrient"`) {
    $jo = `getAttr ($n + ".jointOrient")`;
    $jo = quatInverse(eulerToQuat($jo, $oXYZ));
  }

  float $mq[] = $q;
  $mq[$mirrorAxis] *= -1;
  $mq[3] *= -1;
  float $cq[] = quatMultiply($jo, quatMultiply($ra, $mq));

  // print("  o :" + $o + "\n"); // debug
  // print("  q :{" + floatArrayToString($q, ", ") + "}\n"); // debug
  // print("  ra:{" + floatArrayToString($ra, ", ") + "}\n"); // debug
  // print("  jo:{" + floatArrayToString($jo, ", ") + "}\n"); // debug
  // print("  mq:{" + floatArrayToString($mq, ", ") + "}\n"); // debug

  // ソースとターゲットの親が異なる場合は親ノードの反転をリセットしておく
  if (!$hasCommonParent) {
    if ($mirrorAxis == $primaryAxis || $mirrorAxis == $secondaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      if ($mirrorAxis == $primaryAxis) {
        $flipAxis[$secondaryAxis] = 1;
      }
      else if ($mirrorAxis == $secondaryAxis) {
        $flipAxis[$primaryAxis] = 1;
      }
      $cq = quatFlip($cq, $flipAxis);
    }
    if ($invertPrimaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      $flipAxis[$secondaryAxis] = 1;
      $cq = quatFlip($cq, $flipAxis);
    }
    if ($invertSecondaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      $flipAxis[$primaryAxis] = 1;
      $cq = quatFlip($cq, $flipAxis);
    }
  }

  // プライマリとセカンダリを対称化するための反転
  if ($mirrorAxis == $primaryAxis || $mirrorAxis == $secondaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    if ($mirrorAxis == $primaryAxis) {
      $flipAxis[$secondaryAxis] = 1;
    }
    else if ($mirrorAxis == $secondaryAxis) {
      $flipAxis[$primaryAxis] = 1;
    }
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }

  // 任意の反転
  if ($invertPrimaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    $flipAxis[$secondaryAxis] = 1;
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }
  if ($invertSecondaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    $flipAxis[$primaryAxis] = 1;
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }

  float $r[] = quatToEuler($cq, $o);
  // print("  cq:{" + floatArrayToString($cq, ", ") + "}\n"); // debug
  // print("  r :{" + floatArrayToString($r, ", ") + "}\n"); // debug

  float $values[] = {
    $t[0], $t[1], $t[2],
    $r[0], $r[1], $r[2],
    $s[0], $s[1], $s[2],
    $h[0], $h[1], $h[2]
  };
  // print("  values:{" + floatArrayToString($values, ", ") + "}\n"); // debug

  return $values;
}

// -----------------------------------------------------------------------------
// データ変換
// -----------------------------------------------------------------------------
/*-
@param $pasteSetting <boolean[3]>
@param $selectSetting <string[2]>
@param $mirrorSetting <int[5]>
@returns <string>
*/
proc string makePoseSetting(
  int $pasteSetting[],
  string $selectSetting[],
  int $mirrorSetting[]
) {
  string $poseSetting = intArrayToString($pasteSetting, ",");
  $poseSetting += "/" + stringArrayToString($selectSetting, ",");
  $poseSetting += "/" + intArrayToString($mirrorSetting, ",");
  return $poseSetting;
}

/*-
@param $poseName <string>
@param $poseTransforms <string[]>
@returns <string>
*/
proc string makePose(
  string $poseName,
  string $poseTransforms[]
) {
  string $pose = $poseName + "=";
  for ($poseTransform in $poseTransforms) {
    $pose += $poseTransform;
  }
  return $pose;
}

/*-
@param $pose <string>
@returns <string>
*/
proc string extractPoseName(string $pose) {
  string $poseName;
  string $buffer[];
  if (`tokenize $pose "=" $buffer` == 2) {
    $poseName = $buffer[0];
  }
  return $poseName;
}

/*-
@param $pose <string>
@returns <string[]>
*/
proc string[] extractPoseTransforms(string $pose) {
  string $poseTransforms[];
  string $buffer1[];
  if (`tokenize $pose "=" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[1] ";" $buffer2` > 0) {
      $poseTransforms = $buffer2;
    }
  }
  return $poseTransforms;
}

/*-
@param $poseTransform <string>
@returns <string[2]>
*/
proc string[] extractTransformHeader(string $poseTransform) {
  string $header[];
  string $buffer1[];
  if (`tokenize $poseTransform "]" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[0] "[" $buffer2` == 2) {
      $header = $buffer2;
    }
  }
  return $header;
}

/*-
@param $poseTransform <string>
@returns <string>
*/
proc string extractTransformNode(string $poseTransform) {
  string $node;
  string $header[] = extractTransformHeader($poseTransform);
  if (`size $header` == 2) $node = $header[0];
  return $node;
}

/*-
@param $poseTransform <string>
@returns <string>
*/
proc string extractPoseSetting(string $poseTransform) {
  string $poseSetting;
  string $header[] = extractTransformHeader($poseTransform);
  if (`size $header` == 2) $poseSetting = $header[1];
  return $poseSetting;
}

/*-
@param $poseSetting <string>
@returns <string[3]>
*/
proc string[] extractPoseSettings(string $poseSetting) {
  string $poseSettings[];
  string $buffer[];
  if (`tokenize $poseSetting "/" $buffer` == 3) {
    $poseSettings = $buffer;
  }
  return $poseSettings;
}

/*-
@param $poseSetting <string>
@returns <boolean[3]>
*/
proc int[] extractPasteSetting(string $poseSetting) {
  int $pasteSetting[] = {1, 1, 0};
  string $poseSettings[] = extractPoseSettings($poseSetting);
  string $buffer[];
  if (`tokenize $poseSettings[0] "," $buffer` == 3) {
    for ($i = 0; $i < 3; $i++) {
      $pasteSetting[$i] = (int) $buffer[$i];
    }
  }
  return $pasteSetting;
}

/*-
@param $poseSetting <string>
@returns <string[2]>
*/
proc string[] extractSelectSetting(string $poseSetting) {
  string $selectSetting[] = {"_L", "_R"};
  string $poseSettings[] = extractPoseSettings($poseSetting);
  string $buffer[];
  if (`tokenize $poseSettings[1] "," $buffer` == 2) {
    for ($i = 0; $i < 2; $i++) {
      $selectSetting[$i] = $buffer[$i];
    }
  }
  return $selectSetting;
}

/*-
@param $poseSetting <string>
@returns <int[5]>
*/
proc int[] extractMirrorSetting(string $poseSetting) {
  int $mirrorSetting[] = {0, 0, 1, 0, 0};
  string $poseSettings[] = extractPoseSettings($poseSetting);
  string $buffer[];
  if (`tokenize $poseSettings[2] "," $buffer` == 5) {
    for ($i = 0; $i < 5; $i++) {
      $mirrorSetting[$i] = (int) $buffer[$i];
    }
  }
  return $mirrorSetting;
}

/*-
@param $poseTransform <string>
@returns <float[13]>
*/
proc float[] extractTransformValues(string $poseTransform) {
  float $values[] = {
    0, 0, 0,
    0, 0, 0, 1,
    1, 1, 1,
    0, 0, 0
  };
  string $buffer1[];
  if (`tokenize $poseTransform "]" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[1] "," $buffer2` == 13) {
      for ($i = 0; $i < 13; $i++) {
        $values[$i] = (float) $buffer2[$i];
      }
    }
  }
  return $values;
}

// -----------------------------------------------------------------------------
// ポーズ
// -----------------------------------------------------------------------------
/*-
@returns <boolean>
*/
proc int clearPoses() {
  // print("clearPoses\n"); // debug
  global string $nkPoseStackPoses[];
  clear $nkPoseStackPoses;
  notifyInt("nkPoseStackPosesClear", -1);
  return true;
}

/*-
@returns <boolean>
*/
proc int openPoses() {
  // print("openPoses\n"); // debug
  global string $nkPoseStackPoses[];
  string $filenames[] = `fileDialog2
      -cap "Open List - nkPoseStack"
      -ds 2
      -ff "*.posestack"
      -fm 1`;
  // print("  filenames:{\n    " + stringArrayToString($filenames, ",\n    ") + "\n  }\n"); // debug
  if (`size $filenames` != 1) return false;
  string $filename = $filenames[0];
  // print("  filename:" + $filename + "\n"); // debug
  string $lines[] = readAllLines($filename, "");
  // print("  lines:{\n    " + stringArrayToString($lines, ",\n    ") + "\n  }\n"); // debug
  if (!`size $lines`) return false;
  $nkPoseStackPoses = $lines;
  notifyInt("nkPoseStackPosesOpen", -1);
  return true;
}

/*-
@returns <boolean>
*/
proc int importPoses() {
  // print("importPoses\n"); // debug
  global string $nkPoseStackPoses[];
  string $filenames[] = `fileDialog2
      -cap "Import List - nkPoseStack"
      -ds 2
      -ff "*.posestack"
      -fm 1`;
  // print("  filenames:{\n    " + stringArrayToString($filenames, ",\n    ") + "\n  }\n"); // debug
  if (`size $filenames` != 1) return false;
  string $filename = $filenames[0];
  // print("  filename:" + $filename + "\n"); // debug
  string $lines[] = readAllLines($filename, "");
  // print("  lines:{\n    " + stringArrayToString($lines, ",\n    ") + "\n  }\n"); // debug
  if (!`size $lines`) return false;
  for ($line in $lines) {
    $nkPoseStackPoses[`size $nkPoseStackPoses`] = $line;
  }
  notifyInt("nkPoseStackPosesImport", -1);
  return true;
}

/*-
@returns <>
*/
proc savePoses() {
  // print("savePoses\n"); // debug
  global string $nkPoseStackPoses[];
  string $filenames[] = `fileDialog2
      -cap "Save List As... - nkPoseStack"
      -ds 2
      -ff "*.posestack"
      -fm 0`;
  // print("  filenames:{\n    " + stringArrayToString($filenames, ",\n    ") + "\n  }\n"); // debug
  if (`size $filenames` == 1) {
    string $filename = $filenames[0];
    // print("  filename:" + $filename + "\n"); // debug
    string $saveText;
    for ($pose in $nkPoseStackPoses) {
      $saveText += $pose + "\n";
    }
    // print("  saveText:\"\n" + $saveText + "\n\"\n"); // debug
    writeAllText($filename, "", $saveText);
  }
}

/*-
@returns <int>
*/
proc int getNumPoses() {
  global string $nkPoseStackPoses[];
  return `size $nkPoseStackPoses`;
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@returns <string>
*/
proc string getPose(int $poseIndex) {
  global string $nkPoseStackPoses[];
  string $pose;
  if (isInRangeInt($poseIndex, 0, getNumPoses() - 1)) {
    $pose = $nkPoseStackPoses[$poseIndex];
  }
  return $pose;
}

/*-
@returns <string[]>
*/
proc string[] getPoseNames() {
  global string $nkPoseStackPoses[];
  string $poseNames[];
  for ($pose in $nkPoseStackPoses) {
    $poseNames[`size $poseNames`] = extractPoseName($pose);
  }
  return $poseNames;
}

/*-
@param $poseName <string>
@param $nodes <string[]>
@param $poseSettings <string[]>
@returns <int> 追加後のポーズ数。
*/
proc int addPose(
  string $poseName,
  string $nodes[],
  string $poseSettings[]
) {
  // print("addPose\n"); // debug
  // print("  poseName    :" + $poseName + "\n"); // debug
  // print("  nodes       :{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  // print("  poseSettings:{\n    " + stringArrayToString($poseSettings, ",\n    ") + "\n  }\n"); // debug
  global string $nkPoseStackPoses[];
  string $poseTransforms[] = makePoseTransforms($nodes, $poseSettings);
  // print("  poseTransforms:{\n    " + (stringArrayToString($poseTransforms, ",\n    ")) + "\n  }\n"); // debug
  string $pose = makePose(
    $poseName,
    $poseTransforms
  );
  // print("  pose:" + $pose + "\n"); // debug
  $nkPoseStackPoses[(getNumPoses())] = $pose;
  int $numPoses = getNumPoses();
  notifyInt("nkPoseStackPosesAdd", $numPoses - 1);
  return $numPoses;
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@param $poseName <string>
@param $poseSettings <string[]>
@returns <>
*/
proc editPose(int $poseIndex, string $poseName, string $poseSettings[]) {
  // print("editPose\n"); // debug
  // print("  poseIndex   :" + $poseIndex + "\n"); // debug
  // print("  poseName    :" + $poseName + "\n"); // debug
  // print("  poseSettings:{\n    " + stringArrayToString($poseSettings, ",\n    ") + "\n  }\n"); // debug
  global string $nkPoseStackPoses[];

  string $pose = getPose($poseIndex);
  if (!`size $pose`) return;

  string $poseTransforms[] = extractPoseTransforms($pose);
  // print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poseTransforms`) return;

  string $newPoseTransforms[];
  int $numTransforms = minStringArrayCount($poseSettings, $poseTransforms);
  for ($i = 0; $i < $numTransforms; $i++) {
    string $poseTransform = $poseTransforms[$i];
    // print("  poseTransform:" + $poseTransform + "\n"); // debug
    string $n = extractTransformNode($poseTransform);
    // print("    n               :" + $n + "\n"); // debug
    string $header = makeTransformHeader($n, $poseSettings[$i]);
    // print("    header          :" + $header + "\n"); // debug
    float $values[] = extractTransformValues($poseTransform);
    // print("    values          :{" + floatArrayToString($values, ", ") + "}\n"); // debug
    string $newPoseTransform = makePoseTransform($header, $values);
    // print("    newPoseTransform:" + $newPoseTransform + "\n"); // debug
    $newPoseTransforms[$i] = $newPoseTransform;
  }
  // print("  newPoseTransforms:{\n    " + (stringArrayToString($newPoseTransforms, ",\n    ")) + "\n  }\n"); // debug

  string $newPose = makePose(
    $poseName,
    $newPoseTransforms
  );
  // print("  newPose:" + $newPose + "\n"); // debug
  $nkPoseStackPoses[$poseIndex] = $newPose;
  notifyInt("nkPoseStackPosesEdit", $poseIndex);
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@returns <int> 複製先のポーズインデックス。基数は`0`。
*/
proc int duplicatePose(int $poseIndex) {
  // print("duplicatePose\n"); // debug
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  global string $nkPoseStackPoses[];
  if (!isInRangeInt($poseIndex, 0, getNumPoses() - 1)) return $poseIndex;
  string $pose = getPose($poseIndex);
  if (!`size $pose`) return $poseIndex;
  int $newPoseIndex = $poseIndex + 1;
  // print("  newPoseIndex:" + $newPoseIndex + "\n"); // debug
  stringArrayInsertAtIndex($newPoseIndex, $nkPoseStackPoses, $pose);
  notifyInt("nkPoseStackPosesDuplicate", $newPoseIndex);
  return $newPoseIndex;
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@returns <>
*/
proc updatePose(int $poseIndex) {
  // print("updatePose\n"); // debug
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  global string $nkPoseStackPoses[];

  string $pose = getPose($poseIndex);
  if (!`size $pose`) return;

  string $poseName = extractPoseName($pose);
  // print("  poseName      :" + $poseName + "\n"); // debug
  string $poseTransforms[] = extractPoseTransforms($pose);
  // print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poseTransforms`) return;

  string $nodes[];
  string $poseSettings[];
  for ($i = 0; $i < `size $poseTransforms`; $i++) {
    string $poseTransform = $poseTransforms[$i];
    // print("  poseTransform:" + $poseTransform + "\n"); // debug
    string $node = extractTransformNode($poseTransform);
    // print("    node       :" + $node + "\n"); // debug
    string $poseSetting = extractPoseSetting($poseTransform);
    // print("    poseSetting:" + $poseSetting + "\n"); // debug
    $nodes[$i] = $node;
    $poseSettings[$i] = $poseSetting;
  }
  string $newPoseTransforms[] = makePoseTransforms($nodes, $poseSettings);
  // print("  newPoseTransforms:{\n    " + (stringArrayToString($newPoseTransforms, ",\n    ")) + "\n  }\n"); // debug

  string $newPose = makePose(
    $poseName,
    $newPoseTransforms
  );
  // print("  newPose:" + $newPose + "\n"); // debug
  $nkPoseStackPoses[$poseIndex] = $newPose;
  notifyInt("nkPoseStackPosesUpdate", $poseIndex);
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@param $isOpposite <boolean>
@returns <>
*/
proc selectNodes(int $poseIndex, int $isOpposite) {
  // print("selectNodes\n"); // debug
  // print("  poseIndex :" + $poseIndex + "\n"); // debug
  // print("  isOpposite:" + $isOpposite + "\n"); // debug

  string $pose = getPose($poseIndex);
  // print("  pose:" + $pose + "\n"); // debug
  if (!`size $pose`) return;

  string $poseTransforms[] = extractPoseTransforms($pose);
  // print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poseTransforms`) return;

  string $targetNodes[];
  for ($poseTransform in $poseTransforms) {
    // print("  poseTransform:" + $poseTransform + "\n"); // debug
    string $targetNode = extractTransformNode($poseTransform);
    // print("    targetNode   :" + $targetNode + "\n"); // debug
    string $poseSetting = extractPoseSetting($poseTransform);
    // print("    poseSetting  :" + $poseSetting + "\n"); // debug
    string $selectSetting[] = extractSelectSetting($poseSetting);
    // print("    selectSetting:{" + stringArrayToString($selectSetting, ", ") + "}\n"); // debug
    string $patternA = $selectSetting[0];
    string $patternB = $selectSetting[1];
    // print("    patternA     :" + $patternA + "\n"); // debug
    // print("    patternB     :" + $patternB + "\n"); // debug
    if ($isOpposite) {
      if (`gmatch $targetNode ("*" + $patternA + "*")`) {
        $targetNode = substituteAllString($targetNode, $patternA, $patternB);
      }
      else if (`gmatch $targetNode ("*" + $patternB + "*")`) {
        $targetNode = substituteAllString($targetNode, $patternB, $patternA);
      }
    }
    if (`objExists $targetNode`) {
      $targetNodes[`size $targetNodes`] = $targetNode;
    }
  }
  // print("  targetNodes:{\n    " + stringArrayToString($targetNodes, "\n    ") + "\n  }\n"); // debug
  if (!`size $targetNodes`) return;

  int $mods = `getModifiers`;
  // print("  mods:" + $mods + "\n"); // debug
  switch ($mods) {
    // Nothing
    case 0: select -r $targetNodes; break;
    // Shift
    case 1: select -tgl $targetNodes; break;
    // Ctrl
    case 4: select -d $targetNodes; break;
    // Shift + Ctrl
    case 5: select -add $targetNodes; break;
    default: break;
  }
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@param $isOpposite <boolean>
@param $targetNodes <string[]>
@returns <>
*/
proc pastePose(int $poseIndex, int $isOpposite, string $targetNodes[]) {
  // print("pastePose\n"); // debug
  // print("  poseIndex  :" + $poseIndex + "\n"); // debug
  // print("  isOpposite :" + $isOpposite + "\n"); // debug
  // print("  targetNodes:{\n    " + stringArrayToString($targetNodes, ",\n    ") + "\n  }\n"); // debug

  if (!`size $targetNodes`) return;

  string $pose = getPose($poseIndex);
  // print("  pose:" + $pose + "\n"); // debug
  if (!`size $pose`) return;

  string $poseTransforms[] = extractPoseTransforms($pose);
  // print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poseTransforms`) return;

  int $numTargets = minStringArrayCount($targetNodes, $poseTransforms);
  // print("  numTargets:" + $numTargets + "\n"); // debug
  for ($i = 0; $i < $numTargets; $i++) {
    string $poseTransform = $poseTransforms[$i];
    // print("  poseTransform:" + $poseTransform + "\n"); // debug
    string $sourceNode = extractTransformNode($poseTransform);
    // print("    sourceNode     :" + $sourceNode + "\n"); // debug
    string $targetNode = $targetNodes[$i];
    // print("    targetNode     :" + $targetNode + "\n"); // debug

    float $transformValues[] = extractTransformValues($poseTransform);
    // print("    transformValues:{" + floatArrayToString($transformValues, ", ") + "}\n"); // debug

    string $poseSetting = extractPoseSetting($poseTransform);
    // print("    poseSetting    :" + $poseSetting + "\n"); // debug
    int $pasteSetting[] = extractPasteSetting($poseSetting);
    // print("    pasteSetting   :{" + intArrayToString($pasteSetting, ", ") + "}\n"); // debug

    if ($isOpposite) {
      int $mirrorSetting[] = extractMirrorSetting($poseSetting);
      // print("    mirrorSetting  :{" + intArrayToString($mirrorSetting, ", ") + "}\n"); // debug
      string $sourceParent = getParentNode($sourceNode);
      string $targetParent = getParentNode($targetNode);
      int $hasCommonParent = $sourceParent == $targetParent;
      // print("    hasCommonParent:" + $hasCommonParent + "\n"); // debug
      $transformValues = mirrorTransform(
        $targetNode,
        $transformValues,
        $hasCommonParent,
        $mirrorSetting[0],
        $mirrorSetting[1],
        $mirrorSetting[2],
        $mirrorSetting[3],
        $mirrorSetting[4]
      );
    }
    else {
      $transformValues = asIsTransform($targetNode, $transformValues);
    }

    setTransformAttributes(
      $targetNode,
      $transformValues,
      $pasteSetting[0],
      $pasteSetting[1],
      $pasteSetting[2]
    );
  }
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@returns <int> 削除後のポーズ数。
*/
proc int deletePose(int $poseIndex) {
  // print("deletePose\n"); // debug
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  global string $nkPoseStackPoses[];
  if (isInRangeInt($poseIndex, 0, getNumPoses() - 1)) {
    stringArrayRemoveAtIndex($poseIndex, $nkPoseStackPoses);
  }
  int $numPoses = getNumPoses();
  int $nextPoseIndex = $poseIndex;
  if ($numPoses) {
    if ($nextPoseIndex > $numPoses - 1) $nextPoseIndex = $numPoses - 1;
  }
  else {
    $nextPoseIndex = -1;
  }
  notifyInt("nkPoseStackPosesDelete", $nextPoseIndex);
  return $numPoses;
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@returns <int> 移動後のポーズインデックス。基数は`0`。
*/
proc int moveUpPose(int $poseIndex) {
  // print("moveUpPose\n"); // debug
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  global string $nkPoseStackPoses[];
  if (!isInRangeInt($poseIndex, 1, getNumPoses() - 1)) return $poseIndex;
  string $pose = getPose($poseIndex);
  if (!`size $pose`) return $poseIndex;
  int $newPoseIndex = $poseIndex - 1;
  // print("  newPoseIndex:" + $newPoseIndex + "\n"); // debug
  stringArrayRemoveAtIndex($poseIndex, $nkPoseStackPoses);
  stringArrayInsertAtIndex($newPoseIndex, $nkPoseStackPoses, $pose);
  notifyInt("nkPoseStackPosesMoveUp", $newPoseIndex);
  return $newPoseIndex;
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@returns <int> 移動後のポーズインデックス。基数は`0`。
*/
proc int moveDownPose(int $poseIndex) {
  // print("moveDownPose\n"); // debug
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  global string $nkPoseStackPoses[];
  if (!isInRangeInt($poseIndex, 0, getNumPoses() - 2)) return $poseIndex;
  string $pose = getPose($poseIndex);
  if (!`size $pose`) return $poseIndex;
  int $newPoseIndex = $poseIndex + 1;
  // print("  newPoseIndex:" + $newPoseIndex + "\n"); // debug
  stringArrayRemoveAtIndex($poseIndex, $nkPoseStackPoses);
  stringArrayInsertAtIndex($newPoseIndex, $nkPoseStackPoses, $pose);
  notifyInt("nkPoseStackPosesMoveDown", $newPoseIndex);
  return $newPoseIndex;
}

// /////////////////////////////////////////////////////////////////////////////
// テスト
// /////////////////////////////////////////////////////////////////////////////
{
  // オイラーからクォータニオンへの変換テスト
  if (0) {
    string $roNames[] = {"XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"};
    float $jo[] = {-90, 0, 90};
    print("jo:{" + floatArrayToString($jo, ", ") + "}\n");
    for ($i = 0; $i < `size $roNames`; $i++) {
      int $o = reverseRotateOrder($i);
      float $joq[] = quatInverse(eulerToQuat($jo, $o));
      print($roNames[$i] + ":{" + floatArrayToString($joq, ", ") + "}\n");
    }
  }

  // 2022-mirror-transform-test.ma
  if (1) {
    print("--------------------------------------------------------------------------------\n");

    string $axisNames[] = {"X", "Y", "Z"};
    string $planeNames[] = {"XY", "XZ", "YX", "YZ", "ZX", "ZY"};
    int $mirrorAxes[] = {0, 1, 2};
    int $primaryAxes[] = {0, 0, 1, 1, 2, 2};
    int $secondaryAxes[] = {1, 2, 0, 2, 0, 1};

    // default:{0, 1, 2}
    int $axisFlags[] = {0, 1, 2};
    // default:{0, 1, 2, 3, 4, 5}
    int $planeFlags[] = {0, 1, 2, 3, 4, 5};
    // default:{0, 1, 2}
    int $depthFlags[] = {0, 1, 2};

    string $roNames[] = {"XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"};
    int $rotateOrder = 0;

    int $isOpposite = 0;
    int $pasteSetting[] = {1, 1, 0};
    string $selectSetting[] = {"_L", "_R"};
    int $mirrorSetting[] = {0, 0, 1, 0, 0};

    for ($i = 0; $i < `size $axisFlags`; $i++) {
      int $axisIndex = $axisFlags[$i];
      $mirrorSetting[0] = $mirrorAxes[$axisIndex];
      for ($j = 0; $j < `size $planeFlags`; $j++) {
        int $planeIndex = $planeFlags[$j];
        $mirrorSetting[1] = $primaryAxes[$planeIndex];
        $mirrorSetting[2] = $secondaryAxes[$planeIndex];

        string $poseSetting = makePoseSetting(
          $pasteSetting, $selectSetting, $mirrorSetting
        );

        string $baseName = "|" + $axisNames[$axisIndex] + "|ROOT";
        string $nL = $baseName;
        string $nR = $baseName;
        for ($k = 0; $k < `size $depthFlags`; $k++) {
          clearPoses();

          int $depthIndex = $depthFlags[$k] + 1;
          $nL += "|" + $planeNames[$planeIndex] + "_L" + $depthIndex;
          $nR += "|" + $planeNames[$planeIndex] + "_R" + $depthIndex;

          print("--------------------------------------------------------------------------------\n");
          print("nL[" + `objExists $nL` + "]:" + $nL + "\n");
          print("nR[" + `objExists $nR` + "]:" + $nR + "\n");

          setAttr ($nL + ".rotateOrder") $rotateOrder;
          select -r $nL;
          addPose("a", {$nL}, {$poseSetting});

          setAttr ($nR + ".rotateOrder") $rotateOrder;
          select -r $nR;
          pastePose(0, $isOpposite, {$nR});
        }
      }
    }

    print("--------------------------------------------------------------------------------\n");
  }
}

/*
eval ("source \"" + `getenv "MAYA_APP_DIR"` + "/dev/nkPoseStack/nkPoseStackCoreTest.mel\"");
*/
