/*! © 2023 imaoki | MIT License | https://github.com/imaoki */

// -----------------------------------------------------------------------------
// グローバル変数
// -----------------------------------------------------------------------------
/*-
@var <string[]>
*/
global string $nkCopyPosePoses[];
/*-
@var <string[]> `layoutDialog`のコントロール配列。
*/
// global string $nkCopyPosePromptControls[];
/*-
@var <string> `layoutDialog`用のポーズ名バッファ。
*/
global string $nkCopyPosePromptPoseName;
/*-
@var <int[]> `layoutDialog`用の貼り付け設定バッファ。
*/
global int $nkCopyPosePromptPasteSettings[];
if (`size $nkCopyPosePromptPasteSettings` == 0) {
  $nkCopyPosePromptPasteSettings = {1, 1, 0};
}
/*-
@var <string[]> `layoutDialog`用の選択設定バッファ。
*/
global string $nkCopyPosePromptSelectSettings[];
if (`size $nkCopyPosePromptSelectSettings` == 0) {
  $nkCopyPosePromptSelectSettings = {"_L", "_R"};
}
/*-
@var <int[]> `layoutDialog`用のミラー設定バッファ。
*/
global int $nkCopyPosePromptMirrorSettings[];
if (`size $nkCopyPosePromptMirrorSettings` == 0) {
  $nkCopyPosePromptMirrorSettings = {0, 0, 1, 0, 0};
}

// -----------------------------------------------------------------------------
// クォータニオン
// -----------------------------------------------------------------------------
/*-
@param $degree <float>
@param $axis <float[]>
@returns <float[]>
@remarks https://github.com/mrdoob/three.js/blob/dev/LICENSE
*/
proc float[] angleAxisToQuat(float $degree, float $axis[]) {
  float $ha = `deg_to_rad $degree` * 0.5;
  float $s = sin($ha);
  float $qx = $axis[0] * $s;
  float $qy = $axis[1] * $s;
  float $qz = $axis[2] * $s;
  float $qw = cos($ha);
  return {$qx, $qy, $qz, $qw};
}

/*-
@param $order <int>
@returns <int>
*/
proc int reverseRotateOrder(int $order) {
  int $reverseOrder[] = {5, 3, 4, 1, 2, 0};
  return $reverseOrder[$order];
}

/*-
@param $r <float[]>
@param $order <int>
@returns <float[]>
@remarks https://github.com/mrdoob/three.js/blob/dev/LICENSE
*/
proc float[] eulerToQuat(float $r[], int $order) {
  float $qx = 0.0;
  float $qy = 0.0;
  float $qz = 0.0;
  float $qw = 1.0;
  float $rx = `deg_to_rad $r[0]`;
  float $ry = `deg_to_rad $r[1]`;
  float $rz = `deg_to_rad $r[2]`;
  float $cx = cos(0.5 * $rx);
  float $cy = cos(0.5 * $ry);
  float $cz = cos(0.5 * $rz);
  float $sx = sin(0.5 * $rx);
  float $sy = sin(0.5 * $ry);
  float $sz = sin(0.5 * $rz);
  switch ($order) {
    // XYZ
    case 0:
      $qx = $sx * $cy * $cz + $cx * $sy * $sz;
      $qy = $cx * $sy * $cz - $sx * $cy * $sz;
      $qz = $cx * $cy * $sz + $sx * $sy * $cz;
      $qw = $cx * $cy * $cz - $sx * $sy * $sz;
      break;
    // YZX
    case 1:
      $qx = $sx * $cy * $cz + $cx * $sy * $sz;
      $qy = $cx * $sy * $cz + $sx * $cy * $sz;
      $qz = $cx * $cy * $sz - $sx * $sy * $cz;
      $qw = $cx * $cy * $cz - $sx * $sy * $sz;
      break;
    // ZXY
    case 2:
      $qx = $sx * $cy * $cz - $cx * $sy * $sz;
      $qy = $cx * $sy * $cz + $sx * $cy * $sz;
      $qz = $cx * $cy * $sz + $sx * $sy * $cz;
      $qw = $cx * $cy * $cz - $sx * $sy * $sz;
      break;
    // XZY
    case 3:
      $qx = $sx * $cy * $cz - $cx * $sy * $sz;
      $qy = $cx * $sy * $cz - $sx * $cy * $sz;
      $qz = $cx * $cy * $sz + $sx * $sy * $cz;
      $qw = $cx * $cy * $cz + $sx * $sy * $sz;
      break;
    // YXZ
    case 4:
      $qx = $sx * $cy * $cz + $cx * $sy * $sz;
      $qy = $cx * $sy * $cz - $sx * $cy * $sz;
      $qz = $cx * $cy * $sz - $sx * $sy * $cz;
      $qw = $cx * $cy * $cz + $sx * $sy * $sz;
      break;
    // ZYX
    case 5:
      $qx = $sx * $cy * $cz - $cx * $sy * $sz;
      $qy = $cx * $sy * $cz + $sx * $cy * $sz;
      $qz = $cx * $cy * $sz - $sx * $sy * $cz;
      $qw = $cx * $cy * $cz + $sx * $sy * $sz;
      break;
    default: break;
  }
  return {$qx, $qy, $qz, $qw};
}

/*-
@param $q <float[]>
@param $order <int>
@returns <float[]>
@remarks https://github.com/aadebdeb/MatrixQuaternionEulerAngleConversions
*/
proc float[] quatToEuler(float $q[], int $order) {
  float $rx = 0.0;
  float $ry = 0.0;
  float $rz = 0.0;
  float $qx = $q[0];
  float $qy = $q[1];
  float $qz = $q[2];
  float $qw = $q[3];
  float $sx;
  float $sy;
  float $sz;
  int $unlocked;
  switch ($order) {
    // XYZ
    case 0:
      $sy = 2 * $qx * $qz + 2 * $qy * $qw;
      $unlocked = abs($sy) < 0.9999999;
      $rx = $unlocked ? atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1)
          : atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1);
      $ry = asin($sy);
      $rz = $unlocked ? atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1) : 0;
      break;
    // YZX
    case 1:
      $sz = 2 * $qx * $qy + 2 * $qz * $qw;
      $unlocked = abs($sz) < 0.9999999;
      $rx = $unlocked ? atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1) : 0;
      $ry = $unlocked ? atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1)
          : atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1);
      $rz = asin($sz);
      break;
    // ZXY
    case 2:
      $sx = 2 * $qy * $qz + 2 * $qx * $qw;
      $unlocked = abs($sx) < 0.9999999;
      $rx = asin($sx);
      $ry = $unlocked ? atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1) : 0;
      $rz = $unlocked ? atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1)
          : atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1);
      break;
    // XZY
    case 3:
      $sz = -(2 * $qx * $qy - 2 * $qz * $qw);
      $unlocked = abs($sz) < 0.9999999;
      $rx = $unlocked ? atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1)
          : atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1);
      $ry = $unlocked ? atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1) : 0;
      $rz = asin($sz);
      break;
    // YXZ
    case 4:
      $sx = -(2 * $qy * $qz - 2 * $qx * $qw);
      $unlocked = abs($sx) < 0.9999999;
      $rx = asin($sx);
      $ry = $unlocked ? atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1)
          : atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1);
      $rz = $unlocked ? atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1) : 0;
      break;
    // ZYX
    case 5:
      $sy = -(2 * $qx * $qz - 2 * $qy * $qw);
      $unlocked = abs($sy) < 0.9999999;
      $rx = $unlocked ? atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1) : 0;
      $ry = asin($sy);
      $rz = $unlocked ? atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1)
          : atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1);
      break;
    default: break;
  }
  $rx = `rad_to_deg $rx`;
  $ry = `rad_to_deg $ry`;
  $rz = `rad_to_deg $rz`;
  return {$rx, $ry, $rz};
}

/*-
@param $q1 <float[]>
@param $q2 <float[]>
@returns <float[]>
*/
proc float[] quatAdd(float $q1[], float $q2[]) {
  float $q1x = $q1[0];
  float $q1y = $q1[1];
  float $q1z = $q1[2];
  float $q1w = $q1[3];
  float $q2x = $q2[0];
  float $q2y = $q2[1];
  float $q2z = $q2[2];
  float $q2w = $q2[3];
  float $qx = $q1x + $q2x;
  float $qy = $q1y + $q2y;
  float $qz = $q1z + $q2z;
  float $qw = $q1w + $q2w;
  return {$qx, $qy, $qz, $qw};
}

/*-
@param $q1 <float[]>
@param $q2 <float[]>
@returns <float[]>
*/
proc float[] quatSubtract(float $q1[], float $q2[]) {
  float $q1x = $q1[0];
  float $q1y = $q1[1];
  float $q1z = $q1[2];
  float $q1w = $q1[3];
  float $q2x = $q2[0];
  float $q2y = $q2[1];
  float $q2z = $q2[2];
  float $q2w = $q2[3];
  float $qx = $q1x - $q2x;
  float $qy = $q1y - $q2y;
  float $qz = $q1z - $q2z;
  float $qw = $q1w - $q2w;
  return {$qx, $qy, $qz, $qw};
}

/*-
@param $q1 <float[]>
@param $q2 <float[]>
@returns <float[]>
@remarks https://github.com/mrdoob/three.js/blob/dev/LICENSE
*/
proc float[] quatMultiply(float $q1[], float $q2[]) {
  float $q1x = $q1[0];
  float $q1y = $q1[1];
  float $q1z = $q1[2];
  float $q1w = $q1[3];
  float $q2x = $q2[0];
  float $q2y = $q2[1];
  float $q2z = $q2[2];
  float $q2w = $q2[3];
  float $qx = $q1x * $q2w + $q1w * $q2x + $q1y * $q2z - $q1z * $q2y;
  float $qy = $q1y * $q2w + $q1w * $q2y + $q1z * $q2x - $q1x * $q2z;
  float $qz = $q1z * $q2w + $q1w * $q2z + $q1x * $q2y - $q1y * $q2x;
  float $qw = $q1w * $q2w - $q1x * $q2x - $q1y * $q2y - $q1z * $q2z;
  return {$qx, $qy, $qz, $qw};
}

/*-
@param $q <float[]>
@returns <float[]>
*/
proc float[] quatInverse(float $q[]) {
  return {$q[0] * -1, $q[1] * -1, $q[2] * -1, $q[3]};
}

/*-
@param $v <float[]>
@param $q <float[]>
@returns <float[]>
*/
proc float[] rotateVectorByQuat(float $v[], float $q[]) {
  float $iq[] = quatInverse($q);
  float $vq[] = {$v[0], $v[1], $v[2], 0};
  $vq = quatMultiply(quatMultiply($q, $vq), $iq);
  return {$vq[0], $vq[1], $vq[2]};
}

/*-
@param $q <float[]>
@param $axis <float[]>
@returns <float[]>
*/
proc float[] quatFlip(float $q[], float $axis[]) {
  float $flipQ[] = angleAxisToQuat(180.0, $axis);
  return quatMultiply($flipQ, $q);
}

// -----------------------------------------------------------------------------
// ノード関連
// -----------------------------------------------------------------------------
/*-
@returns <string[]>
*/
proc string[] getSelectedNodes() {
  return `ls -l -sl -typ "joint" -typ "transform"`;
}

/*-
@param $n <string>
@returns <string>
*/
proc string getParentNode(string $n) {
  string $parent;
  string $parents[] = `listRelatives -f -p $n`;
  if (`size $parents` > 0) $parent = $parents[0];
  return $parent;
}

// -----------------------------------------------------------------------------
// トランスフォーム関連
// -----------------------------------------------------------------------------
/*-
@param $nodes <string[]>
@returns <string[]>
*/
proc string[] getTransformAttributes(string $nodes[]) {
  print("getTransformAttributes\n");
  print("  nodes:{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n");
  string $matrices[];
  for ($n in $nodes) {
    string $type = `nodeType $n`;
    if ($type == "transform" || $type == "joint") {
      float $t[] = `getAttr ($n + ".translate")`;
      float $r[] = `getAttr ($n + ".rotate")`;
      float $s[] = `getAttr ($n + ".scale")`;
      float $h[] = `getAttr ($n + ".shear")`;
      print("  t :{" + floatArrayToString($t, ", ") + "}\n");
      print("  r :{" + floatArrayToString($r, ", ") + "}\n");
      print("  s :{" + floatArrayToString($s, ", ") + "}\n");
      print("  h :{" + floatArrayToString($h, ", ") + "}\n");

      int $o = `getAttr ($n + ".rotateOrder")`;
      $o = reverseRotateOrder($o);
      int $oXYZ = reverseRotateOrder(0);

      float $rq[] = eulerToQuat($r, $o);

      float $ra[] = `getAttr ($n + ".rotateAxis")`;
      $ra = eulerToQuat($ra, $oXYZ);

      float $jo[] = {0, 0, 0, 1};
      if (`attributeQuery -n $n -ex "jointOrient"`) {
        $jo = `getAttr ($n + ".jointOrient")`;
        $jo = eulerToQuat($jo, $oXYZ);
      }

      float $q[] = quatMultiply($jo, quatMultiply($ra, $rq));

      print("  o :" + $o + "\n");
      print("  rq:{" + floatArrayToString($rq, ", ") + "}\n");
      print("  ra:{" + floatArrayToString($ra, ", ") + "}\n");
      print("  jo:{" + floatArrayToString($jo, ", ") + "}\n");
      print("  q :{" + floatArrayToString($q, ", ") + "}\n");

      int $i = `size $matrices`;
      $matrices[$i] = floatArrayToString($t, ",");
      $matrices[$i] = $matrices[$i] + "," + (floatArrayToString($q, ","));
      $matrices[$i] = $matrices[$i] + "," + (floatArrayToString($s, ","));
      $matrices[$i] = $matrices[$i] + "," + (floatArrayToString($h, ","));
    }
  }
  return $matrices;
}

/*-
@param $n <string>
@param $m <float[]>
@param $shouldSetT <int>
@param $shouldSetR <int>
@param $shouldSetS <int>
@returns <>
*/
proc setTransformAttributes(
  string $n,
  float $m[],
  int $shouldSetT,
  int $shouldSetR,
  int $shouldSetS
) {
  print("setTransformAttributes\n");
  print("  n         :" + $n + "\n");
  print("  m         :{" + floatArrayToString($m, ", ") + "}\n");
  print("  shouldSetT:" + $shouldSetT + "\n");
  print("  shouldSetR:" + $shouldSetR + "\n");
  print("  shouldSetS:" + $shouldSetS + "\n");
  if (`objExists $n` && `size $m` == 12) {
    float $t[] = {$m[0], $m[1], $m[2]};
    float $r[] = {$m[3], $m[4], $m[5]};
    float $s[] = {$m[6], $m[7], $m[8]};
    float $h[] = {$m[9], $m[10], $m[11]};
    print("  t:{" + floatArrayToString($t, ", ") + "}\n");
    print("  r:{" + floatArrayToString($r, ", ") + "}\n");
    print("  s:{" + floatArrayToString($s, ", ") + "}\n");
    print("  h:{" + floatArrayToString($h, ", ") + "}\n");

    string $tx = $n + ".tx";
    string $ty = $n + ".ty";
    string $tz = $n + ".tz";
    string $rx = $n + ".rx";
    string $ry = $n + ".ry";
    string $rz = $n + ".rz";
    string $sx = $n + ".sx";
    string $sy = $n + ".sy";
    string $sz = $n + ".sz";

    if ($shouldSetT) {
      if (!`getAttr -l $tx`) setAttr $tx $t[0];
      if (!`getAttr -l $ty`) setAttr $ty $t[1];
      if (!`getAttr -l $tz`) setAttr $tz $t[2];
    }
    if ($shouldSetR) {
      if (!`getAttr -l $rx`) setAttr $rx $r[0];
      if (!`getAttr -l $ry`) setAttr $ry $r[1];
      if (!`getAttr -l $rz`) setAttr $rz $r[2];
    }
    if ($shouldSetS) {
      if (!`getAttr -l $sx`) setAttr $sx $s[0];
      if (!`getAttr -l $sy`) setAttr $sy $s[1];
      if (!`getAttr -l $sz`) setAttr $sz $s[2];
    }
  }
}

/*-
@param $n <string>
@param $m <float[]>
@returns <float[]>
*/
proc float[] asIsTransform(string $n, float $m[]) {
  print("asIsTransform\n");
  print("  n :" + $n + "\n");
  print("  m :{" + floatArrayToString($m, ", ") + "}\n");

  float $t[] = {$m[0], $m[1], $m[2]};
  float $q[] = {$m[3], $m[4], $m[5], $m[6]};
  float $s[] = {$m[7], $m[8], $m[9]};
  float $h[] = {$m[10], $m[11], $m[12]};
  print("  t :{" + floatArrayToString($t, ", ") + "}\n");
  print("  q :{" + floatArrayToString($q, ", ") + "}\n");
  print("  s :{" + floatArrayToString($s, ", ") + "}\n");
  print("  h :{" + floatArrayToString($h, ", ") + "}\n");

  int $o = `getAttr ($n + ".rotateOrder")`;
  $o = reverseRotateOrder($o);
  int $oXYZ = reverseRotateOrder(0);

  float $ra[] = `getAttr ($n + ".rotateAxis")`;
  $ra = quatInverse(eulerToQuat($ra, $oXYZ));

  float $jo[] = {0, 0, 0, 1};
  if (`attributeQuery -n $n -ex "jointOrient"`) {
    $jo = `getAttr ($n + ".jointOrient")`;
    $jo = quatInverse(eulerToQuat($jo, $oXYZ));
  }

  float $rq[] = quatMultiply($jo, quatMultiply($ra, $q));
  float $r[] = quatToEuler($rq, $o);

  print("  o :" + $o + "\n");
  print("  q :{" + floatArrayToString($q, ", ") + "}\n");
  print("  ra:{" + floatArrayToString($ra, ", ") + "}\n");
  print("  jo:{" + floatArrayToString($jo, ", ") + "}\n");
  print("  rq:{" + floatArrayToString($rq, ", ") + "}\n");
  print("  r :{" + floatArrayToString($r, ", ") + "}\n");

  float $newMatrix[] = {
    $t[0], $t[1], $t[2],
    $r[0], $r[1], $r[2],
    $s[0], $s[1], $s[2],
    $h[0], $h[1], $h[2]
  };
  print("  newMatrix:{" + floatArrayToString($newMatrix, ", ") + "}\n");

  return $newMatrix;
}

/*-
@param $n <string>
@param $m <float[]>
@param $isRoot <boolean>
@param $mirrorAxis <int>
@param $primaryAxis <int>
@param $secondaryAxis <int>
@param $invertPrimaryAxis <boolean>
@param $invertSecondaryAxis <boolean>
@returns <float[]>
*/
proc float[] mirrorTransform(
  string $n,
  float $m[],
  int $isRoot,
  int $mirrorAxis,
  int $primaryAxis,
  int $secondaryAxis,
  int $invertPrimaryAxis,
  int $invertSecondaryAxis
) {
  print("mirrorTransform\n");
  print("  n                  :" + $n + "\n");
  print("  m                  :{" + floatArrayToString($m, ", ") + "}\n");
  print("  isRoot             :" + $isRoot + "\n");
  print("  mirrorAxis         :" + $mirrorAxis + "\n");
  print("  primaryAxis        :" + $primaryAxis + "\n");
  print("  secondaryAxis      :" + $secondaryAxis + "\n");
  print("  invertPrimaryAxis  :" + $invertPrimaryAxis + "\n");
  print("  invertSecondaryAxis:" + $invertSecondaryAxis + "\n");

  float $t[] = {$m[0], $m[1], $m[2]};
  float $q[] = {$m[3], $m[4], $m[5], $m[6]};
  float $s[] = {$m[7], $m[8], $m[9]};
  float $h[] = {$m[10], $m[11], $m[12]};
  print("  t :{" + floatArrayToString($t, ", ") + "}\n");
  print("  q :{" + floatArrayToString($q, ", ") + "}\n");
  print("  s :{" + floatArrayToString($s, ", ") + "}\n");
  print("  h :{" + floatArrayToString($h, ", ") + "}\n");

  // 位置のミラーリング
  if ($isRoot) {
    $t[$mirrorAxis] *= -1;
  }
  else {
    if ($invertPrimaryAxis) $t[$primaryAxis] *= -1;
    if ($invertSecondaryAxis) $t[$secondaryAxis] *= -1;
    if ($invertPrimaryAxis == $invertSecondaryAxis) {
      int $usedAxis[];
      $usedAxis[$primaryAxis] = 1;
      $usedAxis[$secondaryAxis] = 1;
      int $i;
      for ($i = 0; $i < 3; $i++) if (!$usedAxis[$i]) break;
      $t[$i] *= -1;
    }
  }

  // 回転のミラーリング
  int $o = `getAttr ($n + ".rotateOrder")`;
  $o = reverseRotateOrder($o);
  int $oXYZ = reverseRotateOrder(0);

  float $ra[] = `getAttr ($n + ".rotateAxis")`;
  $ra = quatInverse(eulerToQuat($ra, $oXYZ));

  float $jo[] = {0, 0, 0, 1};
  if (`attributeQuery -n $n -ex "jointOrient"`) {
    $jo = `getAttr ($n + ".jointOrient")`;
    $jo = quatInverse(eulerToQuat($jo, $oXYZ));
  }

  float $mq[] = $q;
  $mq[$mirrorAxis] *= -1;
  $mq[3] *= -1;
  float $cq[] = quatMultiply($jo, quatMultiply($ra, $mq));

  print("  o :" + $o + "\n");
  print("  q :{" + floatArrayToString($q, ", ") + "}\n");
  print("  ra:{" + floatArrayToString($ra, ", ") + "}\n");
  print("  jo:{" + floatArrayToString($jo, ", ") + "}\n");
  print("  mq:{" + floatArrayToString($mq, ", ") + "}\n");

  // ルート以外は親ノードの反転をリセットしておく
  if (!$isRoot) {
    if ($mirrorAxis == $primaryAxis || $mirrorAxis == $secondaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      if ($mirrorAxis == $primaryAxis) {
        $flipAxis[$secondaryAxis] = 1;
      }
      else if ($mirrorAxis == $secondaryAxis) {
        $flipAxis[$primaryAxis] = 1;
      }
      $cq = quatFlip($cq, $flipAxis);
    }
    if ($invertPrimaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      $flipAxis[$secondaryAxis] = 1;
      $cq = quatFlip($cq, $flipAxis);
    }
    if ($invertSecondaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      $flipAxis[$primaryAxis] = 1;
      $cq = quatFlip($cq, $flipAxis);
    }
  }

  // プライマリとセカンダリを対象化するための反転
  if ($mirrorAxis == $primaryAxis || $mirrorAxis == $secondaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    if ($mirrorAxis == $primaryAxis) {
      $flipAxis[$secondaryAxis] = 1;
    }
    else if ($mirrorAxis == $secondaryAxis) {
      $flipAxis[$primaryAxis] = 1;
    }
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }

  // 任意の反転
  if ($invertPrimaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    $flipAxis[$secondaryAxis] = 1;
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }
  if ($invertSecondaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    $flipAxis[$primaryAxis] = 1;
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }

  float $r[] = quatToEuler($cq, $o);
  print("  cq:{" + floatArrayToString($cq, ", ") + "}\n");
  print("  r :{" + floatArrayToString($r, ", ") + "}\n");

  float $newMatrix[] = {
    $t[0], $t[1], $t[2],
    $r[0], $r[1], $r[2],
    $s[0], $s[1], $s[2],
    $h[0], $h[1], $h[2]
  };
  print("  newMatrix:{" + floatArrayToString($newMatrix, ", ") + "}\n");

  return $newMatrix;
}

// -----------------------------------------------------------------------------
// データ変換
// -----------------------------------------------------------------------------
/*-
@param $pasteSettings <int[]>
@param $selectSettings <string[]>
@param $mirrorSettings <int[]>
@returns <string>
*/
proc string buildPoseSettings(
  int $pasteSettings[],
  string $selectSettings[],
  int $mirrorSettings[]
) {
  string $poseSettings = intArrayToString($pasteSettings, ",");
  $poseSettings += ";" + stringArrayToString($selectSettings, ",");
  $poseSettings += ";" + intArrayToString($mirrorSettings, ",");
  return $poseSettings;
}
/*-
@param $poseName <string>
// @param $poseSettings <int[]>
@param $pasteSettings <int[]>
@param $selectSettings <string[]>
@param $mirrorSettings <int[]>
@param $nodes <string[]>
@param $matrices <string[]>
@returns <string>
*/
proc string buildPose(
  string $poseName,
  int $pasteSettings[],
  string $selectSettings[],
  int $mirrorSettings[],
  string $nodes[],
  string $matrices[]
) {
  string $poseSettings = buildPoseSettings(
    $pasteSettings, $selectSettings, $mirrorSettings
  );
  string $pose = $poseName + "[" + $poseSettings + "]";
  int $numNodes = `size $nodes`;
  for ($i = 0; $i < $numNodes; $i++) {
    $pose += $nodes[$i] + "=" + $matrices[$i];
    if ($i < $numNodes - 1) {
      $pose += ";";
    }
  }
  return $pose;
}

/*-
@param $pose <string>
@returns <string>
*/
proc string extractPoseName(string $pose) {
  string $poseName;
  string $buffer[];
  if (`tokenize $pose "[" $buffer` == 2) {
    $poseName = $buffer[0];
  }
  return $poseName;
}

/*-
@param $pose <string>
@returns <string[]>
*/
proc string[] extractPoseSettings(string $pose) {
  string $poseSettings[];
  string $buffer1[];
  if (`tokenize $pose "]" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[0] "[" $buffer2` == 2) {
      tokenize $buffer2[1] ";" $poseSettings;
    }
  }
  return $poseSettings;
}

/*-
@param $pose <string>
@returns <int[]>
*/
proc int[] extractPasteSettings(string $pose) {
  int $pasteSettings[] = {1, 1, 0};
  int $numSettings = `size $pasteSettings`;
  string $poseSettings[] = extractPoseSettings($pose);
  if (`size $poseSettings` == 3) {
    string $buffer[];
    if (`tokenize $poseSettings[0] "," $buffer` == $numSettings) {
      for ($i = 0; $i < $numSettings; $i++) {
        $pasteSettings[$i] = (int) $buffer[$i];
      }
    }
  }
  return $pasteSettings;
}

/*-
@param $pose <string>
@returns <string[]>
*/
proc string[] extractSelectSettings(string $pose) {
  string $selectSettings[] = {"_L", "_R"};
  int $numSettings = `size $selectSettings`;
  string $poseSettings[] = extractPoseSettings($pose);
  if (`size $poseSettings` == 3) {
    string $buffer[];
    if (`tokenize $poseSettings[1] "," $buffer` == $numSettings) {
      for ($i = 0; $i < $numSettings; $i++) {
        $selectSettings[$i] = $buffer[$i];
      }
    }
  }
  return $selectSettings;
}

/*-
@param $pose <string>
@returns <int[]>
*/
proc int[] extractMirrorSettings(string $pose) {
  int $mirrorSettings[] = {0, 0, 1, 0, 0};
  int $numSettings = `size $mirrorSettings`;
  string $poseSettings[] = extractPoseSettings($pose);
  if (`size $poseSettings` == 3) {
    string $buffer[];
    if (`tokenize $poseSettings[2] "," $buffer` == $numSettings) {
      for ($i = 0; $i < $numSettings; $i++) {
        $mirrorSettings[$i] = (int) $buffer[$i];
      }
    }
  }
  return $mirrorSettings;
}

/*-
@param $pose <string>
@returns <string[]>
*/
proc string[] extractPoseValues(string $pose) {
  string $poseValues[];
  string $buffer1[];
  if (`tokenize $pose "]" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[1] ";" $buffer2` > 0) {
      $poseValues = $buffer2;
    }
  }
  return $poseValues;
}

/*-
@param $poseValue <string>
@returns <string>
*/
proc string extractPoseNode(string $poseValue) {
  string $poseNode;
  string $buffer[];
  if (`tokenize $poseValue "=" $buffer` == 2) {
    $poseNode = $buffer[0];
  }
  return $poseNode;
}

/*-
@param $poseValue <string>
@returns <float[]>
*/
proc float[] extractPoseMatrix(string $poseValue) {
  float $poseMatrix[];
  int $numMatrix = 13;
  string $buffer1[];
  if (`tokenize $poseValue "=" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[1] "," $buffer2` == $numMatrix) {
      for ($i = 0; $i < $numMatrix; $i++) {
        $poseMatrix[$i] = (float) $buffer2[$i];
      }
    }
  }
  return $poseMatrix;
}

// -----------------------------------------------------------------------------
// ポーズ関連
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc clearPoses() {
  global string $nkCopyPosePoses[];
  clear $nkCopyPosePoses;
}

/*-
@param $i <int>
@returns <string>
*/
proc string getPose(int $i) {
  global string $nkCopyPosePoses[];
  string $pose;
  if ($i >= 0 && $i < `size $nkCopyPosePoses`) {
    $pose = $nkCopyPosePoses[$i];
  }
  return $pose;
}

/*-
@returns <string>
*/
proc string getSelectedPose() {
  global string $nkCopyPosePoses[];
  string $selectedPose;
  // int $selectedIndices[] = poseListGetSelectedIndices();
  int $selectedIndices[] = {1};
  if (`size $selectedIndices` == 1) {
    $selectedPose = getPose($selectedIndices[0] - 1);
  }
  return $selectedPose;
}

/*-
@returns <string[]>
*/
proc string[] getPoseNames() {
  global string $nkCopyPosePoses[];
  string $poseNames[];
  for ($pose in $nkCopyPosePoses) {
    $poseNames[`size $poseNames`] = extractPoseName($pose);
  }
  return $poseNames;
}

/*-
@returns <string[]>
*/
proc string[] getPoseMirrorSettingLabels() {
  global string $nkCopyPosePoses[];
  string $axisLabels[] = {"X", "Y", "Z"};
  string $invertLabels[] = {"+", "-"};
  string $mirrorSettingLabels[];
  for ($pose in $nkCopyPosePoses) {
    int $ms[] = extractMirrorSettings($pose);
    string $label = $axisLabels[$ms[0]];
    $label += $invertLabels[$ms[3]] +$axisLabels[$ms[1]];
    $label += $invertLabels[$ms[4]] +$axisLabels[$ms[2]];
    $mirrorSettingLabels[`size $mirrorSettingLabels`] = $label;
  }
  return $mirrorSettingLabels;
}

/*-
@param $n <string>
@returns <string>
*/
proc string createUniquePoseName(string $n) {
  string $buffer[];
  tokenize $n "|" $buffer;
  string $baseName = $buffer[`size $buffer` - 1] + "@" + `currentTime -q`;
  string $poseNames[] = getPoseNames();
  int $number = 1;
  string $poseName = $baseName + "_" + $number;
  int $index = stringArrayFind($poseName, 0, $poseNames);
  while ($index >= 0) {
    $number += 1;
    $poseName = $baseName + "_" + $number;
    $index = stringArrayFind($poseName, 0, $poseNames);
  }
  return $poseName;
}

/*-
@param $poseName <string>
@returns <string>
*/
proc string sanitizePoseName(string $poseName) {
  $poseName = substituteAllString($poseName, ",", "_");
  $poseName = substituteAllString($poseName, ";", "_");
  $poseName = substituteAllString($poseName, "[", "_");
  $poseName = substituteAllString($poseName, "]", "_");
  return $poseName;
}

/*-
@returns <>
*/
proc addPose() {
  print("addPose\n");
  global string $nkCopyPosePoses[];
  // global string $nkCopyPosePromptControls[];
  global string $nkCopyPosePromptPoseName;
  global int $nkCopyPosePromptPasteSettings[];
  global string $nkCopyPosePromptSelectSettings[];
  global int $nkCopyPosePromptMirrorSettings[];

  string $nodes[] = getSelectedNodes();
  print("  nodes:{\n    " + (stringArrayToString($nodes, ",\n    ")) + "\n  }\n");
  if (`size $nodes` == 0) return;

  // clear $nkCopyPosePromptControls;
  $nkCopyPosePromptPoseName = createUniquePoseName($nodes[0]);

  // string $result = `layoutDialog
  //     -p "nkCopyPoseWindow"
  //     -t "Add Pose"
  //     -ui "buildPromptWindow"`;

  // print("  result:" + $result + "\n");
  // print("    poseName                      :" + $nkCopyPosePromptPoseName + "\n");
  // print("    nkCopyPosePromptPasteSettings :{" + intArrayToString($nkCopyPosePromptPasteSettings, ", ") + "}\n");
  // print("    nkCopyPosePromptSelectSettings:{" + stringArrayToString($nkCopyPosePromptSelectSettings, ", ") + "}\n");
  // print("    nkCopyPosePromptMirrorSettings:{" + intArrayToString($nkCopyPosePromptMirrorSettings, ", ") + "}\n");

  // if ($result != "OK") return;

  string $matrices[] = getTransformAttributes($nodes);
  print("  matrices:{\n    " + (stringArrayToString($matrices, ",\n    ")) + "\n  }\n");

  string $pose = buildPose(
    $nkCopyPosePromptPoseName,
    $nkCopyPosePromptPasteSettings,
    $nkCopyPosePromptSelectSettings,
    $nkCopyPosePromptMirrorSettings,
    $nodes,
    $matrices
  );
  print("  pose:" + $pose + "\n");

  $nkCopyPosePoses[`size $nkCopyPosePoses`] = $pose;
  // refreshPoseList();
  // poseListSelectItem(`size $nkCopyPosePoses`);
}

/*-
@param $isOpposite <boolean>
@returns <>
*/
proc pastePose(int $isOpposite) {
  print("pastePose\n");
  print("  isOpposite:" + $isOpposite + "\n");

  string $pose = getSelectedPose();
  if (`size $pose` == 0) return;

  int $pasteAttributes[] = extractPasteSettings($pose);
  int $mirrorSettings[] = extractMirrorSettings($pose);
  int $mirrorAxis = $mirrorSettings[0];
  int $primaryAxis = $mirrorSettings[1];
  int $secondaryAxis = $mirrorSettings[2];
  int $invertAxis[] = {$mirrorSettings[3], $mirrorSettings[4]};
  print("  pasteAttributes:{" + intArrayToString($pasteAttributes, ", ") + "}\n");
  print("  pose           :" + $pose + "\n");
  print("  mirrorAxis     :" + $mirrorAxis + "\n");
  print("  primaryAxis    :" + $primaryAxis + "\n");
  print("  secondaryAxis  :" + $secondaryAxis + "\n");
  print("  invertAxis     :{" + intArrayToString($invertAxis, ", ") + "}\n");

  string $nodes[] = getSelectedNodes();
  print("  nodes:{\n    " + (stringArrayToString($nodes, "\n    ")) + "\n  }\n");
  int $numNodes = `size $nodes`;
  if ($numNodes == 0) return;

  string $poseValues[] = extractPoseValues($pose);
  print("  poseValues:{\n    " + stringArrayToString($poseValues, ",\n    ") + "\n  }\n");
  int $numPoseValues = `size $poseValues`;
  if ($numPoseValues == 0) return;

  int $numTargets = `min $numNodes $numPoseValues`;
  print("  numTargets:" + $numTargets + "\n");

  for ($i = 0; $i < $numTargets; $i++) {
    string $poseValue = $poseValues[$i];
    float $matrix[] = extractPoseMatrix($poseValue);
    string $sourceNode = extractPoseNode($poseValue);
    string $targetNode = $nodes[$i];
    if ($isOpposite) {
      string $sourceParent = getParentNode($sourceNode);
      string $targetParent = getParentNode($targetNode);
      int $isRoot = $sourceParent == $targetParent;
      $matrix = mirrorTransform(
        $targetNode,
        $matrix,
        $isRoot,
        $mirrorAxis,
        $primaryAxis,
        $secondaryAxis,
        $invertAxis[0],
        $invertAxis[1]
      );
    }
    else {
      $matrix = asIsTransform($targetNode, $matrix);
    }

    setTransformAttributes(
      $targetNode,
      $matrix,
      $pasteAttributes[0],
      $pasteAttributes[1],
      $pasteAttributes[2]
    );
  }
}

// オイラーからクォータニオンへの変換テスト
if (0) {
  string $roNames[] = {"XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"};
  float $jo[] = {-90, 0, 90};
  print("jo:{" + floatArrayToString($jo, ", ") + "}\n");
  for ($i = 0; $i < `size $roNames`; $i++) {
    int $o = reverseRotateOrder($i);
    float $joq[] = quatInverse(eulerToQuat($jo, $o));
    print($roNames[$i] + ":{" + floatArrayToString($joq, ", ") + "}\n");
  }
}

// 2022-mirror-transform-test.ma
if (1) {
  print("--------------------------------------------------------------------------------\n");

  string $axisNames[] = {"X", "Y", "Z"};
  string $planeNames[] = {"XY", "XZ", "YX", "YZ", "ZX", "ZY"};
  int $mirrorAxes[] = {0, 1, 2};
  int $primaryAxes[] = {0, 0, 1, 1, 2, 2};
  int $secondaryAxes[] = {1, 2, 0, 2, 0, 1};

  // default:{0, 1, 2}
  int $axisFlags[] = {0, 1, 2};
  // default:{0, 1, 2, 3, 4, 5}
  int $planeFlags[] = {0, 1, 2, 3, 4, 5};
  // default:{0, 1, 2}
  int $depthFlags[] = {0, 1, 2};

  string $roNames[] = {"XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"};
  int $rotateOrder = 0;

  int $isOpposite = 0;
  // default:{1, 1, 0}
  $nkCopyPosePromptPasteSettings = {1, 1, 0};
  // default:{0, 0, 1, 0, 0}
  $nkCopyPosePromptMirrorSettings = {0, 0, 1, 0, 0};

  for ($i = 0; $i < `size $axisFlags`; $i++) {
    int $axisIndex = $axisFlags[$i];
    $nkCopyPosePromptMirrorSettings[0] = $mirrorAxes[$axisIndex];
    for ($j = 0; $j < `size $planeFlags`; $j++) {
      int $planeIndex = $planeFlags[$j];
      $nkCopyPosePromptMirrorSettings[1] = $primaryAxes[$planeIndex];
      $nkCopyPosePromptMirrorSettings[2] = $secondaryAxes[$planeIndex];

      string $baseName = "|" + $axisNames[$axisIndex] + "|ROOT";
      string $nL = $baseName;
      string $nR = $baseName;
      for ($k = 0; $k < `size $depthFlags`; $k++) {
        int $depthIndex = $depthFlags[$k] + 1;
        $nL += "|" + $planeNames[$planeIndex] + "_L" + $depthIndex;
        $nR += "|" + $planeNames[$planeIndex] + "_R" + $depthIndex;

        print("--------------------------------------------------------------------------------\n");
        print("nL[" + `objExists $nL` + "]:" + $nL + "\n");
        print("nR[" + `objExists $nR` + "]:" + $nR + "\n");

        setAttr ($nL + ".rotateOrder") $rotateOrder;
        select -r $nL;
        clearPoses();
        addPose();

        setAttr ($nR + ".rotateOrder") $rotateOrder;
        select -r $nR;
        pastePose($isOpposite);
      }
    }
  }

  print("--------------------------------------------------------------------------------\n");
}

/*
eval ("source \"" + `getenv "MAYA_APP_DIR"` + "/library/nkCopyPose/nkCopyPoseCore.mel\"");
*/
