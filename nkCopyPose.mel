/*! © 2023 imaoki | MIT License | https://github.com/imaoki */
/*-
@var <string[]>
```mel
{
  "pose1@|jointA1=0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1;|jointA1|jointA2=...",
  "pose2@|jointB1=0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1;|jointB1|jointB2=...",
  "..."
}
```
@remarks
```ebnf
       poses = "{" , { '"' , pose , '"' , "," } , "}" ;
        pose = posename , "@" , posevalues ;
    posename = { any_char - "@" } ;
  posevalues = { nodepath , "=" , posematrix , ";" }+ ;
    nodepath = [ "|" ] , nodename , { "|" , nodename } ;
    nodename = ( letter | "_" ) , { alphanumeric | "_" } ;
  posematrix = t , "," , r , "," , s , "," , h , "," , q ;
           t = number , "," , number , "," , number ;
           r = number , "," , number , "," , number ;
           s = number , "," , number , "," , number ;
           h = number , "," , number , "," , number ;
           q = number , "," , number , "," , number , "," , number ;
      number = [ "-" ] , ( integer | real ) ;
alphanumeric = letter | digit ;
       digit = ? 0-9 ? ;
      letter = ? a-zA-Z ? ;
    any_char = ? Any visible characters ? ;
```
*/
global string $nkCopyPosePoses[];

// -----------------------------------------------------------------------------
// UIコントロール関連
// -----------------------------------------------------------------------------
/*-
@param $item <string>
@returns <>
*/
proc poseListAppend(string $item) {
  textScrollList -e -a $item "nkCopyPoseWindow|outerForm|poseList";
}
/*-
@returns <>
*/
proc poseListRemoveAll() {
  textScrollList -e -ra "nkCopyPoseWindow|outerForm|poseList";
}
/*-
@param $index <int>
@returns <>
*/
proc poseListSelectItem(int $index) {
  textScrollList -e -sii $index "nkCopyPoseWindow|outerForm|poseList";
}
/*-
@returns <int[]>
*/
proc int[] poseListGetSelectedIndices() {
  return `textScrollList -q -sii "nkCopyPoseWindow|outerForm|poseList"`;
}
/*-
@returns <string>
*/
proc string oppositePatternATextGetText() {
  return `textFieldGrp -q -tx "nkCopyPoseWindow|outerForm|framesColumn|selectFrame|selectButtonsForm|oppositePatternAText"`;
}
/*-
@returns <string>
*/
proc string oppositePatternBTextGetText() {
  return `textFieldGrp -q -tx "nkCopyPoseWindow|outerForm|framesColumn|selectFrame|selectButtonsForm|oppositePatternBText"`;
}
/*-
@returns <int[]>
*/
proc int[] pasteAttributesCheckBoxGetValues() {
  return `checkBoxGrp -q -va3 "nkCopyPoseWindow|outerForm|framesColumn|pasteFrame|pasteColumn|pasteAttributesCheckBox"`;
}
/*-
@param $v1 <boolean>
@param $v2 <boolean>
@param $v3 <boolean>
@returns <>
*/
proc pasteAttributesCheckBoxSetValues(int $v1, int $v2, int $v3) {
  checkBoxGrp -e -va3 $v1 $v2 $v3 "nkCopyPoseWindow|outerForm|framesColumn|pasteFrame|pasteColumn|pasteAttributesCheckBox";
}
/*-
@returns <int>
*/
proc int mirrorAxisRadioButtonGetSelect() {
  return `radioButtonGrp -q -sl "nkCopyPoseWindow|outerForm|framesColumn|mirrorSettingsFrame|mirrorSettingsColumn|mirrorAxisRadioButton"`;
}
/*-
@param $index <int>
@returns <>
*/
proc mirrorAxisRadioButtonSetSelect(int $index) {
  radioButtonGrp -e -sl $index "nkCopyPoseWindow|outerForm|framesColumn|mirrorSettingsFrame|mirrorSettingsColumn|mirrorAxisRadioButton";
}
/*-
@returns <int>
*/
proc int primaryAxisRadioButtonGetSelect() {
  return `radioButtonGrp -q -sl "nkCopyPoseWindow|outerForm|framesColumn|mirrorSettingsFrame|mirrorSettingsColumn|primaryAxisRadioButton"`;
}
/*-
@param $index <int>
@returns <>
*/
proc primaryAxisRadioButtonSetSelect(int $index) {
  radioButtonGrp -e -sl $index "nkCopyPoseWindow|outerForm|framesColumn|mirrorSettingsFrame|mirrorSettingsColumn|primaryAxisRadioButton";
}
/*-
@returns <int>
*/
proc int secondaryAxisRadioButtonGetSelect() {
  return `radioButtonGrp -q -sl "nkCopyPoseWindow|outerForm|framesColumn|mirrorSettingsFrame|mirrorSettingsColumn|secondaryAxisRadioButton"`;
}
/*-
@param $index <int>
@returns <>
*/
proc secondaryAxisRadioButtonSetSelect(int $index) {
  radioButtonGrp -e -sl $index "nkCopyPoseWindow|outerForm|framesColumn|mirrorSettingsFrame|mirrorSettingsColumn|secondaryAxisRadioButton";
}
/*-
@returns <int[]>
*/
proc int[] invertAxisCheckBoxGetValues() {
  return `checkBoxGrp -q -va2 "nkCopyPoseWindow|outerForm|framesColumn|mirrorSettingsFrame|mirrorSettingsColumn|invertAxisCheckBox"`;
}
/*-
@param $v1 <boolean>
@param $v2 <boolean>
@returns <>
*/
proc invertAxisCheckBoxSetValues(int $v1, int $v2) {
  checkBoxGrp -e -va2 $v1 $v2 "nkCopyPoseWindow|outerForm|framesColumn|mirrorSettingsFrame|mirrorSettingsColumn|invertAxisCheckBox";
}
/*-
@returns <>
*/
proc primaryAxisRadioButtonChanged() {
  int $primaryAxis = primaryAxisRadioButtonGetSelect();
  int $secondaryAxis = secondaryAxisRadioButtonGetSelect();
  if ($primaryAxis == $secondaryAxis) {
    $secondaryAxis = $primaryAxis + 1;
  }
  if ($secondaryAxis > 3) {
    $secondaryAxis = 1;
  }
  secondaryAxisRadioButtonSetSelect($secondaryAxis);
}
/*-
@returns <>
*/
proc secondaryAxisRadioButtonChanged() {
  int $primaryAxis = primaryAxisRadioButtonGetSelect();
  int $secondaryAxis = secondaryAxisRadioButtonGetSelect();
  if ($primaryAxis == $secondaryAxis) {
    $primaryAxis = $secondaryAxis - 1;
  }
  if ($primaryAxis < 1) {
    $primaryAxis = 3;
  }
  primaryAxisRadioButtonSetSelect($primaryAxis);
}

// -----------------------------------------------------------------------------
// クォータニオン
// -----------------------------------------------------------------------------
/*-
@param $degree <float>
@param $axis <float[]>
@returns <float[]>
@remarks https://github.com/mrdoob/three.js/blob/dev/LICENSE
*/
proc float[] angleAxisToQuat(float $degree, float $axis[]) {
  float $ha = `deg_to_rad $degree` * 0.5;
  float $s = sin($ha);
  float $qx = $axis[0] * $s;
  float $qy = $axis[1] * $s;
  float $qz = $axis[2] * $s;
  float $qw = cos($ha);
  return {$qx, $qy, $qz, $qw};
}
/*-
@param $order <int>
@returns <int>
*/
proc int reverseRotateOrder(int $order) {
  int $reverseOrder[] = {5, 3, 4, 1, 2, 0};
  return $reverseOrder[$order];
}
/*-
@param $r <float[]>
@param $order <int>
@returns <float[]>
@remarks https://github.com/mrdoob/three.js/blob/dev/LICENSE
*/
proc float[] eulerToQuat(float $r[], int $order) {
  float $qx = 0.0;
  float $qy = 0.0;
  float $qz = 0.0;
  float $qw = 1.0;
  float $rx = `deg_to_rad $r[0]`;
  float $ry = `deg_to_rad $r[1]`;
  float $rz = `deg_to_rad $r[2]`;
  float $cx = cos(0.5 * $rx);
  float $cy = cos(0.5 * $ry);
  float $cz = cos(0.5 * $rz);
  float $sx = sin(0.5 * $rx);
  float $sy = sin(0.5 * $ry);
  float $sz = sin(0.5 * $rz);
  switch ($order) {
    // XYZ
    case 0:
      $qx = $sx * $cy * $cz + $cx * $sy * $sz;
      $qy = $cx * $sy * $cz - $sx * $cy * $sz;
      $qz = $cx * $cy * $sz + $sx * $sy * $cz;
      $qw = $cx * $cy * $cz - $sx * $sy * $sz;
      break;
    // YZX
    case 1:
      $qx = $sx * $cy * $cz + $cx * $sy * $sz;
      $qy = $cx * $sy * $cz + $sx * $cy * $sz;
      $qz = $cx * $cy * $sz - $sx * $sy * $cz;
      $qw = $cx * $cy * $cz - $sx * $sy * $sz;
      break;
    // ZXY
    case 2:
      $qx = $sx * $cy * $cz - $cx * $sy * $sz;
      $qy = $cx * $sy * $cz + $sx * $cy * $sz;
      $qz = $cx * $cy * $sz + $sx * $sy * $cz;
      $qw = $cx * $cy * $cz - $sx * $sy * $sz;
      break;
    // XZY
    case 3:
      $qx = $sx * $cy * $cz - $cx * $sy * $sz;
      $qy = $cx * $sy * $cz - $sx * $cy * $sz;
      $qz = $cx * $cy * $sz + $sx * $sy * $cz;
      $qw = $cx * $cy * $cz + $sx * $sy * $sz;
      break;
    // YXZ
    case 4:
      $qx = $sx * $cy * $cz + $cx * $sy * $sz;
      $qy = $cx * $sy * $cz - $sx * $cy * $sz;
      $qz = $cx * $cy * $sz - $sx * $sy * $cz;
      $qw = $cx * $cy * $cz + $sx * $sy * $sz;
      break;
    // ZYX
    case 5:
      $qx = $sx * $cy * $cz - $cx * $sy * $sz;
      $qy = $cx * $sy * $cz + $sx * $cy * $sz;
      $qz = $cx * $cy * $sz - $sx * $sy * $cz;
      $qw = $cx * $cy * $cz + $sx * $sy * $sz;
      break;
    default: break;
  }
  return {$qx, $qy, $qz, $qw};
}
/*-
@param $q <float[]>
@param $order <int>
@returns <float[]>
@remarks https://github.com/aadebdeb/MatrixQuaternionEulerAngleConversions
*/
proc float[] quatToEuler(float $q[], int $order) {
  float $rx = 0.0;
  float $ry = 0.0;
  float $rz = 0.0;
  float $qx = $q[0];
  float $qy = $q[1];
  float $qz = $q[2];
  float $qw = $q[3];
  float $sx;
  float $sy;
  float $sz;
  int $unlocked;
  switch ($order) {
    // XYZ
    case 0:
      $sy = 2 * $qx * $qz + 2 * $qy * $qw;
      $unlocked = abs($sy) < 0.9999999;
      $rx = $unlocked ? atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1)
          : atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1);
      $ry = asin($sy);
      $rz = $unlocked ? atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1) : 0;
      break;
    // YZX
    case 1:
      $sz = 2 * $qx * $qy + 2 * $qz * $qw;
      $unlocked = abs($sz) < 0.9999999;
      $rx = $unlocked ? atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1) : 0;
      $ry = $unlocked ? atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1)
          : atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1);
      $rz = asin($sz);
      break;
    // ZXY
    case 2:
      $sx = 2 * $qy * $qz + 2 * $qx * $qw;
      $unlocked = abs($sx) < 0.9999999;
      $rx = asin($sx);
      $ry = $unlocked ? atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1) : 0;
      $rz = $unlocked ? atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1)
          : atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1);
      break;
    // XZY
    case 3:
      $sz = -(2 * $qx * $qy - 2 * $qz * $qw);
      $unlocked = abs($sz) < 0.9999999;
      $rx = $unlocked ? atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1)
          : atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1);
      $ry = $unlocked ? atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1) : 0;
      $rz = asin($sz);
      break;
    // YXZ
    case 4:
      $sx = -(2 * $qy * $qz - 2 * $qx * $qw);
      $unlocked = abs($sx) < 0.9999999;
      $rx = asin($sx);
      $ry = $unlocked ? atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1)
          : atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1);
      $rz = $unlocked ? atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1) : 0;
      break;
    // ZYX
    case 5:
      $sy = -(2 * $qx * $qz - 2 * $qy * $qw);
      $unlocked = abs($sy) < 0.9999999;
      $rx = $unlocked ? atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1) : 0;
      $ry = asin($sy);
      $rz = $unlocked ? atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1)
          : atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1);
      break;
    default: break;
  }
  $rx = `rad_to_deg $rx`;
  $ry = `rad_to_deg $ry`;
  $rz = `rad_to_deg $rz`;
  return {$rx, $ry, $rz};
}
/*-
@param $q1 <float[]>
@param $q2 <float[]>
@returns <float[]>
*/
proc float[] quatAdd(float $q1[], float $q2[]) {
  float $q1x = $q1[0];
  float $q1y = $q1[1];
  float $q1z = $q1[2];
  float $q1w = $q1[3];
  float $q2x = $q2[0];
  float $q2y = $q2[1];
  float $q2z = $q2[2];
  float $q2w = $q2[3];
  float $qx = $q1x + $q2x;
  float $qy = $q1y + $q2y;
  float $qz = $q1z + $q2z;
  float $qw = $q1w + $q2w;
  return {$qx, $qy, $qz, $qw};
}
/*-
@param $q1 <float[]>
@param $q2 <float[]>
@returns <float[]>
*/
proc float[] quatSubtract(float $q1[], float $q2[]) {
  float $q1x = $q1[0];
  float $q1y = $q1[1];
  float $q1z = $q1[2];
  float $q1w = $q1[3];
  float $q2x = $q2[0];
  float $q2y = $q2[1];
  float $q2z = $q2[2];
  float $q2w = $q2[3];
  float $qx = $q1x - $q2x;
  float $qy = $q1y - $q2y;
  float $qz = $q1z - $q2z;
  float $qw = $q1w - $q2w;
  return {$qx, $qy, $qz, $qw};
}
/*-
@param $q1 <float[]>
@param $q2 <float[]>
@returns <float[]>
@remarks https://github.com/mrdoob/three.js/blob/dev/LICENSE
*/
proc float[] quatMultiply(float $q1[], float $q2[]) {
  float $q1x = $q1[0];
  float $q1y = $q1[1];
  float $q1z = $q1[2];
  float $q1w = $q1[3];
  float $q2x = $q2[0];
  float $q2y = $q2[1];
  float $q2z = $q2[2];
  float $q2w = $q2[3];
  float $qx = $q1x * $q2w + $q1w * $q2x + $q1y * $q2z - $q1z * $q2y;
  float $qy = $q1y * $q2w + $q1w * $q2y + $q1z * $q2x - $q1x * $q2z;
  float $qz = $q1z * $q2w + $q1w * $q2z + $q1x * $q2y - $q1y * $q2x;
  float $qw = $q1w * $q2w - $q1x * $q2x - $q1y * $q2y - $q1z * $q2z;
  return {$qx, $qy, $qz, $qw};
}
/*-
@param $q <float[]>
@returns <float[]>
*/
proc float[] quatInverse(float $q[]) {
  return {$q[0] * -1, $q[1] * -1, $q[2] * -1, $q[3]};
}
/*-
@param $v <float[]>
@param $q <float[]>
@returns <float[]>
*/
proc float[] rotateVectorByQuat(float $v[], float $q[]) {
  float $iq[] = quatInverse($q);
  float $vq[] = {$v[0], $v[1], $v[2], 0};
  $vq = quatMultiply(quatMultiply($q, $vq), $iq);
  return {$vq[0], $vq[1], $vq[2]};
}
/*-
@param $q <float[]>
@param $axis <float[]>
@returns <float[]>
*/
proc float[] quatFlip(float $q[], float $axis[]) {
  float $flipQ[] = angleAxisToQuat(180.0, $axis);
  return quatMultiply($flipQ, $q);
}

// -----------------------------------------------------------------------------
// ノード関連
// -----------------------------------------------------------------------------
/*-
@returns <string[]>
*/
proc string[] getSelectedNodes() {
  return `ls -l -sl -typ "joint" -typ "transform"`;
}
/*-
@param $n <string>
@returns <string>
*/
proc string getParentNode(string $n) {
  string $parent;
  string $parents[] = `listRelatives -f -p $n`;
  if (`size $parents` > 0) $parent = $parents[0];
  return $parent;
}
/*-
@param $n <string>
@returns <string>
*/
// proc string getRootNode(string $n) {
//   string $parent = $n;
//   string $parents[] = `listRelatives -f -p -typ "joint" -typ "transform" $parent`;
//   while (`size $parents` > 0) {
//     $parent = $parents[0];
//     $parents = `listRelatives -f -p -typ "joint" -typ "transform" $parent`;
//   }
//   return $parent;
// }
/*-
@returns <string[]>
*/
// proc string[] getRootNodes() {
//   string $roots[];
//   string $selection[] = getSelectedNodes();
//   // print("selection:\n  " + (stringArrayToString($selection, "\n  ")) + "\n");
//   for ($n in $selection) {
//     string $root = getRootNode($n);
//     if (`objExists $root` && (stringArrayFind($root, 0, $roots) == -1)) {
//       $roots[`size $roots`] = $root;
//     }
//   }
//   return $roots;
// }
/*-
@param $n <string>
@returns <string[]>
*/
// proc string[] getDescendentNodes(string $n) {
//   string $descendents[] = {$n};
//   string $children[] = `listRelatives -f -c -typ "joint" -typ "transform" $n`;
//   $children = `sort $children`;
//   for ($c in $children) {
//     string $grandchildren[] = getDescendentNodes($c);
//     appendStringArray($descendents, $grandchildren, `size $grandchildren`);
//   }
//   return $descendents;
// }
/*-
@param $selectedOnly <boolean>
@returns <string[]>
*/
// proc string[] getHierarchies(int $selectedOnly) {
//   string $roots[] = getRootNodes();
//   // print("roots:\n  " + (stringArrayToString($roots, "\n  ")) + "\n");
//   string $transformNodes[];
//   for ($n in $roots) {
//     string $children[] = getDescendentNodes($n);
//     appendStringArray($transformNodes, $children, `size $children`);
//   }
//   if ($selectedOnly) {
//     string $selection[] = getSelectedNodes();
//     for ($i = `size $transformNodes` - 1; $i >= 0; $i--) {
//       int $index = stringArrayFind($transformNodes[$i], 0, $selection);
//       if ($index < 0) {
//         stringArrayRemoveAtIndex($i, $transformNodes);
//       }
//     }
//   }
//   return $transformNodes;
// }

// -----------------------------------------------------------------------------
// トランスフォーム関連
// -----------------------------------------------------------------------------
/*-
@param $nodes <string[]>
@returns <string[]>
*/
proc string[] getTransformAttributes(string $nodes[]) {
  print("getTransformAttributes\n");
  // print("  nodes:{" + stringArrayToString($nodes, ", ") + "}\n");
  string $matrices[];
  for ($n in $nodes) {
    string $type = `nodeType $n`;
    if ($type == "transform" || $type == "joint") {
      float $t[] = `getAttr ($n + ".translate")`;
      float $r[] = `getAttr ($n + ".rotate")`;
      float $s[] = `getAttr ($n + ".scale")`;
      float $h[] = `getAttr ($n + ".shear")`;
      // print("  t:{" + floatArrayToString($t, ", ") + "}\n");
      // print("  r:{" + floatArrayToString($r, ", ") + "}\n");
      // print("  s:{" + floatArrayToString($s, ", ") + "}\n");
      // print("  h:{" + floatArrayToString($h, ", ") + "}\n");

      int $o = `getAttr ($n + ".rotateOrder")`;
      $o = reverseRotateOrder($o);
      int $oXYZ = reverseRotateOrder(0);

      float $rq[] = eulerToQuat($r, $o);

      float $ra[] = `getAttr ($n + ".rotateAxis")`;
      $ra = eulerToQuat($ra, $oXYZ);

      float $jo[] = {0, 0, 0, 1};
      if (`attributeQuery -n $n -ex "jointOrient"`) {
        $jo = `getAttr ($n + ".jointOrient")`;
        $jo = eulerToQuat($jo, $oXYZ);
      }

      float $q[] = quatMultiply($jo, quatMultiply($ra, $rq));

      print("  o :" + $o + "\n");
      print("  rq:{" + floatArrayToString($rq, ", ") + "}\n");
      print("  ra:{" + floatArrayToString($ra, ", ") + "}\n");
      print("  jo:{" + floatArrayToString($jo, ", ") + "}\n");
      print("  q :{" + floatArrayToString($q, ", ") + "}\n");

      int $i = `size $matrices`;
      $matrices[$i] = floatArrayToString($t, ",");
      $matrices[$i] = $matrices[$i] + "," + (floatArrayToString($r, ","));
      $matrices[$i] = $matrices[$i] + "," + (floatArrayToString($s, ","));
      $matrices[$i] = $matrices[$i] + "," + (floatArrayToString($h, ","));
      $matrices[$i] = $matrices[$i] + "," + (floatArrayToString($q, ","));
    }
  }
  return $matrices;
}
/*-
@param $n <string>
@param $m <float[]>
@param $shouldSetT <int>
@param $shouldSetR <int>
@param $shouldSetS <int>
@returns <>
*/
proc setTransformAttributes(
  string $n,
  float $m[],
  int $shouldSetT,
  int $shouldSetR,
  int $shouldSetS
) {
  // print("setTransformAttributes\n");
  // print("  n         :" + $n + "\n");
  // print("  m         :{" + floatArrayToString($m, ", ") + "}\n");
  // print("  shouldSetT:" + $shouldSetT + "\n");
  // print("  shouldSetR:" + $shouldSetR + "\n");
  // print("  shouldSetS:" + $shouldSetS + "\n");
  if (`objExists $n` && `size $m` == 16) {
    float $t[] = {$m[0], $m[1], $m[2]};
    float $r[] = {$m[3], $m[4], $m[5]};
    float $s[] = {$m[6], $m[7], $m[8]};
    float $h[] = {$m[9], $m[10], $m[11]};
    float $q[] = {$m[12], $m[13], $m[14], $m[15]};
    // print("  t:{" + floatArrayToString($t, ", ") + "}\n");
    // print("  r:{" + floatArrayToString($r, ", ") + "}\n");
    // print("  s:{" + floatArrayToString($s, ", ") + "}\n");
    // print("  h:{" + floatArrayToString($h, ", ") + "}\n");
    // print("  q:{" + floatArrayToString($q, ", ") + "}\n");

    string $tx = $n + ".tx";
    string $ty = $n + ".ty";
    string $tz = $n + ".tz";
    string $rx = $n + ".rx";
    string $ry = $n + ".ry";
    string $rz = $n + ".rz";
    string $sx = $n + ".sx";
    string $sy = $n + ".sy";
    string $sz = $n + ".sz";

    if ($shouldSetT) {
      if (!`getAttr -l $tx`) setAttr $tx $t[0];
      if (!`getAttr -l $ty`) setAttr $ty $t[1];
      if (!`getAttr -l $tz`) setAttr $tz $t[2];
    }
    if ($shouldSetR) {
      if (!`getAttr -l $rx`) setAttr $rx $r[0];
      if (!`getAttr -l $ry`) setAttr $ry $r[1];
      if (!`getAttr -l $rz`) setAttr $rz $r[2];
    }
    if ($shouldSetS) {
      if (!`getAttr -l $sx`) setAttr $sx $s[0];
      if (!`getAttr -l $sy`) setAttr $sy $s[1];
      if (!`getAttr -l $sz`) setAttr $sz $s[2];
    }
  }
}
/*-
@param $n <string>
@param $m <float[]>
@returns <float[]>
*/
proc float[] asIsTransform(string $n, float $m[]) {
  print("asIsTransform\n");
  // print("  n :" + $n + "\n");
  // print("  m :{" + floatArrayToString($m, ", ") + "}\n");

  float $t[] = {$m[0], $m[1], $m[2]};
  float $s[] = {$m[6], $m[7], $m[8]};
  float $h[] = {$m[9], $m[10], $m[11]};
  float $q[] = {$m[12], $m[13], $m[14], $m[15]};
  // print("  t :{" + floatArrayToString($t, ", ") + "}\n");
  // print("  s :{" + floatArrayToString($s, ", ") + "}\n");
  // print("  h :{" + floatArrayToString($h, ", ") + "}\n");
  // print("  q :{" + floatArrayToString($q, ", ") + "}\n");

  int $o = `getAttr ($n + ".rotateOrder")`;
  $o = reverseRotateOrder($o);
  int $oXYZ = reverseRotateOrder(0);

  float $ra[] = `getAttr ($n + ".rotateAxis")`;
  $ra = quatInverse(eulerToQuat($ra, $oXYZ));

  float $jo[] = {0, 0, 0, 1};
  if (`attributeQuery -n $n -ex "jointOrient"`) {
    $jo = `getAttr ($n + ".jointOrient")`;
    $jo = quatInverse(eulerToQuat($jo, $oXYZ));
  }

  float $rq[] = quatMultiply($jo, quatMultiply($ra, $q));
  float $r[] = quatToEuler($rq, $o);

  print("  o :" + $o + "\n");
  print("  q :{" + floatArrayToString($q, ", ") + "}\n");
  print("  ra:{" + floatArrayToString($ra, ", ") + "}\n");
  print("  jo:{" + floatArrayToString($jo, ", ") + "}\n");
  print("  rq:{" + floatArrayToString($rq, ", ") + "}\n");
  print("  r :{" + floatArrayToString($r, ", ") + "}\n");

  float $newMatrix[] = {
    $t[0], $t[1], $t[2],
    $r[0], $r[1], $r[2],
    $s[0], $s[1], $s[2],
    $h[0], $h[1], $h[2],
    $q[0], $q[1], $q[2], $q[3]
  };
  // print("  newMatrix:{" + floatArrayToString($newMatrix, ", ") + "}\n");

  return $newMatrix;
}
/*-
@param $n <string>
@param $m <float[]>
@param $isRoot <boolean>
@param $mirrorAxis <int>
@param $primaryAxis <int>
@param $secondaryAxis <int>
@param $invertPrimaryAxis <boolean>
@param $invertSecondaryAxis <boolean>
@returns <float[]>
*/
proc float[] mirrorTransform(
  string $n,
  float $m[],
  int $isRoot,
  int $mirrorAxis,
  int $primaryAxis,
  int $secondaryAxis,
  int $invertPrimaryAxis,
  int $invertSecondaryAxis
) {
  print("mirrorTransform\n");
  // print("  n                  :" + $n + "\n");
  // print("  m                  :{" + floatArrayToString($m, ", ") + "}\n");
  // print("  isRoot             :" + $isRoot + "\n");
  // print("  mirrorAxis         :" + $mirrorAxis + "\n");
  // print("  primaryAxis        :" + $primaryAxis + "\n");
  // print("  secondaryAxis      :" + $secondaryAxis + "\n");
  // print("  invertPrimaryAxis  :" + $invertPrimaryAxis + "\n");
  // print("  invertSecondaryAxis:" + $invertSecondaryAxis + "\n");

  float $t[] = {$m[0], $m[1], $m[2]};
  float $s[] = {$m[6], $m[7], $m[8]};
  float $h[] = {$m[9], $m[10], $m[11]};
  float $q[] = {$m[12], $m[13], $m[14], $m[15]};
  // print("  t :{" + floatArrayToString($t, ", ") + "}\n");
  // print("  s :{" + floatArrayToString($s, ", ") + "}\n");
  // print("  h :{" + floatArrayToString($h, ", ") + "}\n");
  // print("  q :{" + floatArrayToString($q, ", ") + "}\n");

  // 位置のミラーリング
  if ($isRoot) {
    $t[$mirrorAxis] *= -1;
  }
  else {
    if ($invertPrimaryAxis) $t[$primaryAxis] *= -1;
    if ($invertSecondaryAxis) $t[$secondaryAxis] *= -1;
    if ($invertPrimaryAxis == $invertSecondaryAxis) {
      int $usedAxis[];
      $usedAxis[$primaryAxis] = 1;
      $usedAxis[$secondaryAxis] = 1;
      int $i;
      for ($i = 0; $i < 3; $i++) if (!$usedAxis[$i]) break;
      print("  tertiaryAxis:" + $i + "\n");
      $t[$i] *= -1;
    }
  }

  // 回転のミラーリング
  int $o = `getAttr ($n + ".rotateOrder")`;
  $o = reverseRotateOrder($o);
  int $oXYZ = reverseRotateOrder(0);

  float $ra[] = `getAttr ($n + ".rotateAxis")`;
  $ra = quatInverse(eulerToQuat($ra, $oXYZ));

  float $jo[] = {0, 0, 0, 1};
  if (`attributeQuery -n $n -ex "jointOrient"`) {
    $jo = `getAttr ($n + ".jointOrient")`;
    $jo = quatInverse(eulerToQuat($jo, $oXYZ));
  }

  float $mq[] = $q;
  $mq[$mirrorAxis] *= -1;
  $mq[3] *= -1;
  float $cq[] = quatMultiply($jo, quatMultiply($ra, $mq));

  print("  o :" + $o + "\n");
  print("  q :{" + floatArrayToString($q, ", ") + "}\n");
  print("  ra:{" + floatArrayToString($ra, ", ") + "}\n");
  print("  jo:{" + floatArrayToString($jo, ", ") + "}\n");
  print("  mq:{" + floatArrayToString($mq, ", ") + "}\n");
  print("  cq:{" + floatArrayToString($cq, ", ") + "}\n");

  // ルート以外は親ノードの反転をリセットしておく
  if (!$isRoot) {
    if ($mirrorAxis == $primaryAxis || $mirrorAxis == $secondaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      if ($mirrorAxis == $primaryAxis) {
        $flipAxis[$secondaryAxis] = 1;
      }
      else if ($mirrorAxis == $secondaryAxis) {
        $flipAxis[$primaryAxis] = 1;
      }
      $cq = quatFlip($cq, $flipAxis);
      print("  cq:{" + floatArrayToString($cq, ", ") + "}\n");
    }
    if ($invertPrimaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      $flipAxis[$secondaryAxis] = 1;
      $cq = quatFlip($cq, $flipAxis);
      print("  cq:{" + floatArrayToString($cq, ", ") + "}\n");
    }
    if ($invertSecondaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      $flipAxis[$primaryAxis] = 1;
      $cq = quatFlip($cq, $flipAxis);
      print("  cq:{" + floatArrayToString($cq, ", ") + "}\n");
    }
  }

  // プライマリとセカンダリを対象化するための反転
  if ($mirrorAxis == $primaryAxis || $mirrorAxis == $secondaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    if ($mirrorAxis == $primaryAxis) {
      $flipAxis[$secondaryAxis] = 1;
    }
    else if ($mirrorAxis == $secondaryAxis) {
      $flipAxis[$primaryAxis] = 1;
    }
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
    print("  cq:{" + floatArrayToString($cq, ", ") + "}\n");
  }

  // 任意の反転
  if ($invertPrimaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    $flipAxis[$secondaryAxis] = 1;
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
    print("  cq:{" + floatArrayToString($cq, ", ") + "}\n");
  }
  if ($invertSecondaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    $flipAxis[$primaryAxis] = 1;
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
    print("  cq:{" + floatArrayToString($cq, ", ") + "}\n");
  }

  float $r[] = quatToEuler($cq, $o);
  print("  r :{" + floatArrayToString($r, ", ") + "}\n");

  float $newMatrix[] = {
    $t[0], $t[1], $t[2],
    $r[0], $r[1], $r[2],
    $s[0], $s[1], $s[2],
    $h[0], $h[1], $h[2],
    $q[0], $q[1], $q[2], $q[3]
  };
  print("  newMatrix:{" + floatArrayToString($newMatrix, ", ") + "}\n");

  return $newMatrix;
}

// -----------------------------------------------------------------------------
// データ変換
// -----------------------------------------------------------------------------
/*-
@param $poseName <string>
@param $nodes <string[]>
@param $matrices <string[]>
@returns <string>
*/
proc string buildPose(string $poseName, string $nodes[], string $matrices[]) {
  int $numNodes = `size $nodes`;
  string $pose = $poseName + "@";
  for ($i = 0; $i < $numNodes; $i++) {
    $pose += $nodes[$i] + "=" + $matrices[$i];
    if ($i < $numNodes - 1) {
      $pose += ";";
    }
  }
  return $pose;
}
/*-
@param $pose <string>
@returns <string>
*/
proc string extractPoseName(string $pose) {
  string $poseName;
  string $buffer[];
  if (`tokenize $pose "@" $buffer` == 2) {
    $poseName = $buffer[0];
  }
  return $poseName;
}
/*-
@param $pose <string>
@returns <string[]>
*/
proc string[] extractPoseValues(string $pose) {
  string $poseValues[];
  string $buffer1[];
  if (`tokenize $pose "@" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[1] ";" $buffer2` > 0) {
      $poseValues = $buffer2;
    }
  }
  return $poseValues;
}
/*-
@param $poseValue <string>
@returns <string>
*/
proc string extractPoseNode(string $poseValue) {
  string $poseNode;
  string $buffer[];
  if (`tokenize $poseValue "=" $buffer` == 2) {
    $poseNode = $buffer[0];
  }
  return $poseNode;
}
/*-
@param $poseValue <string>
@returns <float[]>
*/
proc float[] extractPoseMatrix(string $poseValue) {
  float $poseMatrix[];
  string $buffer1[];
  if (`tokenize $poseValue "=" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[1] "," $buffer2` == 16) {
      for ($i = 0; $i < 16; $i++) {
        $poseMatrix[$i] = (float) $buffer2[$i];
      }
    }
  }
  return $poseMatrix;
}

// -----------------------------------------------------------------------------
// ポーズ関連
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc clearPoses() {
  // print("clearPoses()\n");
  global string $nkCopyPosePoses[];
  clear $nkCopyPosePoses;
  // refreshPoseList();
}
/*-
@param $i <int>
@returns <string>
*/
proc string getPose(int $i) {
  global string $nkCopyPosePoses[];
  string $pose;
  if ($i >= 0 && $i < `size $nkCopyPosePoses`) {
    $pose = $nkCopyPosePoses[$i];
  }
  return $pose;
}
/*-
@returns <string[]>
*/
proc string[] getPoseNames() {
  global string $nkCopyPosePoses[];
  string $poseNames[];
  for ($pose in $nkCopyPosePoses) {
    string $poseName = extractPoseName($pose);
    if (`size $poseName` > 0) {
      $poseNames[`size $poseNames`] = $poseName;
    }
  }
  return $poseNames;
}
/*-
@param $baseName <string>
@returns <string>
*/
proc string createUniquePoseName(string $baseName) {
  string $poseNames[] = getPoseNames();
  int $number = 1;
  string $poseName = $baseName + "_pose" + $number;
  int $index = stringArrayFind($poseName, 0, $poseNames);
  while ($index >= 0) {
    $number += 1;
    $poseName = $baseName + "_pose" + $number;
    $index = stringArrayFind($poseName, 0, $poseNames);
  }
  return $poseName;
}
/*-
@param $poseName <string>
@returns <boolean>
*/
proc int isValidPoseName(string $poseName) {
  if (`size $poseName` == 0) return false;
  if (`size (match("@", $poseName))` > 0) return false;
  if (stringArrayContains($poseName, getPoseNames())) return false;
  return true;
}
/*-
@returns <string>
*/
proc string getSelectedPose() {
  global string $nkCopyPosePoses[];
  string $selectedPose;
  int $selectedIndices[] = poseListGetSelectedIndices();
  if (`size $selectedIndices` == 1) {
    // int $poseIndex = $selectedIndices[0] - 1;
    // $selectedPose = $nkCopyPosePoses[$poseIndex];
    $selectedPose = getPose($selectedIndices[0] - 1);
  }
  return $selectedPose;
}
/*-
@returns <>
*/
proc refreshPoseList() {
  // print("refreshPoseList()\n");
  int $selectedIndices[] = poseListGetSelectedIndices();
  int $selectedIndex = 0;
  if (`size $selectedIndices` == 1) $selectedIndex = $selectedIndices[0];
  // print("selectedIndex:" + $selectedIndex + "\n");

  poseListRemoveAll();
  string $poseNames[] = getPoseNames();
  for ($poseName in $poseNames) {
    poseListAppend($poseName);
  }

  int $numPoseNames = `size $poseNames`;
  if ($numPoseNames > 0 && $selectedIndex > 0) {
    if ($selectedIndex > $numPoseNames) {
      $selectedIndex = $numPoseNames;
    }
    poseListSelectItem($selectedIndex);
  }
}
/*-
@param $quiet <boolean>
@returns <>
*/
proc addPose(int $quiet) {
  // print("addPose quiet:" + $quiet + "\n");
  global string $nkCopyPosePoses[];

  string $nodes[] = getSelectedNodes();
  // print("  nodes:{" + (stringArrayToString($nodes, ", ")) + "}\n");
  if (`size $nodes` == 0) return;

  string $uniquePoseName = createUniquePoseName($nodes[0]);
  // print("  uniquePoseName:" + $uniquePoseName + "\n");

  string $result = "OK";
  if (!$quiet) {
    $result = `promptDialog
        -b "OK" -db "OK"
        -b "Cancel"-cb "Cancel"
        -m "Enter Pose Name:"
        -t "Pose Name"
        -tx $uniquePoseName`;
  }
  // print("  result:" + $result + "\n");
  if ($result != "OK") return;

  string $newPoseName = $uniquePoseName;
  if (!$quiet) $newPoseName = `promptDialog -q -tx`;
  // print("  newPoseName:" + $newPoseName + "\n");
  if (!isValidPoseName($newPoseName)) {
    confirmDialog
        -b "OK"
        -m "* More than one character required.\n* Do not contain \"@\".\n* Unique name required."
        -t "Invalid Pose Name";
    return;
  }

  string $matrices[] = getTransformAttributes($nodes);
  // print("  matrices:{\n    " + (stringArrayToString($matrices, ",\n    ")) + "\n  }\n");

  string $pose = buildPose($newPoseName, $nodes, $matrices);
  // print("  pose:" + $pose + "\n");

  $nkCopyPosePoses[`size $nkCopyPosePoses`] = $pose;
  refreshPoseList();
  poseListSelectItem(`size $nkCopyPosePoses`);
}
/*-
@returns <>
*/
proc removePose() {
  // print("removePose()\n");
  global string $nkCopyPosePoses[];
  int $selectedIndices[] = poseListGetSelectedIndices();
  if (`size $selectedIndices` != 1) return;

  int $selectedIndex = $selectedIndices[0];
  // print("selectedIndex:" + $selectedIndex + "\n");
  int $poseIndex = $selectedIndex - 1;
  stringArrayRemoveAtIndex($poseIndex, $nkCopyPosePoses);
  refreshPoseList();
}
/*-
@returns <>
*/
proc updatePose() {
  // print("updatePose()\n");
  global string $nkCopyPosePoses[];
  int $selectedIndices[] = poseListGetSelectedIndices();
  if (`size $selectedIndices` != 1) return;

  int $selectedIndex = $selectedIndices[0];
  // print("  selectedIndex:" + $selectedIndex + "\n");
  int $poseIndex = $selectedIndex - 1;
  // print("  poseIndex:" + $poseIndex + "\n");

  string $pose = $nkCopyPosePoses[$poseIndex];
  string $poseName = extractPoseName($pose);
  // print("  poseName:" + $poseName + "\n");

  string $nodes[] = getSelectedNodes();
  // print("  nodes:{" + (stringArrayToString($nodes, ", ")) + "}\n");
  if (`size $nodes` == 0) return;

  string $matrices[] = getTransformAttributes($nodes);
  // print("  matrices:{\n    " + (stringArrayToString($matrices, ",\n    ")) + "\n  }\n");

  $pose = buildPose($poseName, $nodes, $matrices);
  // print("  pose:" + $pose + "\n");

  $nkCopyPosePoses[$poseIndex] = $pose;
  refreshPoseList();
  poseListSelectItem($selectedIndices[0]);
}
/*-
@returns <>
*/
proc renamePose() {
  // print("renamePose()\n");
  global string $nkCopyPosePoses[];
  int $selectedIndices[] = poseListGetSelectedIndices();
  if (`size $selectedIndices` != 1) return;

  int $selectedIndex = $selectedIndices[0];
  // print("selectedIndex:" + $selectedIndex + "\n");
  int $poseIndex = $selectedIndex - 1;
  // print("poseIndex:" + $poseIndex + "\n");
  string $pose = $nkCopyPosePoses[$poseIndex];
  string $lastPoseName = extractPoseName($pose);
  // print("lastPoseName:" + $lastPoseName + "\n");
  string $result = `promptDialog
      -b "OK" -db "OK"
      -b "Cancel"-cb "Cancel"
      -m "Enter Pose Name:"
      -t "Pose Name"
      -tx $lastPoseName`;
  // print("result:" + $result + "\n");
  if ($result != "OK") return;

  string $newPoseName = `promptDialog -q -tx`;
  // print("newPoseName:" + $newPoseName + "\n");

  if (!isValidPoseName($newPoseName)) {
    confirmDialog
        -b "OK"
        -m "* More than one character required.\n* Do not contain \"@\".\n* Unique name required."
        -t "Invalid Pose Name";
    return;
  }

  $pose = `substitute "^[^@]+@" $pose ($newPoseName + "@")`;
  // print("pose:" + $pose + "\n");

  $nkCopyPosePoses[$poseIndex] = $pose;
  refreshPoseList();
  poseListSelectItem($selectedIndices[0]);
}
/*-
@returns <>
*/
proc moveUpPose() {
  // print("moveUpPose()\n");
  global string $nkCopyPosePoses[];
  int $selectedIndices[] = poseListGetSelectedIndices();
  if (`size $selectedIndices` == 1 && $selectedIndices[0] > 1) {
    int $selectedIndex = $selectedIndices[0];
    // print("selectedIndex:" + $selectedIndex + "\n");
    int $poseIndex = $selectedIndex - 1;
    // print("poseIndex:" + $poseIndex + "\n");
    string $selectedPose = $nkCopyPosePoses[$poseIndex];
    stringArrayRemoveAtIndex($poseIndex, $nkCopyPosePoses);
    stringArrayInsertAtIndex($poseIndex - 1, $nkCopyPosePoses, $selectedPose);
    refreshPoseList();
    poseListSelectItem($poseIndex);
  }
}
/*-
@returns <>
*/
proc moveDownPose() {
  // print("moveDownPose()\n");
  global string $nkCopyPosePoses[];
  int $selectedIndices[] = poseListGetSelectedIndices();
  if (`size $selectedIndices` == 1
      && $selectedIndices[0] < `size $nkCopyPosePoses`) {
    int $selectedIndex = $selectedIndices[0];
    // print("selectedIndex:" + $selectedIndex + "\n");
    int $poseIndex = $selectedIndex - 1;
    // print("poseIndex:" + $poseIndex + "\n");
    string $selectedPose = $nkCopyPosePoses[$poseIndex];
    stringArrayRemoveAtIndex($poseIndex, $nkCopyPosePoses);
    stringArrayInsertAtIndex($poseIndex + 1, $nkCopyPosePoses, $selectedPose);
    refreshPoseList();
    poseListSelectItem($poseIndex + 2);
  }
}
/*-
@returns <>
*/
proc sortPoses() {
  // print("sortPoses()\n");
  global string $nkCopyPosePoses[];
  $nkCopyPosePoses = `sort $nkCopyPosePoses`;
  refreshPoseList();
}
/*-
@param $isOpposite <boolean>
@returns <>
*/
proc selectNodes(int $isOpposite) {
  // print("selectNodes\n");
  // print("  isOpposite:" + $isOpposite + "\n");

  string $patternA = oppositePatternATextGetText();
  string $patternB = oppositePatternBTextGetText();
  // print("  patternA:" + $patternA + "\n");
  // print("  patternB:" + $patternB + "\n");

  string $pose = getSelectedPose();
  // print("  pose:" + $pose + "\n");
  if (`size $pose` == 0) return;

  string $poseValues[] = extractPoseValues($pose);
  // print("  poseValues:{\n    " + stringArrayToString($poseValues, ",\n    ") + "\n  }\n");
  if (`size $poseValues` == 0) return;

  string $targetNodes[];
  for ($poseValue in $poseValues) {
    string $targetNode = extractPoseNode($poseValue);
    if ($isOpposite) {
      if (`gmatch $targetNode ("*" + $patternA + "*")`) {
        $targetNode = substituteAllString($targetNode, $patternA, $patternB);
      }
      else if (`gmatch $targetNode ("*" + $patternB + "*")`) {
        $targetNode = substituteAllString($targetNode, $patternB, $patternA);
      }
    }
    // print("targetNode:" + $targetNode + "\n");
    if (`objExists $targetNode`) {
      $targetNodes[`size $targetNodes`] = $targetNode;
    }
  }
  // print("targetNodes:\n  " + stringArrayToString($targetNodes, "\n  ") + "\n");
  if (`size $targetNodes` == 0) return;

  int $modState = `getModifiers`;
  // print("modState:" + $modState + "\n");
  switch ($modState) {
    // Nothing
    case 0: select -r $targetNodes; break;
    // Shift
    case 1: select -tgl $targetNodes; break;
    // Ctrl
    case 4: select -d $targetNodes; break;
    // Shift + Ctrl
    case 5: select -add $targetNodes; break;
    default: break;
  }
}
/*-
@param $pose <string>
@param $isOpposite <boolean>
@param $pasteAttributes <int[]>
@param $mirrorAxis <int>
@param $primaryAxis <int>
@param $secondaryAxis <int>
@param $invertAxis <int[]>
@returns <>
*/
proc applyPose(
  string $pose,
  int $isOpposite,
  int $pasteAttributes[],
  int $mirrorAxis,
  int $primaryAxis,
  int $secondaryAxis,
  int $invertAxis[]
) {
  // print("applyPose\n");
  // print("  pose           :" + $pose + "\n");
  // print("  isOpposite     :" + $isOpposite + "\n");
  // print("  pasteAttributes:{" + intArrayToString($pasteAttributes, ", ") + "}\n");
  // print("  mirrorAxis     :" + $mirrorAxis + "\n");
  // print("  primaryAxis    :" + $primaryAxis + "\n");
  // print("  secondaryAxis  :" + $secondaryAxis + "\n");
  // print("  invertAxis     :{" + intArrayToString($invertAxis, ", ") + "}\n");

  if (`size $pose` == 0) return;

  string $nodes[] = getSelectedNodes();
  // print("  nodes:{\n    " + (stringArrayToString($nodes, "\n    ")) + "\n  }\n");
  int $numNodes = `size $nodes`;
  if ($numNodes == 0) return;

  string $poseValues[] = extractPoseValues($pose);
  // print("  poseValues:{\n    " + stringArrayToString($poseValues, ",\n    ") + "\n  }\n");
  int $numPoseValues = `size $poseValues`;
  if ($numPoseValues == 0) return;

  int $numTargets = `min $numNodes $numPoseValues`;
  // print("  numTargets:" + $numTargets + "\n");

  for ($i = 0; $i < $numTargets; $i++) {
    string $poseValue = $poseValues[$i];
    float $matrix[] = extractPoseMatrix($poseValue);
    string $sourceNode = extractPoseNode($poseValue);
    string $targetNode = $nodes[$i];
    // print("  sourceNode:" + $sourceNode + "\n");
    // print("  targetNode:" + $targetNode + "\n");
    if ($isOpposite) {
      string $sourceParent = getParentNode($sourceNode);
      string $targetParent = getParentNode($targetNode);
      // print("  sourceParent:" + $sourceParent + "\n");
      // print("  targetParent:" + $targetParent + "\n");
      int $isRoot = $sourceParent == $targetParent;
      // print("  isRoot:" + $isRoot + "\n");
      $matrix = mirrorTransform(
        $targetNode,
        $matrix,
        $isRoot,
        $mirrorAxis,
        $primaryAxis,
        $secondaryAxis,
        $invertAxis[0],
        $invertAxis[1]
      );
    }
    else {
      $matrix = asIsTransform($targetNode, $matrix);
    }
    // print("poseValue:" + $poseValue + "\n");
    // print("  sourceNode:" + $sourceNode + "\n");
    // print("  targetNode:" + $targetNode + "\n");
    // print("  matrix:{" + floatArrayToString($matrix, ", ") + "}\n");

    setTransformAttributes(
      $targetNode,
      $matrix,
      $pasteAttributes[0],
      $pasteAttributes[1],
      $pasteAttributes[2]
    );
  }
}
/*-
@param $isOpposite <boolean>
@returns <>
*/
proc pastePose(int $isOpposite) {
  // print("pastePose\n");
  string $pose = getSelectedPose();
  if (`size $pose` == 0) return;
  int $pasteAttributes[] = pasteAttributesCheckBoxGetValues();
  int $mirrorAxis = mirrorAxisRadioButtonGetSelect() - 1;
  int $primaryAxis = primaryAxisRadioButtonGetSelect() - 1;
  int $secondaryAxis = secondaryAxisRadioButtonGetSelect() - 1;
  int $invertAxis[] = invertAxisCheckBoxGetValues();
  // print("  pose           :" + $pose + "\n");
  // print("  isOpposite     :" + $isOpposite + "\n");
  // print("  pasteAttributes:{" + intArrayToString($pasteAttributes, ", ") + "}\n");
  // print("  mirrorAxis     :" + $mirrorAxis + "\n");
  // print("  primaryAxis    :" + $primaryAxis + "\n");
  // print("  secondaryAxis  :" + $secondaryAxis + "\n");
  // print("  invertAxis     :{" + intArrayToString($invertAxis, ", ") + "}\n");
  applyPose(
    $pose,
    $isOpposite,
    $pasteAttributes,
    $mirrorAxis,
    $primaryAxis,
    $secondaryAxis,
    $invertAxis
  );
}

// -----------------------------------------------------------------------------
// UI定義
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc buildMainWindow() {
  if (`window -ex nkCopyPoseWindow` == true) {
    deleteUI nkCopyPoseWindow;
  }

  string $addIcon = "item_add.png";
  string $removeIcon = "item_delete.png";
  string $updateIcon = "refresh.png";
  string $renameIcon = "quickRename.png";
  string $moveUpIcon = "item_up.png";
  string $moveDownIcon = "item_down.png";
  string $sortIcon = "sortName.png";

  string $window = `window -t ("nkCopyPose " + (nkCopyPoseVersion()))
      -mxb false
      -mnb false
      -s true
      nkCopyPoseWindow`;

  string $outerForm = `formLayout
      -w 261
      outerForm`;
    string $listButtonsRow = `rowLayout
        // -bgc 0.5 0.25 0.25
        -nc 8
        -adj 1
        listButtonsRow`;
      separator -st "none" -vis false;
      string $addPoseButton = `iconTextButton
          // -bgc 0.25 0.5 0.5
          -ann "Add Pose"
          -i $addIcon
          -w 23
          addPoseButton`;
      string $removePoseButton = `iconTextButton
          // -bgc 0.25 0.5 0.5
          -ann "Remove Pose"
          -i $removeIcon
          -w 23
          removePoseButton`;
      string $updatePoseButton = `iconTextButton
          // -bgc 0.25 0.5 0.5
          -ann "Update Selected Pose"
          -i $updateIcon
          -w 23
          updatePoseButton`;
      string $renamePoseButton = `iconTextButton
          // -bgc 0.25 0.5 0.5
          -ann "Rename Selected Pose"
          -i $renameIcon
          -w 23
          renamePoseButton`;
      string $moveUpPoseButton = `iconTextButton
          // -bgc 0.25 0.5 0.5
          -ann "Move Up Selected Pose"
          -i $moveUpIcon
          -w 23
          moveUpPoseButton`;
      string $moveDownPoseButton = `iconTextButton
          // -bgc 0.25 0.5 0.5
          -ann "Move Down Selected Pose"
          -i $moveDownIcon
          -w 23
          moveDownPoseButton`;
      string $sortPoseButton = `iconTextButton
          // -bgc 0.25 0.5 0.5
          -ann "Sort Poses"
          -i $sortIcon
          -w 23
          sortPoseButton`;
    setParent ..;

    string $poseList = `textScrollList -ams false poseList`;

    string $framesColumn = `columnLayout
        -adj true
        // -rs 5
        framesColumn`;
      string $selectFrame = `frameLayout
          -l "Select"
          -bgs true
          -cll true
          -cl false
          -mw 3
          selectFrame`;
        string $selectButtonsForm = `formLayout selectButtonsForm`;
          string $oppositePatternAText = `textFieldGrp
              -adj 2
              -cw2 12 10
              -l "A:"
              -tx "_L"
              oppositePatternAText`;
          string $oppositePatternBText = `textFieldGrp
              -adj 2
              -cw2 12 10
              -l "B:"
              -tx "_R"
              oppositePatternBText`;
          string $selectSourceButton = `button
              -h 26
              -l "Source"
              selectSourceButton`;
          string $selectOppositeButton = `button
              -h 26
              -l "Opposite"
              selectOppositeButton`;
        setParent ..;
      setParent ..;

      string $pasteFrame = `frameLayout
          -l "Paste"
          -bgs true
          -cll true
          -cl false
          -mw 3
          pasteFrame`;
        string $pasteColumn = `columnLayout
            -adj true
            // -rs 5
            pasteColumn`;
          string $pasteAttributesCheckBox = `checkBoxGrp
              -cw4 80 60 60 60
              -ncb 3
              -l "Attributes:"
              -la3 "T" "R" "S"
              -va3 true true false
              pasteAttributesCheckBox`;
          string $pasteButtonsForm = `formLayout pasteButtonsForm`;
            string $pasteSourceButton = `button
                -h 26
                -l "As Is"
                pasteSourceButton`;
            string $pasteOppositeButton = `button
                -h 26
                -l "Mirror"
                pasteOppositeButton`;
          setParent ..;
        setParent ..;
      setParent ..;

      string $mirrorSettingsFrame = `frameLayout
          -l "Mirror Settings"
          -bgs true
          -cll true
          -cl false
          -mw 3
          mirrorSettingsFrame`;
        string $mirrorSettingsColumn = `columnLayout
            -adj true
            // -rs 5
            mirrorSettingsColumn`;
          string $mirrorAxisRadioButton = `radioButtonGrp
              // -bgc 0.25 0.25 0.5
              -cw4 80 60 60 60
              -nrb 3
              -l "Mirror Axis:"
              -la3 "X" "Y" "Z"
              -sl 1
              mirrorAxisRadioButton`;
          string $primaryAxisRadioButton = `radioButtonGrp
              // -bgc 0.25 0.25 0.5
              -cw4 80 60 60 60
              -nrb 3
              -l "Primary Axis:"
              -la3 "X" "Y" "Z"
              -sl 1
              primaryAxisRadioButton`;
          string $secondaryAxisRadioButton = `radioButtonGrp
              // -bgc 0.25 0.25 0.5
              -cw4 80 60 60 60
              -nrb 3
              -l "Secondary Axis:"
              -la3 "X" "Y" "Z"
              -sl 2
              secondaryAxisRadioButton`;
          string $invertAxisCheckBox = `checkBoxGrp
              -cw3 80 60 60
              -ncb 2
              -l "Invert Axis:"
              -la2 "Primary" "Secondary"
              -va2 false false
              invertAxisCheckBox`;
        setParent ..;
      setParent ..;
    setParent ..;
  setParent ..;

  formLayout -e
      -af $listButtonsRow "top" 5
      -af $listButtonsRow "left" 5
      -af $listButtonsRow "right" 5
      -ac $poseList "top" 5 $listButtonsRow
      -af $poseList "left" 5
      -af $poseList "right" 5
      -ac $poseList "bottom" 5 $framesColumn
      -af $framesColumn "left" 5
      -af $framesColumn "right" 5
      -af $framesColumn "bottom" 5
      $outerForm;

  formLayout -e
      -af $pasteSourceButton "top" 3
      -af $pasteSourceButton "left" 0
      -ap $pasteSourceButton "right" 1 50
      -af $pasteOppositeButton "top" 3
      -ap $pasteOppositeButton "left" 1 50
      -af $pasteOppositeButton "right" 0
      $pasteButtonsForm;

  formLayout -e
      -af $oppositePatternAText "top" 3
      -af $oppositePatternAText "left" 0
      -ap $oppositePatternAText "right" 0 50
      -af $oppositePatternBText "top" 3
      -ap $oppositePatternBText "left" 0 50
      -af $oppositePatternBText "right" 0
      -ac $selectSourceButton "top" 3 $oppositePatternAText
      -af $selectSourceButton "left" 0
      -ap $selectSourceButton "right" 1 50
      -ac $selectOppositeButton "top" 3 $oppositePatternBText
      -ap $selectOppositeButton "left" 1 50
      -af $selectOppositeButton "right" 0
      $selectButtonsForm;

  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"c\", \"addPoseButton\");" $addPoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"c\", \"removePoseButton\");" $removePoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"c\", \"updatePoseButton\");" $updatePoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"c\", \"renamePoseButton\");" $renamePoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"c\", \"moveUpPoseButton\");" $moveUpPoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"c\", \"moveDownPoseButton\");" $moveDownPoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"c\", \"sortPoseButton\");" $sortPoseButton;
  button -e -c "nkCopyPoseInvokeEvent(\"c\", \"selectSourceButton\");" $selectSourceButton;
  button -e -c "nkCopyPoseInvokeEvent(\"c\", \"selectOppositeButton\");" $selectOppositeButton;
  button -e -c "nkCopyPoseInvokeEvent(\"c\", \"pasteSourceButton\");" $pasteSourceButton;
  button -e -c "nkCopyPoseInvokeEvent(\"c\", \"pasteOppositeButton\");" $pasteOppositeButton;
  // radioButtonGrp -e -ofc "nkCopyPoseInvokeEvent(\"ofc\", \"primaryAxisRadioButton\");" $primaryAxisRadioButton;
  radioButtonGrp -e -onc "nkCopyPoseInvokeEvent(\"onc\", \"primaryAxisRadioButton\");" $primaryAxisRadioButton;
  // radioButtonGrp -e -ofc "nkCopyPoseInvokeEvent(\"ofc\", \"secondaryAxisRadioButton\");" $secondaryAxisRadioButton;
  radioButtonGrp -e -onc "nkCopyPoseInvokeEvent(\"onc\", \"secondaryAxisRadioButton\");" $secondaryAxisRadioButton;

  // print `format -s $window "// ^1s\n"`;
  // print `format -s $listButtonsRow "// ^1s\n"`;
  // print `format -s $addPoseButton "// ^1s\n"`;
  // print `format -s $removePoseButton "// ^1s\n"`;
  // print `format -s $updatePoseButton "// ^1s\n"`;
  // print `format -s $renamePoseButton "// ^1s\n"`;
  // print `format -s $moveUpPoseButton "// ^1s\n"`;
  // print `format -s $moveDownPoseButton "// ^1s\n"`;
  // print `format -s $sortPoseButton "// ^1s\n"`;
  // print `format -s $poseList "// ^1s\n"`;
  // print `format -s $framesColumn "// ^1s\n"`;
  // print `format -s $selectFrame "// ^1s\n"`;
  // print `format -s $selectButtonsForm "// ^1s\n"`;
  // print `format -s $oppositePatternAText "// ^1s\n"`;
  // print `format -s $oppositePatternBText "// ^1s\n"`;
  // print `format -s $selectSourceButton "// ^1s\n"`;
  // print `format -s $selectOppositeButton "// ^1s\n"`;
  // print `format -s $pasteFrame "// ^1s\n"`;
  // print `format -s $pasteColumn "// ^1s\n"`;
  // print `format -s $pasteAttributesCheckBox "// ^1s\n"`;
  // print `format -s $pasteButtonsForm "// ^1s\n"`;
  // print `format -s $pasteSourceButton "// ^1s\n"`;
  // print `format -s $pasteOppositeButton "// ^1s\n"`;
  // print `format -s $mirrorSettingsFrame "// ^1s\n"`;
  // print `format -s $mirrorSettingsColumn "// ^1s\n"`;
  // print `format -s $mirrorAxisRadioButton "// ^1s\n"`;
  // print `format -s $primaryAxisRadioButton "// ^1s\n"`;
  // print `format -s $secondaryAxisRadioButton "// ^1s\n"`;
  // print `format -s $invertAxisCheckBox "// ^1s\n"`;

  refreshPoseList();

  setFocus $window;
  showWindow $window;
}

// -----------------------------------------------------------------------------
// 初期化
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
// proc registerScriptJob() {
// }
/*-
@returns <>
*/
proc initialize() {
  buildMainWindow();
  // registerScriptJob();
}

// -----------------------------------------------------------------------------
// グローバル
// -----------------------------------------------------------------------------
/*-
@param $event <string>
@param $control <string>
@returns <>
*/
global proc nkCopyPoseInvokeEvent(string $event, string $control) {
  switch ($event) {
    case "c":
      switch ($control) {
        case "addPoseButton": addPose(false); break;
        case "removePoseButton": removePose(); break;
        case "updatePoseButton": updatePose(); break;
        case "renamePoseButton": renamePose(); break;
        case "moveUpPoseButton": moveUpPose(); break;
        case "moveDownPoseButton": moveDownPose(); break;
        case "sortPoseButton": sortPoses(); break;
        case "selectSourceButton": selectNodes(false); break;
        case "selectOppositeButton": selectNodes(true); break;
        case "pasteSourceButton": pastePose(false); break;
        case "pasteOppositeButton": pastePose(true); break;
        default: break;
      }
      break;
    case "cc":
      switch ($control) {
        default: break;
      }
      break;
    case "ec":
      switch ($control) {
        default: break;
      }
      break;
    // case "ofc":
    //   switch ($control) {
    //     case "primaryAxisRadioButton": print "primaryAxisRadioButton-Off\n"; break;
    //     case "secondaryAxisRadioButton": print "secondaryAxisRadioButton-Off\n"; break;
    //     default: break;
    //   }
    //   break;
    case "onc":
      switch ($control) {
        case "primaryAxisRadioButton": primaryAxisRadioButtonChanged(); break;
        case "secondaryAxisRadioButton": secondaryAxisRadioButtonChanged(); break;
        default: break;
      }
      break;
    case "pmc":
      switch ($control) {
        default: break;
      }
      break;
    default: break;
  }
}
/*-
@returns <string>
*/
global proc string nkCopyPoseVersion() {
  return "2.0.0";
}
/*-
@returns <>
*/
global proc nkCopyPose() {
  initialize();
}

/*
eval ("source \"" + `getenv "MAYA_APP_DIR"` + "/library/nkCopyPose/nkCopyPose.mel\"");
nkCopyPose();
*/
