/*! © 2023 imaoki | MIT License | https://github.com/imaoki */
/*-
@var <string[]>
```mel
{
  "pose1[0,0,1,0,0]|a1=0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1;|a1|a2=...",
  "pose2[2,0,1,0,0]|b1=0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1;|b1|b2=...",
  "..."
}
```
@remarks
```ebnf
        poses = "{" , { '"' , pose , '"' , "," } , "}" ;
         pose = pose_name , "[" , pose_settings , "]" , pose_values ;
    pose_name = { any_char - ( "[" | "]" ) } ;
pose_settings = axis , axis, axis, bool , bool ;
         axis = ? 0-2 ? ;
         bool = ? 0-1 ? ;
  pose_values = { node_path , "=" , pose_matrix , ";" }+ ;
    node_path = [ "|" ] , node_name , { "|" , node_name } ;
    node_name = ( letter | "_" ) , { alphanumeric | "_" } ;
  pose_matrix = t , "," , r , "," , s , "," , h , "," , q ;
            t = number , "," , number , "," , number ;
            r = number , "," , number , "," , number ;
            s = number , "," , number , "," , number ;
            h = number , "," , number , "," , number ;
            q = number , "," , number , "," , number , "," , number ;
       number = [ "-" ] , ( integer | real ) ;
 alphanumeric = letter | digit ;
        digit = ? 0-9 ? ;
       letter = ? a-zA-Z ? ;
     any_char = ? Any visible characters ? ;
```
*/
global string $nkCopyPosePoses[];
/*-
@var <string[]> `layoutDialog`のコントロール配列。
*/
global string $nkCopyPosePromptControls[];
/*-
@var <string> `layoutDialog`用のポーズ名バッファ。
*/
global string $nkCopyPosePromptPoseName;
/*-
@var <int[]> `layoutDialog`用のポーズ設定バッファ。
*/
global int $nkCopyPosePromptPoseSettings[];

// -----------------------------------------------------------------------------
// UIコントロール関連
// -----------------------------------------------------------------------------
/*-
@param $item <string>
@returns <>
*/
proc poseListAppend(string $item) {
  textScrollList -e -a $item "nkCopyPoseWindow|outerForm|poseList";
}

/*-
@returns <>
*/
proc poseListRemoveAll() {
  textScrollList -e -ra "nkCopyPoseWindow|outerForm|poseList";
}

/*-
@param $index <int>
@returns <>
*/
proc poseListSelectItem(int $index) {
  textScrollList -e -sii $index "nkCopyPoseWindow|outerForm|poseList";
}

/*-
@returns <int[]>
*/
proc int[] poseListGetSelectedIndices() {
  return `textScrollList -q -sii "nkCopyPoseWindow|outerForm|poseList"`;
}

/*-
@returns <string>
*/
proc string oppositePatternATextGetText() {
  return `textFieldGrp -q -tx "nkCopyPoseWindow|outerForm|framesColumn|selectFrame|selectColumn|selectTextForm|oppositePatternAText"`;
}

/*-
@returns <string>
*/
proc string oppositePatternBTextGetText() {
  return `textFieldGrp -q -tx "nkCopyPoseWindow|outerForm|framesColumn|selectFrame|selectColumn|selectTextForm|oppositePatternBText"`;
}
/*-
@returns <int[]>
*/
proc int[] pasteAttributesCheckBoxGetValues() {
  return `checkBoxGrp -q -va3 "nkCopyPoseWindow|outerForm|framesColumn|pasteFrame|pasteColumn|pasteAttributesCheckBox"`;
}

/*-
@param $v1 <boolean>
@param $v2 <boolean>
@param $v3 <boolean>
@returns <>
*/
proc pasteAttributesCheckBoxSetValues(int $v1, int $v2, int $v3) {
  checkBoxGrp -e -va3 $v1 $v2 $v3 "nkCopyPoseWindow|outerForm|framesColumn|pasteFrame|pasteColumn|pasteAttributesCheckBox";
}

/*-
@returns <string>
*/
proc string poseNameTextGetText() {
  global string $nkCopyPosePromptControls[];
  return `textFieldGrp -q -tx $nkCopyPosePromptControls[0]`;
}

/*-
@param $text <string>
@returns <>
*/
proc poseNameTextSetText(string $text) {
  global string $nkCopyPosePromptControls[];
  textFieldGrp -e -tx $text $nkCopyPosePromptControls[0];
}

/*-
@returns <int>
*/
proc int mirrorAxisRadioButtonGetSelect() {
  global string $nkCopyPosePromptControls[];
  return `radioButtonGrp -q -sl $nkCopyPosePromptControls[1]`;
}

/*-
@param $index <int>
@returns <>
*/
proc mirrorAxisRadioButtonSetSelect(int $index) {
  global string $nkCopyPosePromptControls[];
  radioButtonGrp -e -sl $index $nkCopyPosePromptControls[1];
}

/*-
@returns <int>
*/
proc int primaryAxisRadioButtonGetSelect() {
  global string $nkCopyPosePromptControls[];
  return `radioButtonGrp -q -sl $nkCopyPosePromptControls[2]`;
}

/*-
@param $index <int>
@returns <>
*/
proc primaryAxisRadioButtonSetSelect(int $index) {
  global string $nkCopyPosePromptControls[];
  radioButtonGrp -e -sl $index $nkCopyPosePromptControls[2];
}

/*-
@returns <int>
*/
proc int secondaryAxisRadioButtonGetSelect() {
  global string $nkCopyPosePromptControls[];
  return `radioButtonGrp -q -sl $nkCopyPosePromptControls[3]`;
}

/*-
@param $index <int>
@returns <>
*/
proc secondaryAxisRadioButtonSetSelect(int $index) {
  global string $nkCopyPosePromptControls[];
  radioButtonGrp -e -sl $index $nkCopyPosePromptControls[3];
}

/*-
@returns <int[]>
*/
proc int[] invertAxisCheckBoxGetValues() {
  global string $nkCopyPosePromptControls[];
  return `checkBoxGrp -q -va2 $nkCopyPosePromptControls[4]`;
}

/*-
@param $v1 <boolean>
@param $v2 <boolean>
@returns <>
*/
proc invertAxisCheckBoxSetValues(int $v1, int $v2) {
  global string $nkCopyPosePromptControls[];
  checkBoxGrp -e -va2 $v1 $v2 $nkCopyPosePromptControls[4];
}

/*-
@returns <>
*/
proc primaryAxisRadioButtonChanged() {
  int $primaryAxis = primaryAxisRadioButtonGetSelect();
  int $secondaryAxis = secondaryAxisRadioButtonGetSelect();
  if ($primaryAxis == $secondaryAxis) {
    $secondaryAxis = $primaryAxis + 1;
  }
  if ($secondaryAxis > 3) {
    $secondaryAxis = 1;
  }
  secondaryAxisRadioButtonSetSelect($secondaryAxis);
}

/*-
@returns <>
*/
proc secondaryAxisRadioButtonChanged() {
  int $primaryAxis = primaryAxisRadioButtonGetSelect();
  int $secondaryAxis = secondaryAxisRadioButtonGetSelect();
  if ($primaryAxis == $secondaryAxis) {
    $primaryAxis = $secondaryAxis - 1;
  }
  if ($primaryAxis < 1) {
    $primaryAxis = 3;
  }
  primaryAxisRadioButtonSetSelect($primaryAxis);
}

// -----------------------------------------------------------------------------
// クォータニオン
// -----------------------------------------------------------------------------
/*-
@param $degree <float>
@param $axis <float[]>
@returns <float[]>
@remarks https://github.com/mrdoob/three.js/blob/dev/LICENSE
*/
proc float[] angleAxisToQuat(float $degree, float $axis[]) {
  float $ha = `deg_to_rad $degree` * 0.5;
  float $s = sin($ha);
  float $qx = $axis[0] * $s;
  float $qy = $axis[1] * $s;
  float $qz = $axis[2] * $s;
  float $qw = cos($ha);
  return {$qx, $qy, $qz, $qw};
}

/*-
@param $order <int>
@returns <int>
*/
proc int reverseRotateOrder(int $order) {
  int $reverseOrder[] = {5, 3, 4, 1, 2, 0};
  return $reverseOrder[$order];
}

/*-
@param $r <float[]>
@param $order <int>
@returns <float[]>
@remarks https://github.com/mrdoob/three.js/blob/dev/LICENSE
*/
proc float[] eulerToQuat(float $r[], int $order) {
  float $qx = 0.0;
  float $qy = 0.0;
  float $qz = 0.0;
  float $qw = 1.0;
  float $rx = `deg_to_rad $r[0]`;
  float $ry = `deg_to_rad $r[1]`;
  float $rz = `deg_to_rad $r[2]`;
  float $cx = cos(0.5 * $rx);
  float $cy = cos(0.5 * $ry);
  float $cz = cos(0.5 * $rz);
  float $sx = sin(0.5 * $rx);
  float $sy = sin(0.5 * $ry);
  float $sz = sin(0.5 * $rz);
  switch ($order) {
    // XYZ
    case 0:
      $qx = $sx * $cy * $cz + $cx * $sy * $sz;
      $qy = $cx * $sy * $cz - $sx * $cy * $sz;
      $qz = $cx * $cy * $sz + $sx * $sy * $cz;
      $qw = $cx * $cy * $cz - $sx * $sy * $sz;
      break;
    // YZX
    case 1:
      $qx = $sx * $cy * $cz + $cx * $sy * $sz;
      $qy = $cx * $sy * $cz + $sx * $cy * $sz;
      $qz = $cx * $cy * $sz - $sx * $sy * $cz;
      $qw = $cx * $cy * $cz - $sx * $sy * $sz;
      break;
    // ZXY
    case 2:
      $qx = $sx * $cy * $cz - $cx * $sy * $sz;
      $qy = $cx * $sy * $cz + $sx * $cy * $sz;
      $qz = $cx * $cy * $sz + $sx * $sy * $cz;
      $qw = $cx * $cy * $cz - $sx * $sy * $sz;
      break;
    // XZY
    case 3:
      $qx = $sx * $cy * $cz - $cx * $sy * $sz;
      $qy = $cx * $sy * $cz - $sx * $cy * $sz;
      $qz = $cx * $cy * $sz + $sx * $sy * $cz;
      $qw = $cx * $cy * $cz + $sx * $sy * $sz;
      break;
    // YXZ
    case 4:
      $qx = $sx * $cy * $cz + $cx * $sy * $sz;
      $qy = $cx * $sy * $cz - $sx * $cy * $sz;
      $qz = $cx * $cy * $sz - $sx * $sy * $cz;
      $qw = $cx * $cy * $cz + $sx * $sy * $sz;
      break;
    // ZYX
    case 5:
      $qx = $sx * $cy * $cz - $cx * $sy * $sz;
      $qy = $cx * $sy * $cz + $sx * $cy * $sz;
      $qz = $cx * $cy * $sz - $sx * $sy * $cz;
      $qw = $cx * $cy * $cz + $sx * $sy * $sz;
      break;
    default: break;
  }
  return {$qx, $qy, $qz, $qw};
}

/*-
@param $q <float[]>
@param $order <int>
@returns <float[]>
@remarks https://github.com/aadebdeb/MatrixQuaternionEulerAngleConversions
*/
proc float[] quatToEuler(float $q[], int $order) {
  float $rx = 0.0;
  float $ry = 0.0;
  float $rz = 0.0;
  float $qx = $q[0];
  float $qy = $q[1];
  float $qz = $q[2];
  float $qw = $q[3];
  float $sx;
  float $sy;
  float $sz;
  int $unlocked;
  switch ($order) {
    // XYZ
    case 0:
      $sy = 2 * $qx * $qz + 2 * $qy * $qw;
      $unlocked = abs($sy) < 0.9999999;
      $rx = $unlocked ? atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1)
          : atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1);
      $ry = asin($sy);
      $rz = $unlocked ? atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1) : 0;
      break;
    // YZX
    case 1:
      $sz = 2 * $qx * $qy + 2 * $qz * $qw;
      $unlocked = abs($sz) < 0.9999999;
      $rx = $unlocked ? atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1) : 0;
      $ry = $unlocked ? atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1)
          : atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1);
      $rz = asin($sz);
      break;
    // ZXY
    case 2:
      $sx = 2 * $qy * $qz + 2 * $qx * $qw;
      $unlocked = abs($sx) < 0.9999999;
      $rx = asin($sx);
      $ry = $unlocked ? atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1) : 0;
      $rz = $unlocked ? atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1)
          : atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1);
      break;
    // XZY
    case 3:
      $sz = -(2 * $qx * $qy - 2 * $qz * $qw);
      $unlocked = abs($sz) < 0.9999999;
      $rx = $unlocked ? atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1)
          : atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1);
      $ry = $unlocked ? atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1) : 0;
      $rz = asin($sz);
      break;
    // YXZ
    case 4:
      $sx = -(2 * $qy * $qz - 2 * $qx * $qw);
      $unlocked = abs($sx) < 0.9999999;
      $rx = asin($sx);
      $ry = $unlocked ? atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1)
          : atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1);
      $rz = $unlocked ? atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1) : 0;
      break;
    // ZYX
    case 5:
      $sy = -(2 * $qx * $qz - 2 * $qy * $qw);
      $unlocked = abs($sy) < 0.9999999;
      $rx = $unlocked ? atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1) : 0;
      $ry = asin($sy);
      $rz = $unlocked ? atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1)
          : atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1);
      break;
    default: break;
  }
  $rx = `rad_to_deg $rx`;
  $ry = `rad_to_deg $ry`;
  $rz = `rad_to_deg $rz`;
  return {$rx, $ry, $rz};
}

/*-
@param $q1 <float[]>
@param $q2 <float[]>
@returns <float[]>
*/
proc float[] quatAdd(float $q1[], float $q2[]) {
  float $q1x = $q1[0];
  float $q1y = $q1[1];
  float $q1z = $q1[2];
  float $q1w = $q1[3];
  float $q2x = $q2[0];
  float $q2y = $q2[1];
  float $q2z = $q2[2];
  float $q2w = $q2[3];
  float $qx = $q1x + $q2x;
  float $qy = $q1y + $q2y;
  float $qz = $q1z + $q2z;
  float $qw = $q1w + $q2w;
  return {$qx, $qy, $qz, $qw};
}

/*-
@param $q1 <float[]>
@param $q2 <float[]>
@returns <float[]>
*/
proc float[] quatSubtract(float $q1[], float $q2[]) {
  float $q1x = $q1[0];
  float $q1y = $q1[1];
  float $q1z = $q1[2];
  float $q1w = $q1[3];
  float $q2x = $q2[0];
  float $q2y = $q2[1];
  float $q2z = $q2[2];
  float $q2w = $q2[3];
  float $qx = $q1x - $q2x;
  float $qy = $q1y - $q2y;
  float $qz = $q1z - $q2z;
  float $qw = $q1w - $q2w;
  return {$qx, $qy, $qz, $qw};
}

/*-
@param $q1 <float[]>
@param $q2 <float[]>
@returns <float[]>
@remarks https://github.com/mrdoob/three.js/blob/dev/LICENSE
*/
proc float[] quatMultiply(float $q1[], float $q2[]) {
  float $q1x = $q1[0];
  float $q1y = $q1[1];
  float $q1z = $q1[2];
  float $q1w = $q1[3];
  float $q2x = $q2[0];
  float $q2y = $q2[1];
  float $q2z = $q2[2];
  float $q2w = $q2[3];
  float $qx = $q1x * $q2w + $q1w * $q2x + $q1y * $q2z - $q1z * $q2y;
  float $qy = $q1y * $q2w + $q1w * $q2y + $q1z * $q2x - $q1x * $q2z;
  float $qz = $q1z * $q2w + $q1w * $q2z + $q1x * $q2y - $q1y * $q2x;
  float $qw = $q1w * $q2w - $q1x * $q2x - $q1y * $q2y - $q1z * $q2z;
  return {$qx, $qy, $qz, $qw};
}

/*-
@param $q <float[]>
@returns <float[]>
*/
proc float[] quatInverse(float $q[]) {
  return {$q[0] * -1, $q[1] * -1, $q[2] * -1, $q[3]};
}

/*-
@param $v <float[]>
@param $q <float[]>
@returns <float[]>
*/
proc float[] rotateVectorByQuat(float $v[], float $q[]) {
  float $iq[] = quatInverse($q);
  float $vq[] = {$v[0], $v[1], $v[2], 0};
  $vq = quatMultiply(quatMultiply($q, $vq), $iq);
  return {$vq[0], $vq[1], $vq[2]};
}

/*-
@param $q <float[]>
@param $axis <float[]>
@returns <float[]>
*/
proc float[] quatFlip(float $q[], float $axis[]) {
  float $flipQ[] = angleAxisToQuat(180.0, $axis);
  return quatMultiply($flipQ, $q);
}

// -----------------------------------------------------------------------------
// ノード関連
// -----------------------------------------------------------------------------
/*-
@returns <string[]>
*/
proc string[] getSelectedNodes() {
  return `ls -l -sl -typ "joint" -typ "transform"`;
}

/*-
@param $n <string>
@returns <string>
*/
proc string getParentNode(string $n) {
  string $parent;
  string $parents[] = `listRelatives -f -p $n`;
  if (`size $parents` > 0) $parent = $parents[0];
  return $parent;
}

// -----------------------------------------------------------------------------
// トランスフォーム関連
// -----------------------------------------------------------------------------
/*-
@param $nodes <string[]>
@returns <string[]>
*/
proc string[] getTransformAttributes(string $nodes[]) {
  print("getTransformAttributes\n");
  print("  nodes:{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n");
  string $matrices[];
  for ($n in $nodes) {
    string $type = `nodeType $n`;
    if ($type == "transform" || $type == "joint") {
      float $t[] = `getAttr ($n + ".translate")`;
      float $r[] = `getAttr ($n + ".rotate")`;
      float $s[] = `getAttr ($n + ".scale")`;
      float $h[] = `getAttr ($n + ".shear")`;
      print("  t :{" + floatArrayToString($t, ", ") + "}\n");
      print("  r :{" + floatArrayToString($r, ", ") + "}\n");
      print("  s :{" + floatArrayToString($s, ", ") + "}\n");
      print("  h :{" + floatArrayToString($h, ", ") + "}\n");

      int $o = `getAttr ($n + ".rotateOrder")`;
      $o = reverseRotateOrder($o);
      int $oXYZ = reverseRotateOrder(0);

      float $rq[] = eulerToQuat($r, $o);

      float $ra[] = `getAttr ($n + ".rotateAxis")`;
      $ra = eulerToQuat($ra, $oXYZ);

      float $jo[] = {0, 0, 0, 1};
      if (`attributeQuery -n $n -ex "jointOrient"`) {
        $jo = `getAttr ($n + ".jointOrient")`;
        $jo = eulerToQuat($jo, $oXYZ);
      }

      float $q[] = quatMultiply($jo, quatMultiply($ra, $rq));

      print("  o :" + $o + "\n");
      print("  rq:{" + floatArrayToString($rq, ", ") + "}\n");
      print("  ra:{" + floatArrayToString($ra, ", ") + "}\n");
      print("  jo:{" + floatArrayToString($jo, ", ") + "}\n");
      print("  q :{" + floatArrayToString($q, ", ") + "}\n");

      int $i = `size $matrices`;
      $matrices[$i] = floatArrayToString($t, ",");
      $matrices[$i] = $matrices[$i] + "," + (floatArrayToString($r, ","));
      $matrices[$i] = $matrices[$i] + "," + (floatArrayToString($s, ","));
      $matrices[$i] = $matrices[$i] + "," + (floatArrayToString($h, ","));
      $matrices[$i] = $matrices[$i] + "," + (floatArrayToString($q, ","));
    }
  }
  return $matrices;
}

/*-
@param $n <string>
@param $m <float[]>
@param $shouldSetT <int>
@param $shouldSetR <int>
@param $shouldSetS <int>
@returns <>
*/
proc setTransformAttributes(
  string $n,
  float $m[],
  int $shouldSetT,
  int $shouldSetR,
  int $shouldSetS
) {
  print("setTransformAttributes\n");
  print("  n         :" + $n + "\n");
  print("  m         :{" + floatArrayToString($m, ", ") + "}\n");
  print("  shouldSetT:" + $shouldSetT + "\n");
  print("  shouldSetR:" + $shouldSetR + "\n");
  print("  shouldSetS:" + $shouldSetS + "\n");
  if (`objExists $n` && `size $m` == 16) {
    float $t[] = {$m[0], $m[1], $m[2]};
    float $r[] = {$m[3], $m[4], $m[5]};
    float $s[] = {$m[6], $m[7], $m[8]};
    float $h[] = {$m[9], $m[10], $m[11]};
    float $q[] = {$m[12], $m[13], $m[14], $m[15]};
    print("  t:{" + floatArrayToString($t, ", ") + "}\n");
    print("  r:{" + floatArrayToString($r, ", ") + "}\n");
    print("  s:{" + floatArrayToString($s, ", ") + "}\n");
    print("  h:{" + floatArrayToString($h, ", ") + "}\n");
    print("  q:{" + floatArrayToString($q, ", ") + "}\n");

    string $tx = $n + ".tx";
    string $ty = $n + ".ty";
    string $tz = $n + ".tz";
    string $rx = $n + ".rx";
    string $ry = $n + ".ry";
    string $rz = $n + ".rz";
    string $sx = $n + ".sx";
    string $sy = $n + ".sy";
    string $sz = $n + ".sz";

    if ($shouldSetT) {
      if (!`getAttr -l $tx`) setAttr $tx $t[0];
      if (!`getAttr -l $ty`) setAttr $ty $t[1];
      if (!`getAttr -l $tz`) setAttr $tz $t[2];
    }
    if ($shouldSetR) {
      if (!`getAttr -l $rx`) setAttr $rx $r[0];
      if (!`getAttr -l $ry`) setAttr $ry $r[1];
      if (!`getAttr -l $rz`) setAttr $rz $r[2];
    }
    if ($shouldSetS) {
      if (!`getAttr -l $sx`) setAttr $sx $s[0];
      if (!`getAttr -l $sy`) setAttr $sy $s[1];
      if (!`getAttr -l $sz`) setAttr $sz $s[2];
    }
  }
}

/*-
@param $n <string>
@param $m <float[]>
@returns <float[]>
*/
proc float[] asIsTransform(string $n, float $m[]) {
  print("asIsTransform\n");
  print("  n :" + $n + "\n");
  print("  m :{" + floatArrayToString($m, ", ") + "}\n");

  float $t[] = {$m[0], $m[1], $m[2]};
  float $s[] = {$m[6], $m[7], $m[8]};
  float $h[] = {$m[9], $m[10], $m[11]};
  float $q[] = {$m[12], $m[13], $m[14], $m[15]};
  print("  t :{" + floatArrayToString($t, ", ") + "}\n");
  print("  s :{" + floatArrayToString($s, ", ") + "}\n");
  print("  h :{" + floatArrayToString($h, ", ") + "}\n");
  print("  q :{" + floatArrayToString($q, ", ") + "}\n");

  int $o = `getAttr ($n + ".rotateOrder")`;
  $o = reverseRotateOrder($o);
  int $oXYZ = reverseRotateOrder(0);

  float $ra[] = `getAttr ($n + ".rotateAxis")`;
  $ra = quatInverse(eulerToQuat($ra, $oXYZ));

  float $jo[] = {0, 0, 0, 1};
  if (`attributeQuery -n $n -ex "jointOrient"`) {
    $jo = `getAttr ($n + ".jointOrient")`;
    $jo = quatInverse(eulerToQuat($jo, $oXYZ));
  }

  float $rq[] = quatMultiply($jo, quatMultiply($ra, $q));
  float $r[] = quatToEuler($rq, $o);

  print("  o :" + $o + "\n");
  print("  q :{" + floatArrayToString($q, ", ") + "}\n");
  print("  ra:{" + floatArrayToString($ra, ", ") + "}\n");
  print("  jo:{" + floatArrayToString($jo, ", ") + "}\n");
  print("  rq:{" + floatArrayToString($rq, ", ") + "}\n");
  print("  r :{" + floatArrayToString($r, ", ") + "}\n");

  float $newMatrix[] = {
    $t[0], $t[1], $t[2],
    $r[0], $r[1], $r[2],
    $s[0], $s[1], $s[2],
    $h[0], $h[1], $h[2],
    $q[0], $q[1], $q[2], $q[3]
  };
  print("  newMatrix:{" + floatArrayToString($newMatrix, ", ") + "}\n");

  return $newMatrix;
}

/*-
@param $n <string>
@param $m <float[]>
@param $isRoot <boolean>
@param $mirrorAxis <int>
@param $primaryAxis <int>
@param $secondaryAxis <int>
@param $invertPrimaryAxis <boolean>
@param $invertSecondaryAxis <boolean>
@returns <float[]>
*/
proc float[] mirrorTransform(
  string $n,
  float $m[],
  int $isRoot,
  int $mirrorAxis,
  int $primaryAxis,
  int $secondaryAxis,
  int $invertPrimaryAxis,
  int $invertSecondaryAxis
) {
  print("mirrorTransform\n");
  print("  n                  :" + $n + "\n");
  print("  m                  :{" + floatArrayToString($m, ", ") + "}\n");
  print("  isRoot             :" + $isRoot + "\n");
  print("  mirrorAxis         :" + $mirrorAxis + "\n");
  print("  primaryAxis        :" + $primaryAxis + "\n");
  print("  secondaryAxis      :" + $secondaryAxis + "\n");
  print("  invertPrimaryAxis  :" + $invertPrimaryAxis + "\n");
  print("  invertSecondaryAxis:" + $invertSecondaryAxis + "\n");

  float $t[] = {$m[0], $m[1], $m[2]};
  float $s[] = {$m[6], $m[7], $m[8]};
  float $h[] = {$m[9], $m[10], $m[11]};
  float $q[] = {$m[12], $m[13], $m[14], $m[15]};
  print("  t :{" + floatArrayToString($t, ", ") + "}\n");
  print("  s :{" + floatArrayToString($s, ", ") + "}\n");
  print("  h :{" + floatArrayToString($h, ", ") + "}\n");
  print("  q :{" + floatArrayToString($q, ", ") + "}\n");

  // 位置のミラーリング
  if ($isRoot) {
    $t[$mirrorAxis] *= -1;
  }
  else {
    if ($invertPrimaryAxis) $t[$primaryAxis] *= -1;
    if ($invertSecondaryAxis) $t[$secondaryAxis] *= -1;
    if ($invertPrimaryAxis == $invertSecondaryAxis) {
      int $usedAxis[];
      $usedAxis[$primaryAxis] = 1;
      $usedAxis[$secondaryAxis] = 1;
      int $i;
      for ($i = 0; $i < 3; $i++) if (!$usedAxis[$i]) break;
      $t[$i] *= -1;
    }
  }

  // 回転のミラーリング
  int $o = `getAttr ($n + ".rotateOrder")`;
  $o = reverseRotateOrder($o);
  int $oXYZ = reverseRotateOrder(0);

  float $ra[] = `getAttr ($n + ".rotateAxis")`;
  $ra = quatInverse(eulerToQuat($ra, $oXYZ));

  float $jo[] = {0, 0, 0, 1};
  if (`attributeQuery -n $n -ex "jointOrient"`) {
    $jo = `getAttr ($n + ".jointOrient")`;
    $jo = quatInverse(eulerToQuat($jo, $oXYZ));
  }

  float $mq[] = $q;
  $mq[$mirrorAxis] *= -1;
  $mq[3] *= -1;
  float $cq[] = quatMultiply($jo, quatMultiply($ra, $mq));

  print("  o :" + $o + "\n");
  print("  q :{" + floatArrayToString($q, ", ") + "}\n");
  print("  ra:{" + floatArrayToString($ra, ", ") + "}\n");
  print("  jo:{" + floatArrayToString($jo, ", ") + "}\n");
  print("  mq:{" + floatArrayToString($mq, ", ") + "}\n");

  // ルート以外は親ノードの反転をリセットしておく
  if (!$isRoot) {
    if ($mirrorAxis == $primaryAxis || $mirrorAxis == $secondaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      if ($mirrorAxis == $primaryAxis) {
        $flipAxis[$secondaryAxis] = 1;
      }
      else if ($mirrorAxis == $secondaryAxis) {
        $flipAxis[$primaryAxis] = 1;
      }
      $cq = quatFlip($cq, $flipAxis);
    }
    if ($invertPrimaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      $flipAxis[$secondaryAxis] = 1;
      $cq = quatFlip($cq, $flipAxis);
    }
    if ($invertSecondaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      $flipAxis[$primaryAxis] = 1;
      $cq = quatFlip($cq, $flipAxis);
    }
  }

  // プライマリとセカンダリを対象化するための反転
  if ($mirrorAxis == $primaryAxis || $mirrorAxis == $secondaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    if ($mirrorAxis == $primaryAxis) {
      $flipAxis[$secondaryAxis] = 1;
    }
    else if ($mirrorAxis == $secondaryAxis) {
      $flipAxis[$primaryAxis] = 1;
    }
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }

  // 任意の反転
  if ($invertPrimaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    $flipAxis[$secondaryAxis] = 1;
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }
  if ($invertSecondaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    $flipAxis[$primaryAxis] = 1;
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }

  float $r[] = quatToEuler($cq, $o);
  print("  cq:{" + floatArrayToString($cq, ", ") + "}\n");
  print("  r :{" + floatArrayToString($r, ", ") + "}\n");

  float $newMatrix[] = {
    $t[0], $t[1], $t[2],
    $r[0], $r[1], $r[2],
    $s[0], $s[1], $s[2],
    $h[0], $h[1], $h[2],
    $q[0], $q[1], $q[2], $q[3]
  };
  print("  newMatrix:{" + floatArrayToString($newMatrix, ", ") + "}\n");

  return $newMatrix;
}

// -----------------------------------------------------------------------------
// データ変換
// -----------------------------------------------------------------------------
/*-
@param $poseName <string>
@param $poseSettings <int[]>
@param $nodes <string[]>
@param $matrices <string[]>
@returns <string>
*/
proc string buildPose(
  string $poseName,
  int $poseSettings[],
  string $nodes[],
  string $matrices[]
) {
  int $numNodes = `size $nodes`;
  string $pose = $poseName;
  $pose += "[" + intArrayToString($poseSettings, ",") + "]";
  for ($i = 0; $i < $numNodes; $i++) {
    $pose += $nodes[$i] + "=" + $matrices[$i];
    if ($i < $numNodes - 1) {
      $pose += ";";
    }
  }
  return $pose;
}

/*-
@param $pose <string>
@returns <string>
*/
proc string extractPoseName(string $pose) {
  string $poseName;
  string $buffer[];
  if (`tokenize $pose "[" $buffer` == 2) {
    $poseName = $buffer[0];
  }
  return $poseName;
}

/*-
@param $pose <string>
@returns <int[]>
*/
proc int[] extractPoseSettings(string $pose) {
  int $poseSettings[] = {0, 0, 1, 0, 0};
  string $buffer1[];
  if (`tokenize $pose "]" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[0] "[" $buffer2` == 2) {
      string $buffer3[];
      if (`tokenize $buffer2[1] "," $buffer3` == 5) {
        for ($i = 0; $i < 5; $i++) {
          $poseSettings[$i] = (int) $buffer3[$i];
        }
      }
    }
  }
  return $poseSettings;
}

/*-
@param $pose <string>
@returns <string[]>
*/
proc string[] extractPoseValues(string $pose) {
  string $poseValues[];
  string $buffer1[];
  if (`tokenize $pose "]" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[1] ";" $buffer2` > 0) {
      $poseValues = $buffer2;
    }
  }
  return $poseValues;
}

/*-
@param $poseValue <string>
@returns <string>
*/
proc string extractPoseNode(string $poseValue) {
  string $poseNode;
  string $buffer[];
  if (`tokenize $poseValue "=" $buffer` == 2) {
    $poseNode = $buffer[0];
  }
  return $poseNode;
}

/*-
@param $poseValue <string>
@returns <float[]>
*/
proc float[] extractPoseMatrix(string $poseValue) {
  float $poseMatrix[];
  string $buffer1[];
  if (`tokenize $poseValue "=" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[1] "," $buffer2` == 16) {
      for ($i = 0; $i < 16; $i++) {
        $poseMatrix[$i] = (float) $buffer2[$i];
      }
    }
  }
  return $poseMatrix;
}

// -----------------------------------------------------------------------------
// ポーズ関連
// -----------------------------------------------------------------------------
/*-
@param $i <int>
@returns <string>
*/
proc string getPose(int $i) {
  global string $nkCopyPosePoses[];
  string $pose;
  if ($i >= 0 && $i < `size $nkCopyPosePoses`) {
    $pose = $nkCopyPosePoses[$i];
  }
  return $pose;
}

/*-
@returns <string>
*/
proc string getSelectedPose() {
  global string $nkCopyPosePoses[];
  string $selectedPose;
  int $selectedIndices[] = poseListGetSelectedIndices();
  if (`size $selectedIndices` == 1) {
    $selectedPose = getPose($selectedIndices[0] - 1);
  }
  return $selectedPose;
}

/*-
@returns <string[]>
*/
proc string[] getPoseNames() {
  global string $nkCopyPosePoses[];
  string $poseNames[];
  for ($pose in $nkCopyPosePoses) {
    $poseNames[`size $poseNames`] = extractPoseName($pose);
  }
  return $poseNames;
}

/*-
@returns <string[]>
*/
proc string[] getPoseMirrorSettingLabels() {
  global string $nkCopyPosePoses[];
  string $axisLabels[] = {"X", "Y", "Z"};
  string $invertLabels[] = {"+", "-"};
  string $mirrorSettingLabels[];
  for ($pose in $nkCopyPosePoses) {
    int $ms[] = extractPoseSettings($pose);
    string $label = $axisLabels[$ms[0]];
    $label += $invertLabels[$ms[3]] +$axisLabels[$ms[1]];
    $label += $invertLabels[$ms[4]] +$axisLabels[$ms[2]];
    $mirrorSettingLabels[`size $mirrorSettingLabels`] = $label;
  }
  return $mirrorSettingLabels;
}

/*-
@param $n <string>
@returns <string>
*/
proc string createUniquePoseName(string $n) {
  string $buffer[];
  tokenize $n "|" $buffer;
  string $baseName = $buffer[`size $buffer` - 1] + "@" + `currentTime -q`;
  string $poseNames[] = getPoseNames();
  int $number = 1;
  string $poseName = $baseName + "_" + $number;
  int $index = stringArrayFind($poseName, 0, $poseNames);
  while ($index >= 0) {
    $number += 1;
    $poseName = $baseName + "_" + $number;
    $index = stringArrayFind($poseName, 0, $poseNames);
  }
  return $poseName;
}

/*-
@param $poseName <string>
@returns <string>
*/
proc string sanitizePoseName(string $poseName) {
  $poseName = substituteAllString($poseName, "[", "_");
  $poseName = substituteAllString($poseName, "]", "_");
  return $poseName;
}

/*-
@returns <>
*/
proc refreshPoseList() {
  int $selectedIndices[] = poseListGetSelectedIndices();
  int $selectedIndex = 0;
  if (`size $selectedIndices` == 1) $selectedIndex = $selectedIndices[0];
  poseListRemoveAll();

  string $poseNames[] = getPoseNames();
  string $mirrorSettingLabels[] = getPoseMirrorSettingLabels();
  int $numPoseNames = `size $poseNames`;
  int $numMirrorSettingLabels = `size $mirrorSettingLabels`;
  int $numListItems = `min $numPoseNames $numMirrorSettingLabels`;
  for ($i = 0; $i < $numListItems; $i++) {
    poseListAppend("[" + $mirrorSettingLabels[$i] + "] " + $poseNames[$i]);
  }

  if ($numListItems > 0 && $selectedIndex > 0) {
    if ($selectedIndex > $numListItems) {
      $selectedIndex = $numListItems;
    }
    poseListSelectItem($selectedIndex);
  }
}

/*-
@returns <>
*/
proc addPose() {
  print("addPose\n");
  global string $nkCopyPosePoses[];
  global string $nkCopyPosePromptControls[];
  global string $nkCopyPosePromptPoseName;
  global int $nkCopyPosePromptPoseSettings[];

  string $nodes[] = getSelectedNodes();
  print("  nodes:{\n    " + (stringArrayToString($nodes, ",\n    ")) + "\n  }\n");
  if (`size $nodes` == 0) return;

  clear $nkCopyPosePromptControls;
  $nkCopyPosePromptPoseName = createUniquePoseName($nodes[0]);
  $nkCopyPosePromptPoseSettings = {0, 0, 1, 0, 0};

  string $result = `layoutDialog
      -p nkCopyPoseWindow
      -t "Add Pose"
      -ui "buildPromptWindow"`;

  print("  result:" + $result + "\n");
  print("    poseName           :" + $nkCopyPosePromptPoseName + "\n");
  print("    mirrorAxis         :" + $nkCopyPosePromptPoseSettings[0] + "\n");
  print("    primaryAxis        :" + $nkCopyPosePromptPoseSettings[1] + "\n");
  print("    secondaryAxis      :" + $nkCopyPosePromptPoseSettings[2] + "\n");
  print("    invertPrimaryAxis  :" + $nkCopyPosePromptPoseSettings[3] + "\n");
  print("    invertSecondaryAxis:" + $nkCopyPosePromptPoseSettings[4] + "\n");

  if ($result != "OK") return;

  string $matrices[] = getTransformAttributes($nodes);
  print("  matrices:{\n    " + (stringArrayToString($matrices, ",\n    ")) + "\n  }\n");

  string $pose = buildPose(
    $nkCopyPosePromptPoseName,
    $nkCopyPosePromptPoseSettings,
    $nodes,
    $matrices
  );
  print("  pose:" + $pose + "\n");

  $nkCopyPosePoses[`size $nkCopyPosePoses`] = $pose;
  refreshPoseList();
  poseListSelectItem(`size $nkCopyPosePoses`);
}

/*-
@returns <>
*/
proc deletePose() {
  global string $nkCopyPosePoses[];
  int $selectedIndices[] = poseListGetSelectedIndices();
  if (`size $selectedIndices` != 1) return;
  int $poseIndex = $selectedIndices[0] - 1;
  stringArrayRemoveAtIndex($poseIndex, $nkCopyPosePoses);
  refreshPoseList();
}

/*-
@returns <>
*/
proc updatePose() {
  print("updatePose\n");
  global string $nkCopyPosePoses[];
  int $selectedIndices[] = poseListGetSelectedIndices();
  if (`size $selectedIndices` != 1) return;

  int $poseIndex = $selectedIndices[0] - 1;
  print("  poseIndex:" + $poseIndex + "\n");
  string $pose = getPose($poseIndex);
  string $poseName = extractPoseName($pose);
  int $poseSettings[] = extractPoseSettings($pose);
  print("  poseName    :" + $poseName + "\n");
  print("  poseSettings:{" + intArrayToString($poseSettings, ", ") + "}\n");

  string $nodes[] = getSelectedNodes();
  print("  nodes:{\n    " + (stringArrayToString($nodes, ",\n    ")) + "\n  }\n");
  if (`size $nodes` == 0) return;

  string $matrices[] = getTransformAttributes($nodes);
  print("  matrices:{\n    " + (stringArrayToString($matrices, ",\n    ")) + "\n  }\n");

  string $newPose = buildPose($poseName, $poseSettings, $nodes, $matrices);
  print("  newPose:" + $newPose + "\n");

  $nkCopyPosePoses[$poseIndex] = $newPose;
  refreshPoseList();
  poseListSelectItem($selectedIndices[0]);
}

/*-
@returns <>
*/
proc editPose() {
  print("editPose\n");
  global string $nkCopyPosePoses[];
  global string $nkCopyPosePromptControls[];
  global string $nkCopyPosePromptPoseName;
  global int $nkCopyPosePromptPoseSettings[];

  int $selectedIndices[] = poseListGetSelectedIndices();
  if (`size $selectedIndices` != 1) return;

  int $poseIndex = $selectedIndices[0] - 1;
  print("  poseIndex:" + $poseIndex + "\n");
  string $pose = getPose($poseIndex);

  clear $nkCopyPosePromptControls;
  $nkCopyPosePromptPoseName = extractPoseName($pose);
  $nkCopyPosePromptPoseSettings = extractPoseSettings($pose);

  string $result = `layoutDialog
      -p nkCopyPoseWindow
      -t "Edit Pose"
      -ui "buildPromptWindow"`;

  print("  result:" + $result + "\n");
  print("    poseName           :" + $nkCopyPosePromptPoseName + "\n");
  print("    mirrorAxis         :" + $nkCopyPosePromptPoseSettings[0] + "\n");
  print("    primaryAxis        :" + $nkCopyPosePromptPoseSettings[1] + "\n");
  print("    secondaryAxis      :" + $nkCopyPosePromptPoseSettings[2] + "\n");
  print("    invertPrimaryAxis  :" + $nkCopyPosePromptPoseSettings[3] + "\n");
  print("    invertSecondaryAxis:" + $nkCopyPosePromptPoseSettings[4] + "\n");

  if ($result != "OK") return;

  string $header = $nkCopyPosePromptPoseName;
  $header += "[" + intArrayToString($nkCopyPosePromptPoseSettings, ",") + "]";
  string $newPose = `substitute "^[^\]]+\]" $pose $header`;
  print("  newPose:" + $newPose + "\n");

  $nkCopyPosePoses[$poseIndex] = $newPose;
  refreshPoseList();
  poseListSelectItem($selectedIndices[0]);
}

/*-
@returns <>
*/
proc moveUpPose() {
  global string $nkCopyPosePoses[];
  int $selectedIndices[] = poseListGetSelectedIndices();
  if (`size $selectedIndices` == 1 && $selectedIndices[0] > 1) {
    int $poseIndex = $selectedIndices[0] - 1;
    string $selectedPose = $nkCopyPosePoses[$poseIndex];
    stringArrayRemoveAtIndex($poseIndex, $nkCopyPosePoses);
    stringArrayInsertAtIndex($poseIndex - 1, $nkCopyPosePoses, $selectedPose);
    refreshPoseList();
    poseListSelectItem($poseIndex);
  }
}

/*-
@returns <>
*/
proc moveDownPose() {
  global string $nkCopyPosePoses[];
  int $selectedIndices[] = poseListGetSelectedIndices();
  if (`size $selectedIndices` == 1
      && $selectedIndices[0] < `size $nkCopyPosePoses`) {
    int $poseIndex = $selectedIndices[0] - 1;
    string $selectedPose = $nkCopyPosePoses[$poseIndex];
    stringArrayRemoveAtIndex($poseIndex, $nkCopyPosePoses);
    stringArrayInsertAtIndex($poseIndex + 1, $nkCopyPosePoses, $selectedPose);
    refreshPoseList();
    poseListSelectItem($poseIndex + 2);
  }
}

/*-
@returns <>
*/
proc sortPoses() {
  global string $nkCopyPosePoses[];
  $nkCopyPosePoses = `sort $nkCopyPosePoses`;
  refreshPoseList();
}

/*-
@param $isOpposite <boolean>
@returns <>
*/
proc selectNodes(int $isOpposite) {
  print("selectNodes\n");
  print("  isOpposite:" + $isOpposite + "\n");

  string $patternA = oppositePatternATextGetText();
  string $patternB = oppositePatternBTextGetText();
  print("  patternA:" + $patternA + "\n");
  print("  patternB:" + $patternB + "\n");

  string $pose = getSelectedPose();
  print("  pose:" + $pose + "\n");
  if (`size $pose` == 0) return;

  string $poseValues[] = extractPoseValues($pose);
  print("  poseValues:{\n    " + stringArrayToString($poseValues, ",\n    ") + "\n  }\n");
  if (`size $poseValues` == 0) return;

  string $targetNodes[];
  for ($poseValue in $poseValues) {
    string $targetNode = extractPoseNode($poseValue);
    if ($isOpposite) {
      if (`gmatch $targetNode ("*" + $patternA + "*")`) {
        $targetNode = substituteAllString($targetNode, $patternA, $patternB);
      }
      else if (`gmatch $targetNode ("*" + $patternB + "*")`) {
        $targetNode = substituteAllString($targetNode, $patternB, $patternA);
      }
    }
    if (`objExists $targetNode`) {
      $targetNodes[`size $targetNodes`] = $targetNode;
    }
  }
  print("  targetNodes:{\n    " + stringArrayToString($targetNodes, "\n    ") + "\n  }\n");
  if (`size $targetNodes` == 0) return;

  int $modState = `getModifiers`;
  print("  modState:" + $modState + "\n");
  switch ($modState) {
    // Nothing
    case 0: select -r $targetNodes; break;
    // Shift
    case 1: select -tgl $targetNodes; break;
    // Ctrl
    case 4: select -d $targetNodes; break;
    // Shift + Ctrl
    case 5: select -add $targetNodes; break;
    default: break;
  }
}

/*-
@param $isOpposite <boolean>
@returns <>
*/
proc pastePose(int $isOpposite) {
  print("pastePose\n");
  print("  isOpposite:" + $isOpposite + "\n");
  int $pasteAttributes[] = pasteAttributesCheckBoxGetValues();
  string $pose = getSelectedPose();
  if (`size $pose` == 0) return;
  int $poseSettings[] = extractPoseSettings($pose);
  int $mirrorAxis = $poseSettings[0];
  int $primaryAxis = $poseSettings[1];
  int $secondaryAxis = $poseSettings[2];
  int $invertAxis[] = {$poseSettings[3], $poseSettings[4]};
  print("  pasteAttributes:{" + intArrayToString($pasteAttributes, ", ") + "}\n");
  print("  pose           :" + $pose + "\n");
  print("  mirrorAxis     :" + $mirrorAxis + "\n");
  print("  primaryAxis    :" + $primaryAxis + "\n");
  print("  secondaryAxis  :" + $secondaryAxis + "\n");
  print("  invertAxis     :{" + intArrayToString($invertAxis, ", ") + "}\n");

  string $nodes[] = getSelectedNodes();
  print("  nodes:{\n    " + (stringArrayToString($nodes, "\n    ")) + "\n  }\n");
  int $numNodes = `size $nodes`;
  if ($numNodes == 0) return;

  string $poseValues[] = extractPoseValues($pose);
  print("  poseValues:{\n    " + stringArrayToString($poseValues, ",\n    ") + "\n  }\n");
  int $numPoseValues = `size $poseValues`;
  if ($numPoseValues == 0) return;

  int $numTargets = `min $numNodes $numPoseValues`;
  print("  numTargets:" + $numTargets + "\n");

  for ($i = 0; $i < $numTargets; $i++) {
    string $poseValue = $poseValues[$i];
    float $matrix[] = extractPoseMatrix($poseValue);
    string $sourceNode = extractPoseNode($poseValue);
    string $targetNode = $nodes[$i];
    if ($isOpposite) {
      string $sourceParent = getParentNode($sourceNode);
      string $targetParent = getParentNode($targetNode);
      int $isRoot = $sourceParent == $targetParent;
      $matrix = mirrorTransform(
        $targetNode,
        $matrix,
        $isRoot,
        $mirrorAxis,
        $primaryAxis,
        $secondaryAxis,
        $invertAxis[0],
        $invertAxis[1]
      );
    }
    else {
      $matrix = asIsTransform($targetNode, $matrix);
    }

    setTransformAttributes(
      $targetNode,
      $matrix,
      $pasteAttributes[0],
      $pasteAttributes[1],
      $pasteAttributes[2]
    );
  }
}

// -----------------------------------------------------------------------------
// UI定義
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc poseNameTextChanged() {
  poseNameTextSetText(sanitizePoseName(poseNameTextGetText()));
}

/*-
@returns <>
*/
proc okButtonPressed() {
  global string $nkCopyPosePromptPoseName;
  global int $nkCopyPosePromptPoseSettings[];
  string $newPoseName = sanitizePoseName(poseNameTextGetText());
  if (`size $newPoseName`) {
    $nkCopyPosePromptPoseName = $newPoseName;
  }
  $nkCopyPosePromptPoseSettings[0] = mirrorAxisRadioButtonGetSelect() - 1;
  $nkCopyPosePromptPoseSettings[1] = primaryAxisRadioButtonGetSelect() - 1;
  $nkCopyPosePromptPoseSettings[2] = secondaryAxisRadioButtonGetSelect() - 1;
  int $invertAxisValues[] = invertAxisCheckBoxGetValues();
  $nkCopyPosePromptPoseSettings[3] = $invertAxisValues[0];
  $nkCopyPosePromptPoseSettings[4] = $invertAxisValues[1];
  layoutDialog -dis "OK";
}

/*-
@returns <>
*/
proc cancelButtonPressed() {
  layoutDialog -dis "Cancel";
}

/*-
@returns <>
*/
global proc buildPromptWindow() {
  global string $nkCopyPosePromptControls[];
  global string $nkCopyPosePromptPoseName;
  global int $nkCopyPosePromptPoseSettings[];

  string $form = `setParent -q`;
    string $column = `columnLayout
        -adj true
        -rs 3
        column`;
      string $poseNameText = `textFieldGrp
          -adj 2
          -cw2 60 10
          -l "Pose Name:"
          -tx $nkCopyPosePromptPoseName
          poseNameText`;
      string $mirrorAxisRadioButton = `radioButtonGrp
          // -bgc 0.25 0.25 0.5
          -cw4 80 60 60 60
          -nrb 3
          -l "Mirror Axis:"
          -la3 "X" "Y" "Z"
          -sl ($nkCopyPosePromptPoseSettings[0] + 1)
          mirrorAxisRadioButton`;
      string $primaryAxisRadioButton = `radioButtonGrp
          // -bgc 0.25 0.25 0.5
          -cw4 80 60 60 60
          -nrb 3
          -l "Primary Axis:"
          -la3 "X" "Y" "Z"
          -sl ($nkCopyPosePromptPoseSettings[1] + 1)
          primaryAxisRadioButton`;
      string $secondaryAxisRadioButton = `radioButtonGrp
          // -bgc 0.25 0.25 0.5
          -cw4 80 60 60 60
          -nrb 3
          -l "Secondary Axis:"
          -la3 "X" "Y" "Z"
          -sl ($nkCopyPosePromptPoseSettings[2] + 1)
          secondaryAxisRadioButton`;
      string $invertAxisCheckBox = `checkBoxGrp
          -cw3 80 60 60
          -ncb 2
          -l "Invert Axis:"
          -la2 "Primary" "Secondary"
          -va2
              $nkCopyPosePromptPoseSettings[3]
              $nkCopyPosePromptPoseSettings[4]
          invertAxisCheckBox`;
    setParent ..;

    string $buttonsForm = `formLayout buttonsForm`;
      string $okButton = `button -h 26 -l "OK" okButton`;
      string $cancelButton = `button -h 26 -l "Cancel" cancelButton`;
    setParent ..;

  $nkCopyPosePromptControls = {
    $poseNameText,
    $mirrorAxisRadioButton,
    $primaryAxisRadioButton,
    $secondaryAxisRadioButton,
    $invertAxisCheckBox
  };

  formLayout -e
      -af $column "top" 5
      -af $column "left" 5
      -af $column "right" 5
      -af $buttonsForm "left" 5
      -af $buttonsForm "right" 5
      -af $buttonsForm "bottom" 5
      $form;

  formLayout -e
      -af $okButton "top" 5
      -af $okButton "left" 0
      -ap $okButton "right" 2 50
      -af $okButton "bottom" 0
      -af $cancelButton "top" 5
      -ap $cancelButton "left" 2 50
      -af $cancelButton "right" 0
      -af $cancelButton "bottom" 0
      $buttonsForm;

  textFieldGrp -e -tcc "nkCopyPoseInvokeEvent(\"tcc\", \"poseNameText\");" $poseNameText;
  button -e -c "nkCopyPoseInvokeEvent(\"c\", \"okButton\");" $okButton;
  button -e -c "nkCopyPoseInvokeEvent(\"c\", \"cancelButton\");" $cancelButton;
  radioButtonGrp -e -onc "nkCopyPoseInvokeEvent(\"onc\", \"primaryAxisRadioButton\");" $primaryAxisRadioButton;
  radioButtonGrp -e -onc "nkCopyPoseInvokeEvent(\"onc\", \"secondaryAxisRadioButton\");" $secondaryAxisRadioButton;

  // print("// " + $form + "\n");
  // print("// " + $column + "\n");
  // print("// " + $poseNameText + "\n");
  // print("// " + $mirrorAxisRadioButton + "\n");
  // print("// " + $primaryAxisRadioButton + "\n");
  // print("// " + $secondaryAxisRadioButton + "\n");
  // print("// " + $invertAxisCheckBox + "\n");
  // print("// " + $buttonsForm + "\n");
  // print("// " + $okButton + "\n");
  // print("// " + $cancelButton + "\n");
}

/*-
@returns <>
*/
proc buildMainWindow() {
  if (`window -ex nkCopyPoseWindow` == true) {
    deleteUI nkCopyPoseWindow;
  }

  string $addIcon = "item_add.png";
  string $deleteIcon = "item_delete.png";
  string $updateIcon = "refresh.png";
  string $editIcon = "passSetRelationEditor.png";
  string $moveUpIcon = "item_up.png";
  string $moveDownIcon = "item_down.png";
  string $sortIcon = "sortName.png";

  string $window = `window -t ("nkCopyPose " + (nkCopyPoseVersion()))
      -mxb false
      -mnb false
      -s true
      nkCopyPoseWindow`;

  string $outerForm = `formLayout outerForm`;
    string $listButtonsRow = `rowLayout
        // -bgc 0.5 0.25 0.25
        -nc 8
        -adj 1
        listButtonsRow`;
      separator -st "none" -vis false;
      string $addPoseButton = `iconTextButton
          // -bgc 0.25 0.5 0.5
          -ann "Add"
          -i $addIcon
          -w 23
          addPoseButton`;
      string $deletePoseButton = `iconTextButton
          // -bgc 0.25 0.5 0.5
          -ann "Delete"
          -i $deleteIcon
          -w 23
          deletePoseButton`;
      string $updatePoseButton = `iconTextButton
          // -bgc 0.25 0.5 0.5
          -ann "Update"
          -i $updateIcon
          -w 23
          updatePoseButton`;
      string $editPoseButton = `iconTextButton
          // -bgc 0.25 0.5 0.5
          -ann "Edit"
          -i $editIcon
          -w 23
          editPoseButton`;
      string $moveUpPoseButton = `iconTextButton
          // -bgc 0.25 0.5 0.5
          -ann "Move Up"
          -i $moveUpIcon
          -w 23
          moveUpPoseButton`;
      string $moveDownPoseButton = `iconTextButton
          // -bgc 0.25 0.5 0.5
          -ann "Move Down"
          -i $moveDownIcon
          -w 23
          moveDownPoseButton`;
      string $sortPoseButton = `iconTextButton
          // -bgc 0.25 0.5 0.5
          -ann "Sort"
          -i $sortIcon
          -w 23
          sortPoseButton`;
    setParent ..;

    string $poseList = `textScrollList -ams false poseList`;

    // string $poseTree = `treeView
    //     -adr true
    //     -ams false
    //     -arp false
    //     -enk true
    //     // -fb true
    //     -nb 3
    //     -p $outerForm
    //     poseTree`;

    // treeView -e -ai "aaa" "" $poseTree;
    // treeView -e -ai "bbb" "" $poseTree;
    // treeView -e -ai "ccc" "" $poseTree;
    // treeView -e -ai "ddd" "" $poseTree;
    // treeView -e -ai "eee" "" $poseTree;
    // treeView -e -ai "fff" "" $poseTree;

    // treeView -e -bh "aaa" true $poseTree;
    // treeView -e -or "bbb" 1 1 5 $poseTree;
    // treeView -e -bs "ccc" 2 "2StateButton" $poseTree;
    // treeView -e
    //     -btc "ddd" 1 0.5 0.25 0.25 -bto "ddd" 1 true
    //     -btc "ddd" 2 0.25 0.5 0.25 -bto "ddd" 2 true
    //     -btc "ddd" 3 0.25 0.25 0.5 -bto "ddd" 3 true
    //     $poseTree;
    // treeView -e
    //     -eb "eee" 1 false
    //     -ibc "eee" 2 false
    //     -ibc "eee" 3 true // 採用
    //     $poseTree;
    // treeView -e
    //     -i "ddd" 2 "openAttribute.png"
    //     -i "ddd" 3 "closeAttribute.png"
    //     $poseTree;
    // treeView -e
    //     -bti "fff" 1 "X"
    //     -bti "fff" 2 "-X"
    //     -bti "fff" 3 "+Y"
    //     $poseTree;
    // // treeView -e
    // //     -eb "fff" 1 false
    // //     -eb "fff" 2 false
    // //     -eb "fff" 3 false
    // //     $poseTree;
    // // treeView -e
    // //     -bs "fff" 1 "2StateButton"
    // //     -bs "fff" 2 "pushButton"
    // //     -bs "fff" 3 "pushButton"
    // //     $poseTree;
    // treeView -e -dls "fff" "(fff)" $poseTree;
    // treeView -e -dl "fff" "aaa" $poseTree;

    string $framesColumn = `columnLayout
        -adj true
        -rs 4
        framesColumn`;
      string $selectFrame = `frameLayout
          -l "Select"
          -bgs true
          -cll false
          -mh 7
          -mw 7
          selectFrame`;
        string $selectColumn = `columnLayout
            -adj true
            -rs 3
            selectColumn`;
          string $selectTextForm = `formLayout selectTextForm`;
            string $oppositePatternAText = `textFieldGrp
                -adj 2
                -cw2 23 10
                -l "A:"
                -tx "_L"
                oppositePatternAText`;
            string $oppositePatternBText = `textFieldGrp
                -adj 2
                -cw2 23 10
                -l "B:"
                -tx "_R"
                oppositePatternBText`;
          setParent ..;
          string $selectButtonForm = `formLayout selectButtonForm`;
            string $selectSourceButton = `button
                -h 26
                -l "Source"
                selectSourceButton`;
            string $selectOppositeButton = `button
                -h 26
                -l "Opposite"
                selectOppositeButton`;
          setParent ..;
        setParent ..;
      setParent ..;

      string $pasteFrame = `frameLayout
          -l "Paste"
          -bgs true
          -cll false
          -mh 7
          -mw 7
          pasteFrame`;
        string $pasteColumn = `columnLayout
            -adj true
            -rs 3
            pasteColumn`;
          string $pasteAttributesCheckBox = `checkBoxGrp
              -cw4 60 40 40 40
              -ncb 3
              -l "Attributes:"
              -la3 "T" "R" "S"
              -va3 true true false
              pasteAttributesCheckBox`;
          string $pasteButtonsForm = `formLayout pasteButtonsForm`;
            string $pasteSourceButton = `button
                -h 26
                -l "As Is"
                pasteSourceButton`;
            string $pasteOppositeButton = `button
                -h 26
                -l "Mirror"
                pasteOppositeButton`;
          setParent ..;
        setParent ..;
      setParent ..;
    setParent ..;
  setParent ..;

  formLayout -e
      -af $listButtonsRow "top" 5
      -af $listButtonsRow "left" 5
      -af $listButtonsRow "right" 5

      -ac $poseList "top" 5 $listButtonsRow
      -af $poseList "left" 5
      -af $poseList "right" 5
      -ac $poseList "bottom" 5 $framesColumn

      // -ap $poseList "bottom" 2 30
      // -ap $poseTree "top" 2 30
      // -af $poseTree "left" 5
      // -af $poseTree "right" 5
      // -ac $poseTree "bottom" 5 $framesColumn

      -af $framesColumn "left" 5
      -af $framesColumn "right" 5
      -af $framesColumn "bottom" 5
      $outerForm;

  formLayout -e
      -af $oppositePatternAText "top" 0
      -af $oppositePatternAText "left" 0
      -ap $oppositePatternAText "right" 0 50
      -af $oppositePatternBText "top" 0
      -ap $oppositePatternBText "left" 0 50
      -af $oppositePatternBText "right" 0
      $selectTextForm;

  formLayout -e
      -af $selectSourceButton "top" 0
      -af $selectSourceButton "left" 0
      -ap $selectSourceButton "right" 2 50
      -af $selectOppositeButton "top" 0
      -ap $selectOppositeButton "left" 2 50
      -af $selectOppositeButton "right" 0
      $selectButtonForm;

  formLayout -e
      -af $pasteSourceButton "top" 0
      -af $pasteSourceButton "left" 0
      -ap $pasteSourceButton "right" 2 50
      -af $pasteOppositeButton "top" 0
      -ap $pasteOppositeButton "left" 2 50
      -af $pasteOppositeButton "right" 0
      $pasteButtonsForm;

  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"c\", \"addPoseButton\");" $addPoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"c\", \"deletePoseButton\");" $deletePoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"c\", \"updatePoseButton\");" $updatePoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"c\", \"editPoseButton\");" $editPoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"c\", \"moveUpPoseButton\");" $moveUpPoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"c\", \"moveDownPoseButton\");" $moveDownPoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"c\", \"sortPoseButton\");" $sortPoseButton;
  button -e -c "nkCopyPoseInvokeEvent(\"c\", \"selectSourceButton\");" $selectSourceButton;
  button -e -c "nkCopyPoseInvokeEvent(\"c\", \"selectOppositeButton\");" $selectOppositeButton;
  button -e -c "nkCopyPoseInvokeEvent(\"c\", \"pasteSourceButton\");" $pasteSourceButton;
  button -e -c "nkCopyPoseInvokeEvent(\"c\", \"pasteOppositeButton\");" $pasteOppositeButton;

  // print("// " + $window + "\n");
  // print("// " + $listButtonsRow + "\n");
  // print("// " + $addPoseButton + "\n");
  // print("// " + $deletePoseButton + "\n");
  // print("// " + $updatePoseButton + "\n");
  // print("// " + $editPoseButton + "\n");
  // print("// " + $moveUpPoseButton + "\n");
  // print("// " + $moveDownPoseButton + "\n");
  // print("// " + $sortPoseButton + "\n");
  // print("// " + $poseList + "\n");
  // print("// " + $framesColumn + "\n");
  // print("// " + $selectFrame + "\n");
  // print("// " + $selectColumn + "\n");
  // print("// " + $selectTextForm + "\n");
  // print("// " + $oppositePatternAText + "\n");
  // print("// " + $oppositePatternBText + "\n");
  // print("// " + $selectButtonForm + "\n");
  // print("// " + $selectSourceButton + "\n");
  // print("// " + $selectOppositeButton + "\n");
  // print("// " + $pasteFrame + "\n");
  // print("// " + $pasteColumn + "\n");
  // print("// " + $pasteAttributesCheckBox + "\n");
  // print("// " + $pasteButtonsForm + "\n");
  // print("// " + $pasteSourceButton + "\n");
  // print("// " + $pasteOppositeButton + "\n");

  refreshPoseList();

  setFocus $window;
  showWindow $window;
}

// -----------------------------------------------------------------------------
// 初期化
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
// proc registerScriptJob() {
// }
/*-
@returns <>
*/
proc initialize() {
  buildMainWindow();
  // registerScriptJob();
}

// -----------------------------------------------------------------------------
// グローバル
// -----------------------------------------------------------------------------
/*-
@param $event <string>
@param $control <string>
@returns <>
*/
global proc nkCopyPoseInvokeEvent(string $event, string $control) {
  switch ($event) {
    case "c":
      switch ($control) {
        case "addPoseButton": addPose(); break;
        case "deletePoseButton": deletePose(); break;
        case "updatePoseButton": updatePose(); break;
        case "editPoseButton": editPose(); break;
        case "moveUpPoseButton": moveUpPose(); break;
        case "moveDownPoseButton": moveDownPose(); break;
        case "sortPoseButton": sortPoses(); break;
        case "selectSourceButton": selectNodes(false); break;
        case "selectOppositeButton": selectNodes(true); break;
        case "pasteSourceButton": pastePose(false); break;
        case "pasteOppositeButton": pastePose(true); break;
        case "okButton": okButtonPressed(); break;
        case "cancelButton": cancelButtonPressed(); break;
        default: break;
      }
      break;
    case "cc":
      switch ($control) {
        default: break;
      }
      break;
    case "ec":
      switch ($control) {
        default: break;
      }
      break;
    case "onc":
      switch ($control) {
        case "primaryAxisRadioButton": primaryAxisRadioButtonChanged(); break;
        case "secondaryAxisRadioButton": secondaryAxisRadioButtonChanged(); break;
        default: break;
      }
      break;
    case "pmc":
      switch ($control) {
        default: break;
      }
      break;
    case "tcc":
      switch ($control) {
        case "poseNameText": poseNameTextChanged(); break;
        default: break;
      }
      break;
    default: break;
  }
}

/*-
@returns <string>
*/
global proc string nkCopyPoseVersion() {
  return "2.2.0";
}

/*-
@returns <>
*/
global proc nkCopyPose() {
  initialize();
}

/*
eval ("source \"" + `getenv "MAYA_APP_DIR"` + "/library/nkCopyPose/nkCopyPose.mel\"");
nkCopyPose;
*/
