/*! © 2023 imaoki | MIT License | https://github.com/imaoki */

// /////////////////////////////////////////////////////////////////////////////
// 汎用プロシージャ
// /////////////////////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------------
// 文字列
// -----------------------------------------------------------------------------
/*-
@param $procName <string>
@returns <string>
*/
proc string getSourceFilename(string $procName) {
  string $filename;
  string $thisIs = `whatIs $procName`;
  string $regex1 = "^Mel procedure found in: *";
  string $regex2 = "^Script found in: *";
  if (`match $regex1 $thisIs` != "") {
    $filename = `substitute $regex1 $thisIs ""`;
  }
  else if (`match $regex2 $thisIs` != "") {
    $filename = `substitute $regex2 $thisIs ""`;
  }
  return $filename;
}

/*-
@param $procName <string>
@returns <string>
*/
proc string getSourceDirname(string $procName) {
  return dirname(getSourceFilename($procName));
}

// -----------------------------------------------------------------------------
// 配列
// -----------------------------------------------------------------------------
/*-
@param $a <float[]>
@param $b <float[]>
@returns <int>
*/
proc int minFloatArrayCount(float $a[], float $b[]) {
  int $numA = `size $a`;
  int $numB = `size $b`;
  return `min $numA $numB`;
}

/*-
@param $a <int[]>
@param $b <int[]>
@returns <int>
*/
proc int minIntArrayCount(int $a[], int $b[]) {
  int $numA = `size $a`;
  int $numB = `size $b`;
  return `min $numA $numB`;
}

/*-
@param $a <string[]>
@param $b <string[]>
@returns <int>
*/
proc int minStringArrayCount(string $a[], string $b[]) {
  int $numA = `size $a`;
  int $numB = `size $b`;
  return `min $numA $numB`;
}

// -----------------------------------------------------------------------------
// クォータニオン
// -----------------------------------------------------------------------------
/*-
@param $degree <float>
@param $axis <float[]>
@returns <float[]>
@remarks https://github.com/mrdoob/three.js/blob/dev/LICENSE
*/
proc float[] angleAxisToQuat(float $degree, float $axis[]) {
  float $ha = `deg_to_rad $degree` * 0.5;
  float $s = sin($ha);
  float $qx = $axis[0] * $s;
  float $qy = $axis[1] * $s;
  float $qz = $axis[2] * $s;
  float $qw = cos($ha);
  return {$qx, $qy, $qz, $qw};
}

/*-
@param $order <int>
@returns <int>
*/
proc int reverseRotateOrder(int $order) {
  int $reverseOrder[] = {5, 3, 4, 1, 2, 0};
  return $reverseOrder[$order];
}

/*-
@param $r <float[]>
@param $order <int>
@returns <float[]>
@remarks https://github.com/mrdoob/three.js/blob/dev/LICENSE
*/
proc float[] eulerToQuat(float $r[], int $order) {
  float $qx = 0.0;
  float $qy = 0.0;
  float $qz = 0.0;
  float $qw = 1.0;
  float $rx = `deg_to_rad $r[0]`;
  float $ry = `deg_to_rad $r[1]`;
  float $rz = `deg_to_rad $r[2]`;
  float $cx = cos(0.5 * $rx);
  float $cy = cos(0.5 * $ry);
  float $cz = cos(0.5 * $rz);
  float $sx = sin(0.5 * $rx);
  float $sy = sin(0.5 * $ry);
  float $sz = sin(0.5 * $rz);
  switch ($order) {
    // XYZ
    case 0:
      $qx = $sx * $cy * $cz + $cx * $sy * $sz;
      $qy = $cx * $sy * $cz - $sx * $cy * $sz;
      $qz = $cx * $cy * $sz + $sx * $sy * $cz;
      $qw = $cx * $cy * $cz - $sx * $sy * $sz;
      break;
    // YZX
    case 1:
      $qx = $sx * $cy * $cz + $cx * $sy * $sz;
      $qy = $cx * $sy * $cz + $sx * $cy * $sz;
      $qz = $cx * $cy * $sz - $sx * $sy * $cz;
      $qw = $cx * $cy * $cz - $sx * $sy * $sz;
      break;
    // ZXY
    case 2:
      $qx = $sx * $cy * $cz - $cx * $sy * $sz;
      $qy = $cx * $sy * $cz + $sx * $cy * $sz;
      $qz = $cx * $cy * $sz + $sx * $sy * $cz;
      $qw = $cx * $cy * $cz - $sx * $sy * $sz;
      break;
    // XZY
    case 3:
      $qx = $sx * $cy * $cz - $cx * $sy * $sz;
      $qy = $cx * $sy * $cz - $sx * $cy * $sz;
      $qz = $cx * $cy * $sz + $sx * $sy * $cz;
      $qw = $cx * $cy * $cz + $sx * $sy * $sz;
      break;
    // YXZ
    case 4:
      $qx = $sx * $cy * $cz + $cx * $sy * $sz;
      $qy = $cx * $sy * $cz - $sx * $cy * $sz;
      $qz = $cx * $cy * $sz - $sx * $sy * $cz;
      $qw = $cx * $cy * $cz + $sx * $sy * $sz;
      break;
    // ZYX
    case 5:
      $qx = $sx * $cy * $cz - $cx * $sy * $sz;
      $qy = $cx * $sy * $cz + $sx * $cy * $sz;
      $qz = $cx * $cy * $sz - $sx * $sy * $cz;
      $qw = $cx * $cy * $cz + $sx * $sy * $sz;
      break;
    default: break;
  }
  return {$qx, $qy, $qz, $qw};
}

/*-
@param $q <float[]>
@param $order <int>
@returns <float[]>
@remarks https://github.com/aadebdeb/MatrixQuaternionEulerAngleConversions
*/
proc float[] quatToEuler(float $q[], int $order) {
  float $rx = 0.0;
  float $ry = 0.0;
  float $rz = 0.0;
  float $qx = $q[0];
  float $qy = $q[1];
  float $qz = $q[2];
  float $qw = $q[3];
  float $sx;
  float $sy;
  float $sz;
  int $unlocked;
  switch ($order) {
    // XYZ
    case 0:
      $sy = 2 * $qx * $qz + 2 * $qy * $qw;
      $unlocked = abs($sy) < 0.9999999;
      $rx = $unlocked ? atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1)
          : atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1);
      $ry = asin($sy);
      $rz = $unlocked ? atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1) : 0;
      break;
    // YZX
    case 1:
      $sz = 2 * $qx * $qy + 2 * $qz * $qw;
      $unlocked = abs($sz) < 0.9999999;
      $rx = $unlocked ? atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1) : 0;
      $ry = $unlocked ? atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1)
          : atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1);
      $rz = asin($sz);
      break;
    // ZXY
    case 2:
      $sx = 2 * $qy * $qz + 2 * $qx * $qw;
      $unlocked = abs($sx) < 0.9999999;
      $rx = asin($sx);
      $ry = $unlocked ? atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1) : 0;
      $rz = $unlocked ? atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1)
          : atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1);
      break;
    // XZY
    case 3:
      $sz = -(2 * $qx * $qy - 2 * $qz * $qw);
      $unlocked = abs($sz) < 0.9999999;
      $rx = $unlocked ? atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1)
          : atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1);
      $ry = $unlocked ? atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1) : 0;
      $rz = asin($sz);
      break;
    // YXZ
    case 4:
      $sx = -(2 * $qy * $qz - 2 * $qx * $qw);
      $unlocked = abs($sx) < 0.9999999;
      $rx = asin($sx);
      $ry = $unlocked ? atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1)
          : atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1);
      $rz = $unlocked ? atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1) : 0;
      break;
    // ZYX
    case 5:
      $sy = -(2 * $qx * $qz - 2 * $qy * $qw);
      $unlocked = abs($sy) < 0.9999999;
      $rx = $unlocked ? atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1) : 0;
      $ry = asin($sy);
      $rz = $unlocked ? atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1)
          : atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1);
      break;
    default: break;
  }
  $rx = `rad_to_deg $rx`;
  $ry = `rad_to_deg $ry`;
  $rz = `rad_to_deg $rz`;
  return {$rx, $ry, $rz};
}

/*-
@param $q1 <float[]>
@param $q2 <float[]>
@returns <float[]>
*/
proc float[] quatAdd(float $q1[], float $q2[]) {
  float $q1x = $q1[0];
  float $q1y = $q1[1];
  float $q1z = $q1[2];
  float $q1w = $q1[3];
  float $q2x = $q2[0];
  float $q2y = $q2[1];
  float $q2z = $q2[2];
  float $q2w = $q2[3];
  float $qx = $q1x + $q2x;
  float $qy = $q1y + $q2y;
  float $qz = $q1z + $q2z;
  float $qw = $q1w + $q2w;
  return {$qx, $qy, $qz, $qw};
}

/*-
@param $q1 <float[]>
@param $q2 <float[]>
@returns <float[]>
*/
proc float[] quatSubtract(float $q1[], float $q2[]) {
  float $q1x = $q1[0];
  float $q1y = $q1[1];
  float $q1z = $q1[2];
  float $q1w = $q1[3];
  float $q2x = $q2[0];
  float $q2y = $q2[1];
  float $q2z = $q2[2];
  float $q2w = $q2[3];
  float $qx = $q1x - $q2x;
  float $qy = $q1y - $q2y;
  float $qz = $q1z - $q2z;
  float $qw = $q1w - $q2w;
  return {$qx, $qy, $qz, $qw};
}

/*-
@param $q1 <float[]>
@param $q2 <float[]>
@returns <float[]>
@remarks https://github.com/mrdoob/three.js/blob/dev/LICENSE
*/
proc float[] quatMultiply(float $q1[], float $q2[]) {
  float $q1x = $q1[0];
  float $q1y = $q1[1];
  float $q1z = $q1[2];
  float $q1w = $q1[3];
  float $q2x = $q2[0];
  float $q2y = $q2[1];
  float $q2z = $q2[2];
  float $q2w = $q2[3];
  float $qx = $q1x * $q2w + $q1w * $q2x + $q1y * $q2z - $q1z * $q2y;
  float $qy = $q1y * $q2w + $q1w * $q2y + $q1z * $q2x - $q1x * $q2z;
  float $qz = $q1z * $q2w + $q1w * $q2z + $q1x * $q2y - $q1y * $q2x;
  float $qw = $q1w * $q2w - $q1x * $q2x - $q1y * $q2y - $q1z * $q2z;
  return {$qx, $qy, $qz, $qw};
}

/*-
@param $q <float[]>
@returns <float[]>
*/
proc float[] quatInverse(float $q[]) {
  return {$q[0] * -1, $q[1] * -1, $q[2] * -1, $q[3]};
}

/*-
@param $v <float[]>
@param $q <float[]>
@returns <float[]>
*/
proc float[] rotateVectorByQuat(float $v[], float $q[]) {
  float $iq[] = quatInverse($q);
  float $vq[] = {$v[0], $v[1], $v[2], 0};
  $vq = quatMultiply(quatMultiply($q, $vq), $iq);
  return {$vq[0], $vq[1], $vq[2]};
}

/*-
@param $q <float[]>
@param $axis <float[]>
@returns <float[]>
*/
proc float[] quatFlip(float $q[], float $axis[]) {
  float $flipQ[] = angleAxisToQuat(180.0, $axis);
  return quatMultiply($flipQ, $q);
}

// -----------------------------------------------------------------------------
// ノード
// -----------------------------------------------------------------------------
/*-
@returns <string[]>
*/
proc string[] getSelectedNodes() {
  return `ls -l -sl -typ "joint" -typ "transform"`;
}

/*-
@param $n <string>
@returns <string>
*/
proc string getParentNode(string $n) {
  string $parent;
  string $parents[] = `listRelatives -f -p $n`;
  if (`size $parents` > 0) $parent = $parents[0];
  return $parent;
}

// -----------------------------------------------------------------------------
// UIコントロール
// -----------------------------------------------------------------------------
/*-
@var <string[]> 共有のUIコントロール配列。
*/
global string $nkUIControls[];

/*-
@param $control <string[]>
@returns <>
*/
proc nkUIAppendControls(string $controls[]) {
  print("nkUIAppendControls\n");
  global string $nkUIControls[];
  for ($control in $controls) {
    $nkUIControls[`size $nkUIControls`] = $control;
  }
  print("  nkUIControls:{\n    " + stringArrayToString($nkUIControls, ",\n    ") + "\n  }\n");
}

/*-
@param $root <string>
@param $end <string> 同じウィンドウのコントロールを一括除去する場合は空文字列を指定する。
@returns <>
*/
proc nkUIRemoveControls(string $root, string $end) {
  print("nkUIRemoveControls\n");
  global string $nkUIControls[];
  string $paths[];
  for ($control in $nkUIControls) {
    string $buffer[];
    int $depth = `tokenize $control "|" $buffer`;
    string $first = ($depth > 0) ? $buffer[0] : "";
    string $last = ($depth > 0) ? $buffer[$depth - 1] : "";
    int $shouldRemove = (!`size $end`)
        ? $first == $root
        : $first == $root && $last == $end;
    if ($shouldRemove) $paths[`size $paths`] = $control;
  }
  if (`size $paths` > 0) {
    $nkUIControls = stringArrayRemove($paths, $nkUIControls);
  }
  print("  nkUIControls:{\n    " + stringArrayToString($nkUIControls, ",\n    ") + "\n  }\n");
}

/*-
@param $root <string>
@param $end <string> ウィンドウの場合は`$root`と同じ値を指定する。
@returns <string>
*/
proc string nkUIGetControl(string $root, string $end) {
  global string $nkUIControls[];
  string $path;
  for ($control in $nkUIControls) {
    string $buffer[];
    int $depth = `tokenize $control "|" $buffer`;
    string $first = ($depth > 0) ? $buffer[0] : "";
    string $last = ($depth > 0) ? $buffer[$depth - 1] : "";
    if ($first == $root && $last == $end) {
      $path = $control;
      break;
    }
  }
  return $path;
}

/*-
@param $control <string>
@returns <int>
*/
proc int[] checkBoxGrpGetEnable(string $control) {
  return `checkBoxGrp -q -en $control`;
}

/*-
@param $enable <int>
@param $control <string>
@returns <>
*/
proc checkBoxGrpSetEnable(int $enable, string $control) {
  checkBoxGrp -e -en $enable $control;
}

/*-
@param $ncb <int> チェックボックスの数。1から4まで。
@param $control <string>
@returns <int[]>
*/
proc int[] checkBoxGrpGetValues(int $ncb, string $control) {
  $ncb = `clamp 1 4 $ncb`;
  int $values[];
  if ($ncb > 0) $values[0] = `checkBoxGrp -q -v1 $control`;
  if ($ncb > 1) $values[1] = `checkBoxGrp -q -v2 $control`;
  if ($ncb > 2) $values[2] = `checkBoxGrp -q -v3 $control`;
  if ($ncb > 3) $values[3] = `checkBoxGrp -q -v4 $control`;
  return $values;
}

/*-
@param $values <int[]>
@param $control <string>
@returns <>
*/
proc checkBoxGrpSetValues(int $values[], string $control) {
  int $ncb = `size $values`;
  if ($ncb > 0) checkBoxGrp -e -v1 $values[0] $control;
  if ($ncb > 1) checkBoxGrp -e -v2 $values[1] $control;
  if ($ncb > 2) checkBoxGrp -e -v3 $values[2] $control;
  if ($ncb > 3) checkBoxGrp -e -v4 $values[3] $control;
}

/*-
@param $control <string>
@returns <int>
*/
proc int radioButtonGrpGetEnable(string $control) {
  return `radioButtonGrp -q -en $control`;
}

/*-
@param $enable <int>
@param $control <string>
@returns <>
*/
proc radioButtonGrpSetEnable(int $enable, string $control) {
  radioButtonGrp -e -en $enable $control;
}

/*-
@param $control <string>
@returns <int>
*/
proc int radioButtonGrpGetSelect(string $control) {
  return `radioButtonGrp -q -sl $control`;
}

/*-
@param $index <int>
@param $control <string>
@returns <>
*/
proc radioButtonGrpSetSelect(int $index, string $control) {
  radioButtonGrp -e -sl $index $control;
}

/*-
@param $control <string>
@returns <int>
*/
proc int textFieldGrpGetEnable(string $control) {
  return `textFieldGrp -q -en $control`;
}

/*-
@param $enable <int>
@param $control <string>
@returns <>
*/
proc textFieldGrpSetEnable(int $enable, string $control) {
  textFieldGrp -e -en $enable $control;
}

/*-
@param $control <string>
@returns <int>
*/
proc int textFieldGrpGetInsertionPosition(string $control) {
  return `textFieldGrp -q -ip $control`;
}

/*-
@param $position <int>
@param $control <string>
@returns <>
*/
proc textFieldGrpSetInsertionPosition(int $position, string $control) {
  textFieldGrp -e -ip $position $control;
}

/*-
@param $control <string>
@returns <string>
*/
proc string textFieldGrpGetText(string $control) {
  return `textFieldGrp -q -tx $control`;
}

/*-
@param $text <string>
@param $control <string>
@returns <>
*/
proc textFieldGrpSetText(string $text, string $control) {
  textFieldGrp -e -tx $text $control;
}

/*-
@param $label <string>
@param $control <string>
@returns <>
*/
proc textScrollListAppend(string $label, string $control) {
  textScrollList -e -a $label $control;
}

/*-
@param $index <int>
@param $label <string>
@param $control <string>
@returns <>
*/
proc textScrollListAppendPosition(int $index, string $label, string $control) {
  textScrollList -e -ap $index $label $control;
}

/*-
@param $control <string>
@returns <>
*/
proc textScrollListRemoveAll(string $control) {
  textScrollList -e -ra $control;
}

/*-
@param $index <int>
@param $control <string>
@returns <>
*/
proc textScrollListRemoveIndexedItem(int $index, string $control) {
  textScrollList -e -rii $index $control;
}

/*-
@param $index <int>
@param $control <string>
@returns <>
*/
proc textScrollListSetSelectIndexedItem(int $index, string $control) {
  textScrollList -e -sii $index $control;
}

/*-
@param $indices <int[]>
@param $control <string>
@returns <>
*/
proc textScrollListSetSelectIndexedItems(int $indices[], string $control) {
  for ($i in $indices) {
    textScrollList -e -sii $i $control;
  }
}

/*-
@param $control <string>
@returns <int[]>
*/
proc int[] textScrollListGetSelectIndexedItems(string $control) {
  return `textScrollList -q -sii $control`;
}

/*-
@param $control <string>
@returns <int>
*/
proc int textScrollListGetSelectIndexedItem(string $control) {
  int $indices[] = textScrollListGetSelectIndexedItems($control);
  return ((`size $indices`) ? $indices[0] : 0);
}

// /////////////////////////////////////////////////////////////////////////////
// コアプロシージャ
// /////////////////////////////////////////////////////////////////////////////
/*-
@var <string[]>
```ebnf
            pose = '"' , pose_name , "=" , pose_transforms , '"' ;
       pose_name = { any_char - "=" } ;
 pose_transforms = { pose_transform }+ ;
  pose_transform = transform_header , transform_values , ";" ;
transform_header = transform_node , "[" , pose_setting , "]" ;
  transform_node = [ "|" ] , node_name , { "|" , node_name } ;
       node_name = letter , { letter | digit | "_" } ;
    pose_setting = paste_setting , "/" , select_setting , "/" , mirror_setting ;
   paste_setting = bool , "," , bool , "," , bool ;
  select_setting = select_pattern , "," , select_pattern ;
  mirror_setting = axis , "," , axis , "," , axis , "," , bool , "," , bool ;
  select_pattern = { letter | digit | "_" }+ ;
            axis = ? 0-2 ? ;
            bool = ? 0-1 ? ;
transform_values = t , "," , q , "," , s , "," , h ;
               t = number , "," , number , "," , number ;
               q = number , "," , number , "," , number , "," , number ;
               s = number , "," , number , "," , number ;
               h = number , "," , number , "," , number ;
          number = [ "-" ] , ( integer | real ) ;
           digit = ? 0-9 ? ;
          letter = ? a-zA-Z ? ;
        any_char = ? Any visible characters ? ;
```
*/
global string $nkCopyPosePoses[];

/*-
@var <int[]>
*/
global int $nkCopyPoseInitPasteSetting[];
if (!`size $nkCopyPoseInitPasteSetting`) {
  $nkCopyPoseInitPasteSetting = {1, 1, 0};
}

/*-
@var <string[]>
*/
global string $nkCopyPoseInitSelectSetting[];
if (!`size $nkCopyPoseInitSelectSetting`) {
  $nkCopyPoseInitSelectSetting = {"_L", "_R"};
}

/*-
@var <int[]>
*/
global int $nkCopyPoseInitMirrorSetting[];
if (!`size $nkCopyPoseInitMirrorSetting`) {
  $nkCopyPoseInitMirrorSetting = {0, 0, 1, 0, 0};
}

// -----------------------------------------------------------------------------
// トランスフォーム
// -----------------------------------------------------------------------------
/*-
@param $n <string>
@param $poseSetting <string>
@returns <string>
*/
proc string makeTransformHeader(string $n, string $poseSetting) {
  return ($n + "[" + $poseSetting + "]");
}

/*-
@param $n <string>
@returns <float[]>
*/
proc float[] makeTransformValues(string $n) {
  print("makeTransformValues\n");
  print("  n:" + $n + "\n");
  float $values[] = {
    0, 0, 0,
    0, 0, 0, 1,
    1, 1, 1,
    0, 0, 0
  };
  string $type = `nodeType $n`;
  if ($type == "transform" || $type == "joint") {
    float $t[] = `getAttr ($n + ".translate")`;
    float $r[] = `getAttr ($n + ".rotate")`;
    float $s[] = `getAttr ($n + ".scale")`;
    float $h[] = `getAttr ($n + ".shear")`;
    print("  t :{" + floatArrayToString($t, ", ") + "}\n");
    print("  r :{" + floatArrayToString($r, ", ") + "}\n");
    print("  s :{" + floatArrayToString($s, ", ") + "}\n");
    print("  h :{" + floatArrayToString($h, ", ") + "}\n");

    int $o = `getAttr ($n + ".rotateOrder")`;
    $o = reverseRotateOrder($o);
    int $oXYZ = reverseRotateOrder(0);

    float $rq[] = eulerToQuat($r, $o);

    float $ra[] = `getAttr ($n + ".rotateAxis")`;
    $ra = eulerToQuat($ra, $oXYZ);

    float $jo[] = {0, 0, 0, 1};
    if (`attributeQuery -n $n -ex "jointOrient"`) {
      $jo = `getAttr ($n + ".jointOrient")`;
      $jo = eulerToQuat($jo, $oXYZ);
    }

    float $q[] = quatMultiply($jo, quatMultiply($ra, $rq));

    print("  o :" + $o + "\n");
    print("  rq:{" + floatArrayToString($rq, ", ") + "}\n");
    print("  ra:{" + floatArrayToString($ra, ", ") + "}\n");
    print("  jo:{" + floatArrayToString($jo, ", ") + "}\n");
    print("  q :{" + floatArrayToString($q, ", ") + "}\n");

    $values = {
      $t[0], $t[1], $t[2],
      $q[0], $q[1], $q[2], $q[3],
      $s[0], $s[1], $s[2],
      $h[0], $h[1], $h[2]
    };
  }
  return $values;
}

/*-
@param $header <string>
@param $values <float[]>
@returns <string>
*/
proc string makePoseTransform(string $header, float $values[]) {
  return ($header + floatArrayToString($values, ",") + ";");
}

/*-
@param $nodes <string[]>
@param $poseSettings <string[]>
@returns <string[]>
*/
proc string[] generatePoseTransforms(string $nodes[], string $poseSettings[]) {
  print("generatePoseTransforms\n");
  print("  nodes       :{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n");
  print("  poseSettings:{\n    " + stringArrayToString($poseSettings, ",\n    ") + "\n  }\n");
  string $poseTransforms[];
  int $numTransforms = minStringArrayCount($nodes, $poseSettings);
  for ($i = 0; $i < $numTransforms; $i++) {
    string $n = $nodes[$i];
    print("  n:" + $n + "\n");
    string $header = makeTransformHeader($n, $poseSettings[$i]);
    float $values[] = makeTransformValues($n);
    string $poseTransform = makePoseTransform($header, $values);
    print("    poseTransform:" + $poseTransform + "\n");
    $poseTransforms[$i] = $poseTransform;
  }
  return $poseTransforms;
}

/*-
@param $n <string>
@param $m <float[]>
@param $shouldSetT <int>
@param $shouldSetR <int>
@param $shouldSetS <int>
@returns <>
*/
proc setTransformAttributes(
  string $n,
  float $m[],
  int $shouldApplyT,
  int $shouldApplyR,
  int $shouldApplyS
) {
  print("setTransformAttributes\n");
  print("  n           :" + $n + "\n");
  print("  m           :{" + floatArrayToString($m, ", ") + "}\n");
  print("  shouldApplyT:" + $shouldApplyT + "\n");
  print("  shouldApplyR:" + $shouldApplyR + "\n");
  print("  shouldApplyS:" + $shouldApplyS + "\n");
  if (`objExists $n` && `size $m` == 12) {
    float $t[] = {$m[0], $m[1], $m[2]};
    float $r[] = {$m[3], $m[4], $m[5]};
    float $s[] = {$m[6], $m[7], $m[8]};
    float $h[] = {$m[9], $m[10], $m[11]};
    print("  t:{" + floatArrayToString($t, ", ") + "}\n");
    print("  r:{" + floatArrayToString($r, ", ") + "}\n");
    print("  s:{" + floatArrayToString($s, ", ") + "}\n");
    print("  h:{" + floatArrayToString($h, ", ") + "}\n");

    string $tx = $n + ".tx";
    string $ty = $n + ".ty";
    string $tz = $n + ".tz";
    string $rx = $n + ".rx";
    string $ry = $n + ".ry";
    string $rz = $n + ".rz";
    string $sx = $n + ".sx";
    string $sy = $n + ".sy";
    string $sz = $n + ".sz";

    if ($shouldApplyT) {
      if (!`getAttr -l $tx`) setAttr $tx $t[0];
      if (!`getAttr -l $ty`) setAttr $ty $t[1];
      if (!`getAttr -l $tz`) setAttr $tz $t[2];
    }
    if ($shouldApplyR) {
      if (!`getAttr -l $rx`) setAttr $rx $r[0];
      if (!`getAttr -l $ry`) setAttr $ry $r[1];
      if (!`getAttr -l $rz`) setAttr $rz $r[2];
    }
    if ($shouldApplyS) {
      if (!`getAttr -l $sx`) setAttr $sx $s[0];
      if (!`getAttr -l $sy`) setAttr $sy $s[1];
      if (!`getAttr -l $sz`) setAttr $sz $s[2];
    }
  }
}

/*-
@param $n <string>
@param $m <float[]>
@returns <float[]>
*/
proc float[] asIsTransform(string $n, float $m[]) {
  print("asIsTransform\n");
  print("  n :" + $n + "\n");
  print("  m :{" + floatArrayToString($m, ", ") + "}\n");

  float $t[] = {$m[0], $m[1], $m[2]};
  float $q[] = {$m[3], $m[4], $m[5], $m[6]};
  float $s[] = {$m[7], $m[8], $m[9]};
  float $h[] = {$m[10], $m[11], $m[12]};
  print("  t :{" + floatArrayToString($t, ", ") + "}\n");
  print("  q :{" + floatArrayToString($q, ", ") + "}\n");
  print("  s :{" + floatArrayToString($s, ", ") + "}\n");
  print("  h :{" + floatArrayToString($h, ", ") + "}\n");

  int $o = `getAttr ($n + ".rotateOrder")`;
  $o = reverseRotateOrder($o);
  int $oXYZ = reverseRotateOrder(0);

  float $ra[] = `getAttr ($n + ".rotateAxis")`;
  $ra = quatInverse(eulerToQuat($ra, $oXYZ));

  float $jo[] = {0, 0, 0, 1};
  if (`attributeQuery -n $n -ex "jointOrient"`) {
    $jo = `getAttr ($n + ".jointOrient")`;
    $jo = quatInverse(eulerToQuat($jo, $oXYZ));
  }

  float $rq[] = quatMultiply($jo, quatMultiply($ra, $q));
  float $r[] = quatToEuler($rq, $o);

  print("  o :" + $o + "\n");
  print("  q :{" + floatArrayToString($q, ", ") + "}\n");
  print("  ra:{" + floatArrayToString($ra, ", ") + "}\n");
  print("  jo:{" + floatArrayToString($jo, ", ") + "}\n");
  print("  rq:{" + floatArrayToString($rq, ", ") + "}\n");
  print("  r :{" + floatArrayToString($r, ", ") + "}\n");

  float $values[] = {
    $t[0], $t[1], $t[2],
    $r[0], $r[1], $r[2],
    $s[0], $s[1], $s[2],
    $h[0], $h[1], $h[2]
  };
  print("  values:{" + floatArrayToString($values, ", ") + "}\n");

  return $values;
}

/*-
@param $n <string>
@param $m <float[]>
@param $hasCommonParent <boolean>
@param $mirrorAxis <int>
@param $primaryAxis <int>
@param $secondaryAxis <int>
@param $invertPrimaryAxis <boolean>
@param $invertSecondaryAxis <boolean>
@returns <float[]>
*/
proc float[] mirrorTransform(
  string $n,
  float $m[],
  int $hasCommonParent,
  int $mirrorAxis,
  int $primaryAxis,
  int $secondaryAxis,
  int $invertPrimaryAxis,
  int $invertSecondaryAxis
) {
  print("mirrorTransform\n");
  print("  n                  :" + $n + "\n");
  print("  m                  :{" + floatArrayToString($m, ", ") + "}\n");
  print("  hasCommonParent    :" + $hasCommonParent + "\n");
  print("  mirrorAxis         :" + $mirrorAxis + "\n");
  print("  primaryAxis        :" + $primaryAxis + "\n");
  print("  secondaryAxis      :" + $secondaryAxis + "\n");
  print("  invertPrimaryAxis  :" + $invertPrimaryAxis + "\n");
  print("  invertSecondaryAxis:" + $invertSecondaryAxis + "\n");

  float $t[] = {$m[0], $m[1], $m[2]};
  float $q[] = {$m[3], $m[4], $m[5], $m[6]};
  float $s[] = {$m[7], $m[8], $m[9]};
  float $h[] = {$m[10], $m[11], $m[12]};
  print("  t :{" + floatArrayToString($t, ", ") + "}\n");
  print("  q :{" + floatArrayToString($q, ", ") + "}\n");
  print("  s :{" + floatArrayToString($s, ", ") + "}\n");
  print("  h :{" + floatArrayToString($h, ", ") + "}\n");

  // 位置のミラーリング
  if ($hasCommonParent) {
    $t[$mirrorAxis] *= -1;
  }
  else {
    if ($invertPrimaryAxis) $t[$primaryAxis] *= -1;
    if ($invertSecondaryAxis) $t[$secondaryAxis] *= -1;
    if ($invertPrimaryAxis == $invertSecondaryAxis) {
      // 第三の軸を反転
      int $usedAxis[];
      $usedAxis[$primaryAxis] = 1;
      $usedAxis[$secondaryAxis] = 1;
      int $i;
      for ($i = 0; $i < 3; $i++) if (!$usedAxis[$i]) break;
      $t[$i] *= -1;
    }
  }

  // 回転のミラーリング
  int $o = `getAttr ($n + ".rotateOrder")`;
  $o = reverseRotateOrder($o);
  int $oXYZ = reverseRotateOrder(0);

  float $ra[] = `getAttr ($n + ".rotateAxis")`;
  $ra = quatInverse(eulerToQuat($ra, $oXYZ));

  float $jo[] = {0, 0, 0, 1};
  if (`attributeQuery -n $n -ex "jointOrient"`) {
    $jo = `getAttr ($n + ".jointOrient")`;
    $jo = quatInverse(eulerToQuat($jo, $oXYZ));
  }

  float $mq[] = $q;
  $mq[$mirrorAxis] *= -1;
  $mq[3] *= -1;
  float $cq[] = quatMultiply($jo, quatMultiply($ra, $mq));

  print("  o :" + $o + "\n");
  print("  q :{" + floatArrayToString($q, ", ") + "}\n");
  print("  ra:{" + floatArrayToString($ra, ", ") + "}\n");
  print("  jo:{" + floatArrayToString($jo, ", ") + "}\n");
  print("  mq:{" + floatArrayToString($mq, ", ") + "}\n");

  // ソースとターゲットの親が異なる場合は親ノードの反転をリセットしておく
  if (!$hasCommonParent) {
    if ($mirrorAxis == $primaryAxis || $mirrorAxis == $secondaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      if ($mirrorAxis == $primaryAxis) {
        $flipAxis[$secondaryAxis] = 1;
      }
      else if ($mirrorAxis == $secondaryAxis) {
        $flipAxis[$primaryAxis] = 1;
      }
      $cq = quatFlip($cq, $flipAxis);
    }
    if ($invertPrimaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      $flipAxis[$secondaryAxis] = 1;
      $cq = quatFlip($cq, $flipAxis);
    }
    if ($invertSecondaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      $flipAxis[$primaryAxis] = 1;
      $cq = quatFlip($cq, $flipAxis);
    }
  }

  // プライマリとセカンダリを対称化するための反転
  if ($mirrorAxis == $primaryAxis || $mirrorAxis == $secondaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    if ($mirrorAxis == $primaryAxis) {
      $flipAxis[$secondaryAxis] = 1;
    }
    else if ($mirrorAxis == $secondaryAxis) {
      $flipAxis[$primaryAxis] = 1;
    }
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }

  // 任意の反転
  if ($invertPrimaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    $flipAxis[$secondaryAxis] = 1;
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }
  if ($invertSecondaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    $flipAxis[$primaryAxis] = 1;
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }

  float $r[] = quatToEuler($cq, $o);
  print("  cq:{" + floatArrayToString($cq, ", ") + "}\n");
  print("  r :{" + floatArrayToString($r, ", ") + "}\n");

  float $values[] = {
    $t[0], $t[1], $t[2],
    $r[0], $r[1], $r[2],
    $s[0], $s[1], $s[2],
    $h[0], $h[1], $h[2]
  };
  print("  values:{" + floatArrayToString($values, ", ") + "}\n");

  return $values;
}

// -----------------------------------------------------------------------------
// データ変換
// -----------------------------------------------------------------------------
/*-
@param $pasteSetting <int[]>
@param $selectSetting <string[]>
@param $mirrorSetting <int[]>
@returns <string>
*/
proc string buildPoseSetting(
  int $pasteSetting[],
  string $selectSetting[],
  int $mirrorSetting[]
) {
  string $poseSetting = intArrayToString($pasteSetting, ",");
  $poseSetting += "/" + stringArrayToString($selectSetting, ",");
  $poseSetting += "/" + intArrayToString($mirrorSetting, ",");
  return $poseSetting;
}

/*-
@param $poseName <string>
@param $poseTransforms <string[]>
@returns <string>
*/
proc string buildPose(
  string $poseName,
  string $poseTransforms[]
) {
  string $pose = $poseName + "=";
  for ($poseTransform in $poseTransforms) {
    $pose += $poseTransform;
  }
  return $pose;
}

/*-
@param $pose <string>
@returns <string>
*/
proc string extractPoseName(string $pose) {
  string $poseName;
  string $buffer[];
  if (`tokenize $pose "=" $buffer` == 2) {
    $poseName = $buffer[0];
  }
  return $poseName;
}

/*-
@param $pose <string>
@returns <string[]>
*/
proc string[] extractPoseTransforms(string $pose) {
  string $poseTransforms[];
  string $buffer1[];
  if (`tokenize $pose "=" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[1] ";" $buffer2` > 0) {
      $poseTransforms = $buffer2;
    }
  }
  return $poseTransforms;
}

/*-
@param $poseTransform <string>
@returns <string[]>
*/
proc string[] extractTransformHeader(string $poseTransform) {
  string $header[];
  string $buffer1[];
  if (`tokenize $poseTransform "]" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[0] "[" $buffer2` == 2) {
      $header = $buffer2;
    }
  }
  return $header;
}

/*-
@param $poseTransform <string>
@returns <string>
*/
proc string extractTransformNode(string $poseTransform) {
  string $node;
  string $header[] = extractTransformHeader($poseTransform);
  if (`size $header` == 2) $node = $header[0];
  return $node;
}

/*-
@param $poseTransform <string>
@returns <string>
*/
proc string extractPoseSetting(string $poseTransform) {
  string $poseSetting;
  string $header[] = extractTransformHeader($poseTransform);
  if (`size $header` == 2) $poseSetting = $header[1];
  return $poseSetting;
}

/*-
@param $poseSetting <string>
@returns <string[]>
*/
proc string[] extractPoseSettings(string $poseSetting) {
  string $poseSettings[];
  string $buffer[];
  if (`tokenize $poseSetting "/" $buffer` == 3) {
    $poseSettings = $buffer;
  }
  return $poseSettings;
}

/*-
@param $poseSetting <string>
@returns <int[]>
*/
proc int[] extractPasteSetting(string $poseSetting) {
  int $pasteSetting[] = {1, 1, 0};
  string $poseSettings[] = extractPoseSettings($poseSetting);
  string $buffer[];
  if (`tokenize $poseSettings[0] "," $buffer` == 3) {
    for ($i = 0; $i < 3; $i++) {
      $pasteSetting[$i] = (int) $buffer[$i];
    }
  }
  return $pasteSetting;
}

/*-
@param $poseSetting <string>
@returns <string[]>
*/
proc string[] extractSelectSetting(string $poseSetting) {
  string $selectSetting[] = {"_L", "_R"};
  string $poseSettings[] = extractPoseSettings($poseSetting);
  string $buffer[];
  if (`tokenize $poseSettings[1] "," $buffer` == 2) {
    for ($i = 0; $i < 2; $i++) {
      $selectSetting[$i] = $buffer[$i];
    }
  }
  return $selectSetting;
}

/*-
@param $poseSetting <string>
@returns <int[]>
*/
proc int[] extractMirrorSetting(string $poseSetting) {
  int $mirrorSetting[] = {0, 0, 1, 0, 0};
  string $poseSettings[] = extractPoseSettings($poseSetting);
  string $buffer[];
  if (`tokenize $poseSettings[2] "," $buffer` == 5) {
    for ($i = 0; $i < 5; $i++) {
      $mirrorSetting[$i] = (int) $buffer[$i];
    }
  }
  return $mirrorSetting;
}

/*-
@param $poseTransform <string>
@returns <float[]>
*/
proc float[] extractTransformValues(string $poseTransform) {
  float $values[] = {
    0, 0, 0,
    0, 0, 0, 1,
    1, 1, 1,
    0, 0, 0
  };
  string $buffer1[];
  if (`tokenize $poseTransform "]" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[1] "," $buffer2` == 13) {
      for ($i = 0; $i < 13; $i++) {
        $values[$i] = (float) $buffer2[$i];
      }
    }
  }
  return $values;
}

// -----------------------------------------------------------------------------
// ポーズ
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc clearPoses() {
  global string $nkCopyPosePoses[];
  clear $nkCopyPosePoses;
}

/*-
@returns <int>
*/
proc int getNumPoses() {
  global string $nkCopyPosePoses[];
  return `size $nkCopyPosePoses`;
}

/*-
@param $i <int>
@returns <string>
*/
proc string getPose(int $i) {
  global string $nkCopyPosePoses[];
  string $pose;
  if ($i >= 0 && $i < (getNumPoses())) {
    $pose = $nkCopyPosePoses[$i];
  }
  return $pose;
}

/*-
@returns <string[]>
*/
proc string[] getPoseNames() {
  global string $nkCopyPosePoses[];
  string $poseNames[];
  for ($pose in $nkCopyPosePoses) {
    $poseNames[`size $poseNames`] = extractPoseName($pose);
  }
  return $poseNames;
}

/*-
@param $poseName <string>
@param $nodes <string[]>
@param $poseSettings <string[]>
@returns <int> 追加後のポーズ数。
*/
proc int addPose(
  string $poseName,
  string $nodes[],
  string $poseSettings[]
) {
  print("addPose\n");
  print("  poseName    :" + $poseName + "\n");
  print("  nodes       :{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n");
  print("  poseSettings:{\n    " + stringArrayToString($poseSettings, ",\n    ") + "\n  }\n");
  global string $nkCopyPosePoses[];
  string $poseTransforms[] = generatePoseTransforms($nodes, $poseSettings);
  print("  poseTransforms:{\n    " + (stringArrayToString($poseTransforms, ",\n    ")) + "\n  }\n");
  string $pose = buildPose(
    $poseName,
    $poseTransforms
  );
  print("  pose:" + $pose + "\n");
  $nkCopyPosePoses[(getNumPoses())] = $pose;
  return (getNumPoses());
}

/*-
@param $poseIndex <int>
@returns <int> 削除後のポーズ数。
*/
proc int deletePose(int $poseIndex) {
  print("deletePose\n");
  print("  poseIndex:" + $poseIndex + "\n");
  global string $nkCopyPosePoses[];
  stringArrayRemoveAtIndex($poseIndex, $nkCopyPosePoses);
  return (getNumPoses());
}

/*-
@param $poseIndex <int>
@returns <>
*/
proc updatePose(
  int $poseIndex
) {
  print("updatePose\n");
  print("  poseIndex:" + $poseIndex + "\n");
  global string $nkCopyPosePoses[];

  string $pose = getPose($poseIndex);
  if (!`size $pose`) return;

  string $poseName = extractPoseName($pose);
  print("  poseName      :" + $poseName + "\n");
  string $poseTransforms[] = extractPoseTransforms($pose);
  print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n");
  if (!`size $poseTransforms`) return;

  string $nodes[];
  string $poseSettings[];
  for ($i = 0; $i < `size $poseTransforms`; $i++) {
    string $poseTransform = $poseTransforms[$i];
    print("  poseTransform:" + $poseTransform + "\n");
    string $node = extractTransformNode($poseTransform);
    print("    node       :" + $node + "\n");
    string $poseSetting = extractPoseSetting($poseTransform);
    print("    poseSetting:" + $poseSetting + "\n");
    $nodes[$i] = $node;
    $poseSettings[$i] = $poseSetting;
  }
  string $newPoseTransforms[] = generatePoseTransforms($nodes, $poseSettings);
  print("  newPoseTransforms:{\n    " + (stringArrayToString($newPoseTransforms, ",\n    ")) + "\n  }\n");

  string $newPose = buildPose(
    $poseName,
    $newPoseTransforms
  );
  print("  newPose:" + $newPose + "\n");
  $nkCopyPosePoses[$poseIndex] = $newPose;
}

/*-
@param $poseIndex <int>
@param $poseName <string>
@param $poseSettings <string[]>
@returns <>
*/
proc editPose(
  int $poseIndex,
  string $poseName,
  string $poseSettings[]
) {
  print("editPose\n");
  print("  poseIndex   :" + $poseIndex + "\n");
  print("  poseName    :" + $poseName + "\n");
  print("  poseSettings:{\n    " + stringArrayToString($poseSettings, ",\n    ") + "\n  }\n");
  global string $nkCopyPosePoses[];

  string $pose = getPose($poseIndex);
  if (!`size $pose`) return;

  string $poseTransforms[] = extractPoseTransforms($pose);
  print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n");
  if (!`size $poseTransforms`) return;

  string $newPoseTransforms[];
  int $numTransforms = minStringArrayCount($poseSettings, $poseTransforms);
  for ($i = 0; $i < $numTransforms; $i++) {
    string $poseTransform = $poseTransforms[$i];
    print("  poseTransform:" + $poseTransform + "\n");
    string $n = extractTransformNode($poseTransform);
    print("    n               :" + $n + "\n");
    string $header = makeTransformHeader($n, $poseSettings[$i]);
    print("    header          :" + $header + "\n");
    float $values[] = extractTransformValues($poseTransform);
    print("    values          :{" + floatArrayToString($values, ", ") + "}\n");
    string $newPoseTransform = makePoseTransform($header, $values);
    print("    newPoseTransform:" + $newPoseTransform + "\n");
    $newPoseTransforms[$i] = $newPoseTransform;
  }
  print("  newPoseTransforms:{\n    " + (stringArrayToString($newPoseTransforms, ",\n    ")) + "\n  }\n");

  string $newPose = buildPose(
    $poseName,
    $newPoseTransforms
  );
  print("  newPose:" + $newPose + "\n");
  $nkCopyPosePoses[$poseIndex] = $newPose;
}

/*-
@param $poseIndex <int>
@returns <int> 移動後のポーズインデックス。基数は`0`。
*/
proc int moveUpPose(int $poseIndex) {
  print("moveUpPose\n");
  print("  poseIndex:" + $poseIndex + "\n");
  global string $nkCopyPosePoses[];
  string $pose = getPose($poseIndex);
  if (!`size $pose`) return $poseIndex;
  int $newPoseIndex = $poseIndex - 1;
  print("  newPoseIndex:" + $newPoseIndex + "\n");
  stringArrayRemoveAtIndex($poseIndex, $nkCopyPosePoses);
  stringArrayInsertAtIndex($newPoseIndex, $nkCopyPosePoses, $pose);
  return $newPoseIndex;
}

/*-
@param $poseIndex <int>
@returns <int> 移動後のポーズインデックス。基数は`0`。
*/
proc int moveDownPose(int $poseIndex) {
  print("moveDownPose\n");
  print("  poseIndex:" + $poseIndex + "\n");
  global string $nkCopyPosePoses[];
  string $pose = getPose($poseIndex);
  if (!`size $pose`) return $poseIndex;
  int $newPoseIndex = $poseIndex + 1;
  print("  newPoseIndex:" + $newPoseIndex + "\n");
  stringArrayRemoveAtIndex($poseIndex, $nkCopyPosePoses);
  stringArrayInsertAtIndex($newPoseIndex, $nkCopyPosePoses, $pose);
  return $newPoseIndex;
}

/*-
@param $poseIndex <int>
@param $isOpposite <boolean>
@returns <>
*/
proc selectNodes(int $poseIndex, int $isOpposite) {
  print("selectNodes\n");
  print("  poseIndex :" + $poseIndex + "\n");
  print("  isOpposite:" + $isOpposite + "\n");

  string $pose = getPose($poseIndex);
  print("  pose:" + $pose + "\n");
  if (!`size $pose`) return;

  string $poseTransforms[] = extractPoseTransforms($pose);
  print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n");
  if (!`size $poseTransforms`) return;

  string $targetNodes[];
  for ($poseTransform in $poseTransforms) {
    print("  poseTransform:" + $poseTransform + "\n");
    string $targetNode = extractTransformNode($poseTransform);
    print("    targetNode   :" + $targetNode + "\n");
    string $poseSetting = extractPoseSetting($poseTransform);
    print("    poseSetting  :" + $poseSetting + "\n");
    string $selectSetting[] = extractSelectSetting($poseSetting);
    print("    selectSetting:{" + stringArrayToString($selectSetting, ", ") + "}\n");
    string $patternA = $selectSetting[0];
    string $patternB = $selectSetting[1];
    print("    patternA     :" + $patternA + "\n");
    print("    patternB     :" + $patternB + "\n");
    if ($isOpposite) {
      if (`gmatch $targetNode ("*" + $patternA + "*")`) {
        $targetNode = substituteAllString($targetNode, $patternA, $patternB);
      }
      else if (`gmatch $targetNode ("*" + $patternB + "*")`) {
        $targetNode = substituteAllString($targetNode, $patternB, $patternA);
      }
    }
    if (`objExists $targetNode`) {
      $targetNodes[`size $targetNodes`] = $targetNode;
    }
  }
  print("  targetNodes:{\n    " + stringArrayToString($targetNodes, "\n    ") + "\n  }\n");
  if (!`size $targetNodes`) return;

  int $mods = `getModifiers`;
  print("  mods:" + $mods + "\n");
  switch ($mods) {
    // Nothing
    case 0: select -r $targetNodes; break;
    // Shift
    case 1: select -tgl $targetNodes; break;
    // Ctrl
    case 4: select -d $targetNodes; break;
    // Shift + Ctrl
    case 5: select -add $targetNodes; break;
    default: break;
  }
}

/*-
@param $poseIndex <int>
@param $isOpposite <boolean>
@param $nodes <string[]>
@returns <>
*/
proc pastePose(int $poseIndex, int $isOpposite, string $nodes[]) {
  print("pastePose\n");
  print("  poseIndex :" + $poseIndex + "\n");
  print("  isOpposite:" + $isOpposite + "\n");
  print("  nodes     :{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n");

  if (!`size $nodes`) return;

  string $pose = getPose($poseIndex);
  print("  pose:" + $pose + "\n");
  if (!`size $pose`) return;

  string $poseTransforms[] = extractPoseTransforms($pose);
  print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n");
  if (!`size $poseTransforms`) return;

  int $numTargets = minStringArrayCount($nodes, $poseTransforms);
  print("  numTargets:" + $numTargets + "\n");
  for ($i = 0; $i < $numTargets; $i++) {
    string $poseTransform = $poseTransforms[$i];
    print("  poseTransform:" + $poseTransform + "\n");
    string $sourceNode = extractTransformNode($poseTransform);
    print("    sourceNode     :" + $sourceNode + "\n");
    string $targetNode = $nodes[$i];
    print("    targetNode     :" + $targetNode + "\n");

    float $transformValues[] = extractTransformValues($poseTransform);
    print("    transformValues:{" + floatArrayToString($transformValues, ", ") + "}\n");

    string $poseSetting = extractPoseSetting($poseTransform);
    print("    poseSetting    :" + $poseSetting + "\n");
    int $pasteSetting[] = extractPasteSetting($poseSetting);
    print("    pasteSetting   :{" + intArrayToString($pasteSetting, ", ") + "}\n");

    if ($isOpposite) {
      int $mirrorSetting[] = extractMirrorSetting($poseSetting);
      print("    mirrorSetting  :{" + intArrayToString($mirrorSetting, ", ") + "}\n");
      string $sourceParent = getParentNode($sourceNode);
      string $targetParent = getParentNode($targetNode);
      int $hasCommonParent = $sourceParent == $targetParent;
      print("    hasCommonParent:" + $hasCommonParent + "\n");
      $transformValues = mirrorTransform(
        $targetNode,
        $transformValues,
        $hasCommonParent,
        $mirrorSetting[0],
        $mirrorSetting[1],
        $mirrorSetting[2],
        $mirrorSetting[3],
        $mirrorSetting[4]
      );
    }
    else {
      $transformValues = asIsTransform($targetNode, $transformValues);
    }

    setTransformAttributes(
      $targetNode,
      $transformValues,
      $pasteSetting[0],
      $pasteSetting[1],
      $pasteSetting[2]
    );
  }
}

// /////////////////////////////////////////////////////////////////////////////
// UI
// /////////////////////////////////////////////////////////////////////////////
/*-
@var <string>
*/
global string $nkCopyPosePromptPoseName;

/*-
@var <string[]>
*/
global string $nkCopyPosePromptNodes[];

/*-
@var <string[]>
*/
global string $nkCopyPosePromptPoseSettings[];

/*-
@var <int> 設定UIが更新中かどうか。
*/
global int $nkCopyPosePromptIsUIUpdating;

/*-
@var <int[]> プロンプトを閉じる際に初期化用の設定値を更新するかどうか。
*/
global int $nkCopyPosePromptNeedUpdateInitSetting[];

/*-
@returns <>
*/
proc initializePromptVariables() {
  global string $nkCopyPosePromptPoseName;
  global string $nkCopyPosePromptNodes[];
  global string $nkCopyPosePromptPoseSettings[];
  global int $nkCopyPosePromptIsUIUpdating;
  global int $nkCopyPosePromptNeedUpdateInitSetting[];
  $nkCopyPosePromptPoseName = "";
  clear $nkCopyPosePromptNodes;
  clear $nkCopyPosePromptPoseSettings;
  $nkCopyPosePromptIsUIUpdating = false;
  $nkCopyPosePromptNeedUpdateInitSetting = {false, false, false};
}

// -----------------------------------------------------------------------------
// UIコントロールイベント
// -----------------------------------------------------------------------------
/*-
@param $input <string>
@returns <string>
*/
proc string sanitizeText(string $input) {
  $input = substituteAllString($input, "=", "_");
  $input = substituteAllString($input, ";", "_");
  $input = substituteAllString($input, "[", "_");
  $input = substituteAllString($input, "]", "_");
  $input = substituteAllString($input, "/", "_");
  $input = substituteAllString($input, ",", "_");
  return $input;
}

/*-
@param $index <int>
@returns <string>
*/
proc string generateNodeListLabel(int $index) {
  global string $nkCopyPosePromptNodes[];
  global string $nkCopyPosePromptPoseSettings[];
  string $label = "[" + $nkCopyPosePromptPoseSettings[$index] + "] ";
  $label += $nkCopyPosePromptNodes[$index];
  return $label;
}

/*-
@param $partial <int> 選択した項目のみを更新するかどうか。
@returns <>
*/
proc updateNodeList(int $partial) {
  print("updateNodeList\n");
  print("  partial:" + $partial + "\n");
  global string $nkCopyPosePromptNodes[];
  global string $nkCopyPosePromptPoseSettings[];
  string $nodeList = nkUIGetControl("layoutDialog", "nodeList");
  int $selectedIndices[] = textScrollListGetSelectIndexedItems($nodeList);
  print("  selectedIndices:{" + intArrayToString($selectedIndices, ", ") + "}\n");
  int $numTransforms = minStringArrayCount(
    $nkCopyPosePromptNodes,
    $nkCopyPosePromptPoseSettings
  );
  if ($partial) {
    for ($i = `size $selectedIndices` - 1; $i >= 0; $i--) {
      int $index = $selectedIndices[$i];
      $label = generateNodeListLabel($index - 1);
      textScrollListRemoveIndexedItem($index, $nodeList);
      textScrollListAppendPosition($index, $label, $nodeList);
    }
  }
  else {
    textScrollListRemoveAll($nodeList);
    for ($i = 0; $i < $numTransforms; $i++) {
      $label = generateNodeListLabel($i);
      textScrollListAppend($label, $nodeList);
    }
  }
  textScrollListSetSelectIndexedItems($selectedIndices, $nodeList);
}

/*-
@param $id <int>
@returns <>
*/
proc updatePoseSettings(int $id) {
  print("updatePoseSettings\n");
  print("  id:" + $id + "\n");
  global string $nkCopyPosePromptNodes[];
  global string $nkCopyPosePromptPoseSettings[];
  global int $nkCopyPosePromptIsUIUpdating;

  // 設定UIの更新中はポーズ設定を更新しない
  print("  nkCopyPosePromptIsUIUpdating:" + $nkCopyPosePromptIsUIUpdating + "\n");
  if ($nkCopyPosePromptIsUIUpdating) return;

  string $nodeList = nkUIGetControl("layoutDialog", "nodeList");
  string $pasteAttributesCheckBoxGrp = nkUIGetControl("layoutDialog", "pasteAttributesCheckBoxGrp");
  string $selectPatternAText = nkUIGetControl("layoutDialog", "selectPatternAText");
  string $selectPatternBText = nkUIGetControl("layoutDialog", "selectPatternBText");
  string $mirrorAxisRadioButton = nkUIGetControl("layoutDialog", "mirrorAxisRadioButton");
  string $primaryAxisRadioButton = nkUIGetControl("layoutDialog", "primaryAxisRadioButton");
  string $secondaryAxisRadioButton = nkUIGetControl("layoutDialog", "secondaryAxisRadioButton");
  string $invertAxisCheckBoxGrp = nkUIGetControl("layoutDialog", "invertAxisCheckBoxGrp");

  int $pasteSetting[] = checkBoxGrpGetValues(3, $pasteAttributesCheckBoxGrp);
  string $selectSetting[] = {
    sanitizeText(textFieldGrpGetText($selectPatternAText)),
    sanitizeText(textFieldGrpGetText($selectPatternBText))
  };
  int $invertAxisValues[] = checkBoxGrpGetValues(2, $invertAxisCheckBoxGrp);
  int $mirrorSetting[] = {
    radioButtonGrpGetSelect($mirrorAxisRadioButton) - 1,
    radioButtonGrpGetSelect($primaryAxisRadioButton) - 1,
    radioButtonGrpGetSelect($secondaryAxisRadioButton) - 1,
    $invertAxisValues[0],
    $invertAxisValues[1]
  };
  print("  pasteSetting :{" + intArrayToString($pasteSetting, ", ") + "}\n");
  print("  selectSetting:{" + stringArrayToString($selectSetting, ", ") + "}\n");
  print("  mirrorSetting:{" + intArrayToString($mirrorSetting, ", ") + "}\n");

  int $selectedIndices[] = textScrollListGetSelectIndexedItems($nodeList);
  print("  selectedIndices:{" + intArrayToString($selectedIndices, ", ") + "}\n");
  for ($selectedIndex in $selectedIndices) {
    int $i = $selectedIndex - 1;

    string $newPoseSetting = $nkCopyPosePromptPoseSettings[$i];
    print("    newPoseSetting:" + $newPoseSetting + "\n");
    int $newPasteSetting[] = extractPasteSetting($newPoseSetting);
    string $newSelectSetting[] = extractSelectSetting($newPoseSetting);
    int $newMirrorSetting[] = extractMirrorSetting($newPoseSetting);
    print("  newPasteSetting :{" + intArrayToString($newPasteSetting, ", ") + "}\n");
    print("  newSelectSetting:{" + stringArrayToString($newSelectSetting, ", ") + "}\n");
    print("  newMirrorSetting:{" + intArrayToString($newMirrorSetting, ", ") + "}\n");

    switch ($id) {
      case 0: $newPasteSetting[0] = $pasteSetting[0]; break;
      case 1: $newPasteSetting[1] = $pasteSetting[1]; break;
      case 2: $newPasteSetting[2] = $pasteSetting[2]; break;
      case 3: $newSelectSetting[0] = $selectSetting[0]; break;
      case 4: $newSelectSetting[1] = $selectSetting[1]; break;
      case 5: $newMirrorSetting[0] = $mirrorSetting[0]; break;
      case 6: $newMirrorSetting[1] = $mirrorSetting[1]; break;
      case 7: $newMirrorSetting[2] = $mirrorSetting[2]; break;
      case 8: $newMirrorSetting[3] = $mirrorSetting[3]; break;
      case 9: $newMirrorSetting[4] = $mirrorSetting[4]; break;
      default: break;
    }

    $nkCopyPosePromptPoseSettings[$i] = buildPoseSetting(
      $newPasteSetting, $newSelectSetting, $newMirrorSetting
    );
  }
  updateNodeList(true);
}

/*-
@param $pasteSetting <int[]>
@returns <>
*/
proc updatePasteSettingUI(int $pasteSetting[]) {
  print("updatePasteSettingUI\n");
  print("  pasteSetting:{" + intArrayToString($pasteSetting, ", ") + "}\n");
  global int $nkCopyPosePromptNeedUpdateInitSetting[];
  string $pasteAttributesCheckBoxGrp = nkUIGetControl("layoutDialog", "pasteAttributesCheckBoxGrp");
  int $isSelected = `size $pasteSetting`;
  checkBoxGrpSetEnable($isSelected, $pasteAttributesCheckBoxGrp);
  if ($isSelected) {
    checkBoxGrpSetValues($pasteSetting, $pasteAttributesCheckBoxGrp);
  }
  if (!$nkCopyPosePromptNeedUpdateInitSetting[0] && $isSelected) {
    $nkCopyPosePromptNeedUpdateInitSetting[0] = true;
  }
}

/*-
@param $selectSetting <string[]>
@returns <>
*/
proc updateSelectSettingUI(string $selectSetting[]) {
  print("updateSelectSettingUI\n");
  print("  selectSetting:{" + stringArrayToString($selectSetting, ", ") + "}\n");
  global int $nkCopyPosePromptNeedUpdateInitSetting[];
  string $selectPatternAText = nkUIGetControl("layoutDialog", "selectPatternAText");
  string $selectPatternBText = nkUIGetControl("layoutDialog", "selectPatternBText");
  int $isSelected = `size $selectSetting`;
  textFieldGrpSetEnable($isSelected, $selectPatternAText);
  textFieldGrpSetEnable($isSelected, $selectPatternBText);
  if ($isSelected) {
    textFieldGrpSetText($selectSetting[0], $selectPatternAText);
    textFieldGrpSetText($selectSetting[1], $selectPatternBText);
  }
  if (!$nkCopyPosePromptNeedUpdateInitSetting[1] && $isSelected) {
    $nkCopyPosePromptNeedUpdateInitSetting[1] = true;
  }
}

/*-
@param $mirrorSetting <int[]>
@returns <>
*/
proc updateMirrorSettingUI(int $mirrorSetting[]) {
  print("updateMirrorSettingUI\n");
  print("  mirrorSetting:{" + intArrayToString($mirrorSetting, ", ") + "}\n");
  global int $nkCopyPosePromptNeedUpdateInitSetting[];
  string $mirrorAxisRadioButton = nkUIGetControl("layoutDialog", "mirrorAxisRadioButton");
  string $primaryAxisRadioButton = nkUIGetControl("layoutDialog", "primaryAxisRadioButton");
  string $secondaryAxisRadioButton = nkUIGetControl("layoutDialog", "secondaryAxisRadioButton");
  string $invertAxisCheckBoxGrp = nkUIGetControl("layoutDialog", "invertAxisCheckBoxGrp");
  int $isSelected = `size $mirrorSetting`;
  radioButtonGrpSetEnable($isSelected, $mirrorAxisRadioButton);
  radioButtonGrpSetEnable($isSelected, $primaryAxisRadioButton);
  radioButtonGrpSetEnable($isSelected, $secondaryAxisRadioButton);
  checkBoxGrpSetEnable($isSelected, $invertAxisCheckBoxGrp);
  if ($isSelected) {
    radioButtonGrpSetSelect($mirrorSetting[0] + 1, $mirrorAxisRadioButton);
    radioButtonGrpSetSelect($mirrorSetting[1] + 1, $primaryAxisRadioButton);
    radioButtonGrpSetSelect($mirrorSetting[2] + 1, $secondaryAxisRadioButton);
    checkBoxGrpSetValues(
      {$mirrorSetting[3], $mirrorSetting[4]},
      $invertAxisCheckBoxGrp
    );
  }
  if (!$nkCopyPosePromptNeedUpdateInitSetting[2] && $isSelected) {
    $nkCopyPosePromptNeedUpdateInitSetting[2] = true;
  }
}

/*-
@returns <>
*/
proc poseNameTextChanged() {
  print("poseNameTextChanged\n");
  global string $nkCopyPosePromptPoseName;
  string $poseNameText = nkUIGetControl("layoutDialog", "poseNameText");
  string $currentText = textFieldGrpGetText($poseNameText);
  string $sanitizedText = sanitizeText($currentText);
  if ($sanitizedText != $currentText) {
    int $position = textFieldGrpGetInsertionPosition($poseNameText);
    if (!`size $sanitizedText`) {
      $sanitizedText = "_";
      $position = 0;
    }
    if (`size $sanitizedText` < $position) {
      $position = 0;
    }
    textFieldGrpSetText($sanitizedText, $poseNameText);
    textFieldGrpSetInsertionPosition($position, $poseNameText);
  }
  $nkCopyPosePromptPoseName = $sanitizedText;
}

/*-
@returns <>
*/
proc nodeListSelected() {
  print("nodeListSelected\n");
  global string $nkCopyPosePromptPoseSettings[];
  global int $nkCopyPosePromptIsUIUpdating;

  string $nodeList = nkUIGetControl("layoutDialog", "nodeList");
  int $selectedIndices[] = textScrollListGetSelectIndexedItems($nodeList);
  print("  selectedIndices:{" + intArrayToString($selectedIndices, ", ") + "}\n");
  int $pasteSetting[];
  string $selectSetting[];
  int $mirrorSetting[];
  if (`size $selectedIndices`) {
    string $poseSetting = $nkCopyPosePromptPoseSettings[$selectedIndices[0] - 1];
    $pasteSetting = extractPasteSetting($poseSetting);
    $selectSetting = extractSelectSetting($poseSetting);
    $mirrorSetting = extractMirrorSetting($poseSetting);
  }
  print("  pasteSetting :{" + intArrayToString($pasteSetting, ", ") + "}\n");
  print("  selectSetting:{" + stringArrayToString($selectSetting, ", ") + "}\n");
  print("  mirrorSetting:{" + intArrayToString($mirrorSetting, ", ") + "}\n");

  $nkCopyPosePromptIsUIUpdating = true;
  updatePasteSettingUI($pasteSetting);
  updateSelectSettingUI($selectSetting);
  updateMirrorSettingUI($mirrorSetting);
  $nkCopyPosePromptIsUIUpdating = false;
}

/*-
@returns <>
*/
proc pasteAttributesCheckBoxGrp1Changed() {
  print("pasteAttributesCheckBoxGrp1Changed\n");
  updatePoseSettings(0);
}

/*-
@returns <>
*/
proc pasteAttributesCheckBoxGrp2Changed() {
  print("pasteAttributesCheckBoxGrp2Changed\n");
  updatePoseSettings(1);
}

/*-
@returns <>
*/
proc pasteAttributesCheckBoxGrp3Changed() {
  print("pasteAttributesCheckBoxGrp3Changed\n");
  updatePoseSettings(2);
}

/*-
@returns <>
*/
proc selectPatternATextChanged() {
  print("selectPatternATextChanged\n");
  string $selectPatternAText = nkUIGetControl("layoutDialog", "selectPatternAText");
  string $currentText = textFieldGrpGetText($selectPatternAText);
  string $sanitizedText = sanitizeText($currentText);
  if ($sanitizedText != $currentText) {
    int $position = textFieldGrpGetInsertionPosition($selectPatternAText);
    if (!`size $sanitizedText`) {
      $sanitizedText = "_";
      $position = 0;
    }
    if (`size $sanitizedText` < $position) {
      $position = 0;
    }
    textFieldGrpSetText($sanitizedText, $selectPatternAText);
    textFieldGrpSetInsertionPosition($position, $selectPatternAText);
  }
  updatePoseSettings(3);
}

/*-
@returns <>
*/
proc selectPatternBTextChanged() {
  print("selectPatternBTextChanged\n");
  string $selectPatternBText = nkUIGetControl("layoutDialog", "selectPatternBText");
  string $currentText = textFieldGrpGetText($selectPatternBText);
  string $sanitizedText = sanitizeText($currentText);
  if ($sanitizedText != $currentText) {
    int $position = textFieldGrpGetInsertionPosition($selectPatternBText);
    if (!`size $sanitizedText`) {
      $sanitizedText = "_";
      $position = 0;
    }
    if (`size $sanitizedText` < $position) {
      $position = 0;
    }
    textFieldGrpSetText($sanitizedText, $selectPatternBText);
    textFieldGrpSetInsertionPosition($position, $selectPatternBText);
  }
  updatePoseSettings(4);
}

/*-
@returns <>
*/
proc mirrorAxisRadioButtonOn() {
  print("mirrorAxisRadioButtonOn\n");
  updatePoseSettings(5);
}

/*-
@returns <>
*/
proc primaryAxisRadioButtonOn() {
  print("primaryAxisRadioButtonOn\n");
  string $primaryAxisRadioButton = nkUIGetControl("layoutDialog", "primaryAxisRadioButton");
  string $secondaryAxisRadioButton = nkUIGetControl("layoutDialog", "secondaryAxisRadioButton");
  int $primaryAxisSelect = radioButtonGrpGetSelect($primaryAxisRadioButton);
  int $secondaryAxisSelect = radioButtonGrpGetSelect($secondaryAxisRadioButton);
  updatePoseSettings(6);
  if ($primaryAxisSelect == $secondaryAxisSelect) {
    $secondaryAxisSelect = $primaryAxisSelect + 1;
    if ($secondaryAxisSelect > 3) {
      $secondaryAxisSelect = 1;
    }
    radioButtonGrpSetSelect($secondaryAxisSelect, $secondaryAxisRadioButton);
    // ラジオボタンはコマンド操作でイベントが発生しないのでこちら側で更新する
    updatePoseSettings(7);
  }
}

/*-
@returns <>
*/
proc secondaryAxisRadioButtonOn() {
  print("secondaryAxisRadioButtonOn\n");
  string $primaryAxisRadioButton = nkUIGetControl("layoutDialog", "primaryAxisRadioButton");
  string $secondaryAxisRadioButton = nkUIGetControl("layoutDialog", "secondaryAxisRadioButton");
  int $primaryAxisSelect = radioButtonGrpGetSelect($primaryAxisRadioButton);
  int $secondaryAxisSelect = radioButtonGrpGetSelect($secondaryAxisRadioButton);
  updatePoseSettings(7);
  if ($primaryAxisSelect == $secondaryAxisSelect) {
    $primaryAxisSelect = $secondaryAxisSelect - 1;
    if ($primaryAxisSelect < 1) {
      $primaryAxisSelect = 3;
    }
    radioButtonGrpSetSelect($primaryAxisSelect, $primaryAxisRadioButton);
    // ラジオボタンはコマンド操作でイベントが発生しないのでこちら側で更新する
    updatePoseSettings(6);
  }
}

/*-
@returns <>
*/
proc invertAxisCheckBoxGrp1Changed() {
  print("invertAxisCheckBoxGrp1Changed\n");
  updatePoseSettings(8);
}

/*-
@returns <>
*/
proc invertAxisCheckBoxGrp2Changed() {
  print("invertAxisCheckBoxGrp2Changed\n");
  updatePoseSettings(9);
}

/*-
@returns <>
*/
proc okButtonPressed() {
  print("okButtonPressed\n");
  global int $nkCopyPoseInitPasteSetting[];
  global string $nkCopyPoseInitSelectSetting[];
  global int $nkCopyPoseInitMirrorSetting[];
  global int $nkCopyPosePromptNeedUpdateInitSetting[];
  print("  nkCopyPosePromptNeedUpdateInitSetting:{" + intArrayToString($nkCopyPosePromptNeedUpdateInitSetting, ", ") + "}\n");

  if ($nkCopyPosePromptNeedUpdateInitSetting[0]) {
    string $pasteAttributesCheckBoxGrp = nkUIGetControl("layoutDialog", "pasteAttributesCheckBoxGrp");
    $nkCopyPoseInitPasteSetting = checkBoxGrpGetValues(
      3, $pasteAttributesCheckBoxGrp
    );
  }

  if ($nkCopyPosePromptNeedUpdateInitSetting[1]) {
    string $selectPatternAText = nkUIGetControl("layoutDialog", "selectPatternAText");
    string $selectPatternBText = nkUIGetControl("layoutDialog", "selectPatternBText");
    $nkCopyPoseInitSelectSetting = {
      sanitizeText(textFieldGrpGetText($selectPatternAText)),
      sanitizeText(textFieldGrpGetText($selectPatternBText))
    };
  }

  if ($nkCopyPosePromptNeedUpdateInitSetting[2]) {
    string $mirrorAxisRadioButton = nkUIGetControl("layoutDialog", "mirrorAxisRadioButton");
    string $primaryAxisRadioButton = nkUIGetControl("layoutDialog", "primaryAxisRadioButton");
    string $secondaryAxisRadioButton = nkUIGetControl("layoutDialog", "secondaryAxisRadioButton");
    string $invertAxisCheckBoxGrp = nkUIGetControl("layoutDialog", "invertAxisCheckBoxGrp");
    int $invertAxisValues[] = checkBoxGrpGetValues(2, $invertAxisCheckBoxGrp);
    $nkCopyPoseInitMirrorSetting = {
      radioButtonGrpGetSelect($mirrorAxisRadioButton) - 1,
      radioButtonGrpGetSelect($primaryAxisRadioButton) - 1,
      radioButtonGrpGetSelect($secondaryAxisRadioButton) - 1,
      $invertAxisValues[0],
      $invertAxisValues[1]
    };
  }

  layoutDialog -dis "OK";
}

/*-
@returns <>
*/
proc cancelButtonPressed() {
  print("cancelButtonPressed\n");
  layoutDialog -dis "Cancel";
}

/*-
@returns <>
*/
proc updatePoseList() {
  print("updatePoseList\n");
  string $poseList = nkUIGetControl("nkCopyPoseWindow", "poseList");
  int $selectedIndex = textScrollListGetSelectIndexedItem($poseList);
  print("  selectedIndex:" + $selectedIndex + "\n");
  string $poseNames[] = getPoseNames();
  int $numPoseNames = `size $poseNames`;
  textScrollListRemoveAll($poseList);
  for ($poseName in $poseNames) {
    textScrollListAppend($poseName, $poseList);
  }
  if ($numPoseNames > 0 && $selectedIndex > 0) {
    if ($selectedIndex > $numPoseNames) {
      $selectedIndex = $numPoseNames;
    }
    textScrollListSetSelectIndexedItem($selectedIndex, $poseList);
  }
}

/*-
@param $n <string>
@returns <string>
*/
proc string makePoseName(string $n) {
  string $poseName = $n;
  string $buffer[];
  int $depth = `tokenize $n "|" $buffer`;
  if ($depth > 0) {
    $poseName = (($depth > 1) ? $buffer[0] + "-" : "") + $buffer[$depth - 1];
  }
  return $poseName;
}

/*-
@returns <>
*/
proc nkCopyPoseWindowClosed() {
  print("nkCopyPoseWindowClosed\n");
  nkUIRemoveControls("nkCopyPoseWindow", "");
}

/*-
@returns <>
*/
proc addPoseButtonPressed() {
  print("addPoseButtonPressed\n");
  global int $nkCopyPoseInitPasteSetting[];
  global string $nkCopyPoseInitSelectSetting[];
  global int $nkCopyPoseInitMirrorSetting[];
  print("  nkCopyPoseInitPasteSetting :{" + intArrayToString($nkCopyPoseInitPasteSetting, ", ") + "}\n");
  print("  nkCopyPoseInitSelectSetting:{" + stringArrayToString($nkCopyPoseInitSelectSetting, ", ") + "}\n");
  print("  nkCopyPoseInitMirrorSetting:{" + intArrayToString($nkCopyPoseInitMirrorSetting, ", ") + "}\n");

  global string $nkCopyPosePromptPoseName;
  global string $nkCopyPosePromptNodes[];
  global string $nkCopyPosePromptPoseSettings[];
  initializePromptVariables();

  string $nodes[] = getSelectedNodes();
  print("  nodes:{\n    " + (stringArrayToString($nodes, ",\n    ")) + "\n  }\n");
  int $numNodes = `size $nodes`;
  if (!$numNodes) return;

  $nkCopyPosePromptPoseName = makePoseName($nodes[0]);
  $nkCopyPosePromptNodes = $nodes;
  for ($i = 0; $i < $numNodes; $i++) {
    $nkCopyPosePromptPoseSettings[$i] = buildPoseSetting(
      $nkCopyPoseInitPasteSetting,
      $nkCopyPoseInitSelectSetting,
      $nkCopyPoseInitMirrorSetting
    );
  }
  print("  nkCopyPosePromptPoseName    :" + $nkCopyPosePromptPoseName + "\n");
  print("  nkCopyPosePromptNodes       :{\n    " + stringArrayToString($nkCopyPosePromptNodes, ",\n    ") + "\n  }\n");
  print("  nkCopyPosePromptPoseSettings:{\n    " + stringArrayToString($nkCopyPosePromptPoseSettings, ",\n    ") + "\n  }\n");

  string $result = `layoutDialog
      -p "nkCopyPoseWindow"
      -t "Add Pose"
      -ui "buildPromptWindow"`;

  nkUIRemoveControls("layoutDialog", "");

  print("  result:" + $result + "\n");
  print("    nkCopyPoseInitPasteSetting  :{" + intArrayToString($nkCopyPoseInitPasteSetting, ", ") + "}\n");
  print("    nkCopyPoseInitSelectSetting :{" + stringArrayToString($nkCopyPoseInitSelectSetting, ", ") + "}\n");
  print("    nkCopyPoseInitMirrorSetting :{" + intArrayToString($nkCopyPoseInitMirrorSetting, ", ") + "}\n");
  print("    nkCopyPosePromptPoseName    :" + $nkCopyPosePromptPoseName + "\n");
  print("    nkCopyPosePromptNodes       :{\n      " + stringArrayToString($nkCopyPosePromptNodes, ",\n      ") + "\n    }\n");
  print("    nkCopyPosePromptPoseSettings:{\n      " + stringArrayToString($nkCopyPosePromptPoseSettings, ",\n      ") + "\n    }\n");

  if ($result != "OK") return;

  int $numPoses = addPose(
    $nkCopyPosePromptPoseName,
    $nkCopyPosePromptNodes,
    $nkCopyPosePromptPoseSettings
  );

  updatePoseList();
  string $poseList = nkUIGetControl("nkCopyPoseWindow", "poseList");
  textScrollListSetSelectIndexedItem($numPoses, $poseList);
}

/*-
@returns <>
*/
proc deletePoseButtonPressed() {
  print("deletePoseButtonPressed\n");
  string $poseList = nkUIGetControl("nkCopyPoseWindow", "poseList");
  int $selectedIndex = textScrollListGetSelectIndexedItem($poseList);
  print("  selectedIndex:" + $selectedIndex + "\n");
  if (!$selectedIndex || $selectedIndex > (getNumPoses())) return;
  deletePose($selectedIndex - 1);
  updatePoseList();
}

/*-
@returns <>
*/
proc updatePoseButtonPressed() {
  print("updatePoseButtonPressed\n");
  string $poseList = nkUIGetControl("nkCopyPoseWindow", "poseList");
  int $selectedIndex = textScrollListGetSelectIndexedItem($poseList);
  print("  selectedIndex:" + $selectedIndex + "\n");
  if (!$selectedIndex) return;
  updatePose($selectedIndex - 1);
}

/*-
@returns <>
*/
proc editPoseButtonPressed() {
  print("editPoseButtonPressed\n");
  global int $nkCopyPoseInitPasteSetting[];
  global string $nkCopyPoseInitSelectSetting[];
  global int $nkCopyPoseInitMirrorSetting[];
  print("  nkCopyPoseInitPasteSetting :{" + intArrayToString($nkCopyPoseInitPasteSetting, ", ") + "}\n");
  print("  nkCopyPoseInitSelectSetting:{" + stringArrayToString($nkCopyPoseInitSelectSetting, ", ") + "}\n");
  print("  nkCopyPoseInitMirrorSetting:{" + intArrayToString($nkCopyPoseInitMirrorSetting, ", ") + "}\n");

  global string $nkCopyPosePromptPoseName;
  global string $nkCopyPosePromptNodes[];
  global string $nkCopyPosePromptPoseSettings[];
  initializePromptVariables();

  string $poseList = nkUIGetControl("nkCopyPoseWindow", "poseList");
  int $selectedIndex = textScrollListGetSelectIndexedItem($poseList);
  print("  selectedIndex:" + $selectedIndex + "\n");
  if (!$selectedIndex) return;

  int $poseIndex = $selectedIndex - 1;
  print("  poseIndex:" + $poseIndex + "\n");
  string $pose = getPose($poseIndex);
  if (!`size $pose`) return;

  $nkCopyPosePromptPoseName = extractPoseName($pose);

  string $poseTransforms[] = extractPoseTransforms($pose);
  print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n");
  if (!`size $poseTransforms`) return;

  for ($i = 0; $i < `size $poseTransforms`; $i++) {
    string $poseTransform = $poseTransforms[$i];
    print("  poseTransform:" + $poseTransform + "\n");
    string $node = extractTransformNode($poseTransform);
    print("    node       :" + $node + "\n");
    string $poseSetting = extractPoseSetting($poseTransform);
    print("    poseSetting:" + $poseSetting + "\n");
    $nkCopyPosePromptNodes[$i] = $node;
    $nkCopyPosePromptPoseSettings[$i] = $poseSetting;
  }
  print("  nkCopyPosePromptPoseName    :" + $nkCopyPosePromptPoseName + "\n");
  print("  nkCopyPosePromptNodes       :{\n    " + stringArrayToString($nkCopyPosePromptNodes, ",\n    ") + "\n  }\n");
  print("  nkCopyPosePromptPoseSettings:{\n    " + stringArrayToString($nkCopyPosePromptPoseSettings, ",\n    ") + "\n  }\n");

  string $result = `layoutDialog
      -p "nkCopyPoseWindow"
      -t "Edit Pose"
      -ui "buildPromptWindow"`;

  nkUIRemoveControls("layoutDialog", "");

  print("  result:" + $result + "\n");
  print("    nkCopyPoseInitPasteSetting  :{" + intArrayToString($nkCopyPoseInitPasteSetting, ", ") + "}\n");
  print("    nkCopyPoseInitSelectSetting :{" + stringArrayToString($nkCopyPoseInitSelectSetting, ", ") + "}\n");
  print("    nkCopyPoseInitMirrorSetting :{" + intArrayToString($nkCopyPoseInitMirrorSetting, ", ") + "}\n");
  print("    nkCopyPosePromptPoseName    :" + $nkCopyPosePromptPoseName + "\n");
  print("    nkCopyPosePromptNodes       :{\n      " + stringArrayToString($nkCopyPosePromptNodes, ",\n      ") + "\n    }\n");
  print("    nkCopyPosePromptPoseSettings:{\n      " + stringArrayToString($nkCopyPosePromptPoseSettings, ",\n      ") + "\n    }\n");

  if ($result != "OK") return;

  editPose(
    $poseIndex,
    $nkCopyPosePromptPoseName,
    $nkCopyPosePromptPoseSettings
  );

  updatePoseList();
  textScrollListSetSelectIndexedItem($selectedIndex, $poseList);
}

/*-
@returns <>
*/
proc moveUpPoseButtonPressed() {
  print("moveUpPoseButtonPressed\n");
  string $poseList = nkUIGetControl("nkCopyPoseWindow", "poseList");
  int $selectedIndex = textScrollListGetSelectIndexedItem($poseList);
  print("  selectedIndex:" + $selectedIndex + "\n");
  if ($selectedIndex < 2 || $selectedIndex > (getNumPoses())) return;
  int $newPoseIndex = moveUpPose($selectedIndex - 1);
  updatePoseList();
  textScrollListSetSelectIndexedItem($newPoseIndex + 1, $poseList);
}

/*-
@returns <>
*/
proc moveDownPoseButtonPressed() {
  print("moveDownPoseButtonPressed\n");
  string $poseList = nkUIGetControl("nkCopyPoseWindow", "poseList");
  int $selectedIndex = textScrollListGetSelectIndexedItem($poseList);
  print("  selectedIndex:" + $selectedIndex + "\n");
  if ($selectedIndex < 1 || $selectedIndex >= (getNumPoses())) return;
  int $newPoseIndex = moveDownPose($selectedIndex - 1);
  updatePoseList();
  textScrollListSetSelectIndexedItem($newPoseIndex + 1, $poseList);
}

/*-
@param $isOpposite <boolean>
@returns <>
*/
proc selectButtonPressed(int $isOpposite) {
  print("selectButtonPressed\n");
  print("  isOpposite:" + $isOpposite + "\n");
  string $poseList = nkUIGetControl("nkCopyPoseWindow", "poseList");
  int $selectedIndex = textScrollListGetSelectIndexedItem($poseList);
  print("  selectedIndex:" + $selectedIndex + "\n");
  if (!$selectedIndex) return;
  selectNodes($selectedIndex - 1, $isOpposite);
}

/*-
@param $isOpposite <boolean>
@returns <>
*/
proc pasteButtonPressed(int $isOpposite) {
  print("pasteButtonPressed\n");
  print("  isOpposite:" + $isOpposite + "\n");
  string $poseList = nkUIGetControl("nkCopyPoseWindow", "poseList");
  int $selectedIndex = textScrollListGetSelectIndexedItem($poseList);
  print("  selectedIndex:" + $selectedIndex + "\n");
  if (!$selectedIndex) return;

  string $nodes[] = getSelectedNodes();
  print("  nodes:{\n    " + (stringArrayToString($nodes, ",\n    ")) + "\n  }\n");
  if (!`size $nodes`) return;

  pastePose($selectedIndex - 1, $isOpposite, $nodes);
}

/*-
@returns <>
*/
proc poseListDoubleClicked() {
  print("poseListDoubleClicked\n");
  editPoseButtonPressed();
}

/*-
@param $window <string>
@param $event <string>
@param $control <string>
@returns <>
*/
global proc nkCopyPoseInvokeEvent(
  string $window,
  string $event,
  string $control
) {
  switch ($window) {
    case "layoutDialog":
      switch ($event) {
        case "c":
          switch ($control) {
            case "okButton": okButtonPressed(); break;
            case "cancelButton": cancelButtonPressed(); break;
            default: break;
          }
          break;
        case "cc1":
          switch ($control) {
            case "pasteAttributesCheckBoxGrp": pasteAttributesCheckBoxGrp1Changed(); break;
            case "invertAxisCheckBoxGrp": invertAxisCheckBoxGrp1Changed(); break;
            default: break;
          }
          break;
        case "cc2":
          switch ($control) {
            case "pasteAttributesCheckBoxGrp": pasteAttributesCheckBoxGrp2Changed(); break;
            case "invertAxisCheckBoxGrp": invertAxisCheckBoxGrp2Changed(); break;
            default: break;
          }
          break;
        case "cc3":
          switch ($control) {
            case "pasteAttributesCheckBoxGrp": pasteAttributesCheckBoxGrp3Changed(); break;
            default: break;
          }
          break;
        case "onc":
          switch ($control) {
            case "mirrorAxisRadioButton": mirrorAxisRadioButtonOn(); break;
            case "primaryAxisRadioButton": primaryAxisRadioButtonOn(); break;
            case "secondaryAxisRadioButton": secondaryAxisRadioButtonOn(); break;
            default: break;
          }
          break;
        case "sc":
          switch ($control) {
            case "nodeList": nodeListSelected(); break;
            default: break;
          }
          break;
        case "tcc":
          switch ($control) {
            case "poseNameText": poseNameTextChanged(); break;
            case "selectPatternAText": selectPatternATextChanged(); break;
            case "selectPatternBText": selectPatternBTextChanged(); break;
            default: break;
          }
          break;
        default: break;
      }
      break;
    case "nkCopyPoseWindow":
      switch ($event) {
        case "c":
          switch ($control) {
            case "addPoseButton": addPoseButtonPressed(); break;
            case "deletePoseButton": deletePoseButtonPressed(); break;
            case "updatePoseButton": updatePoseButtonPressed(); break;
            case "editPoseButton": editPoseButtonPressed(); break;
            case "moveUpPoseButton": moveUpPoseButtonPressed(); break;
            case "moveDownPoseButton": moveDownPoseButtonPressed(); break;
            case "selectSourceButton": selectButtonPressed(false); break;
            case "selectOppositeButton": selectButtonPressed(true); break;
            case "pasteSourceButton": pasteButtonPressed(false); break;
            case "pasteOppositeButton": pasteButtonPressed(true); break;
            default: break;
          }
          break;
        case "cc":
          switch ($control) {
            case "nkCopyPoseWindow": nkCopyPoseWindowClosed(); break;
            default: break;
          }
          break;
        case "dcc":
          switch ($control) {
            case "poseList": poseListDoubleClicked(); break;
            default: break;
          }
          break;
      }
      break;
    default: break;
  }
}

// -----------------------------------------------------------------------------
// ウィンドウ定義
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
global proc buildPromptWindow() {
  global string $nkCopyPosePromptPoseName;

  string $outerForm = `setParent -q`;
    string $poseNameText = `textFieldGrp
        -adj 2
        -cat 2 "right" -5
        -cw2 60 10
        -l "Pose Name:"
        -tx $nkCopyPosePromptPoseName
        poseNameText`;
    string $nodeList = `textScrollList -ams true -h 18 nodeList`;
    string $poseSettingColumn = `columnLayout
        -adj true
        -rs 3
        poseSettingColumn`;
      string $pasteFrame = `frameLayout
          -l "Paste"
          -bgs true
          -cll false
          -mh 7
          -mw 7
          pasteFrame`;
        string $pasteColumn = `columnLayout
            -adj true
            -rs 3
            pasteColumn`;
          string $pasteAttributesCheckBoxGrp = `checkBoxGrp
              -cw4 80 60 60 60
              -en false
              -l "Attributes:"
              -la3 "T" "R" "S"
              -ncb 3
              pasteAttributesCheckBoxGrp`;
        setParent ..;
      setParent ..;
      string $selectFrame = `frameLayout
          -l "Select"
          -bgs true
          -cll false
          -mh 7
          -mw 7
          selectFrame`;
        string $selectColumn = `columnLayout
            -adj true
            -rs 3
            selectColumn`;
          string $selectTextForm = `formLayout selectTextForm`;
            string $selectPatternAText = `textFieldGrp
                -adj 2
                -cat 2 "right" -5
                -cw2 16 10
                -en false
                -l "A:"
                selectPatternAText`;
            string $selectPatternBText = `textFieldGrp
                -adj 2
                -cat 2 "right" -5
                -cw2 16 10
                -en false
                -l "B:"
                selectPatternBText`;
          setParent ..;
        setParent ..;
      setParent ..;
      string $mirrorFrame = `frameLayout
          -l "Mirror"
          -bgs true
          -cll false
          -mh 7
          -mw 7
          mirrorFrame`;
        string $mirrorColumn = `columnLayout
            -adj true
            -rs 3
            mirrorColumn`;
          string $mirrorAxisRadioButton = `radioButtonGrp
              // -bgc 0.25 0.25 0.5
              -cw4 80 60 60 60
              -en false
              -l "Mirror Axis:"
              -la3 "X" "Y" "Z"
              -nrb 3
              mirrorAxisRadioButton`;
          string $primaryAxisRadioButton = `radioButtonGrp
              // -bgc 0.25 0.25 0.5
              -cw4 80 60 60 60
              -en false
              -l "Primary Axis:"
              -la3 "X" "Y" "Z"
              -nrb 3
              primaryAxisRadioButton`;
          string $secondaryAxisRadioButton = `radioButtonGrp
              // -bgc 0.25 0.25 0.5
              -cw4 80 60 60 60
              -en false
              -l "Secondary Axis:"
              -la3 "X" "Y" "Z"
              -nrb 3
              secondaryAxisRadioButton`;
          string $invertAxisCheckBoxGrp = `checkBoxGrp
              -cw3 80 60 60
              -en false
              -l "Invert Axis:"
              -la2 "Primary" "Secondary"
              -ncb 2
              invertAxisCheckBoxGrp`;
        setParent ..;
      setParent ..;
    setParent ..;

    string $buttonsForm = `formLayout buttonsForm`;
      string $okButton = `button -h 26 -l "OK" okButton`;
      string $cancelButton = `button -h 26 -l "Cancel" cancelButton`;
    setParent ..;

  formLayout -e
      -af $poseNameText "top" 5
      -af $poseNameText "left" 5
      -af $poseNameText "right" 5
      -ac $nodeList "top" 3 $poseNameText
      -af $nodeList "left" 3
      -af $nodeList "right" 3
      -ac $nodeList "bottom" 3 $poseSettingColumn
      -af $poseSettingColumn "left" 3
      -af $poseSettingColumn "right" 3
      -ac $poseSettingColumn "bottom" 3 $buttonsForm
      -af $buttonsForm "left" 5
      -af $buttonsForm "right" 5
      -af $buttonsForm "bottom" 5
      $outerForm;

  formLayout -e
      -af $selectPatternAText "top" 0
      -af $selectPatternAText "left" 0
      -ap $selectPatternAText "right" 0 50
      -af $selectPatternBText "top" 0
      -ap $selectPatternBText "left" 0 50
      -af $selectPatternBText "right" 0
      $selectTextForm;

  formLayout -e
      -af $okButton "top" 2
      -af $okButton "left" 0
      -ap $okButton "right" 2 50
      -af $okButton "bottom" 0
      -af $cancelButton "top" 2
      -ap $cancelButton "left" 2 50
      -af $cancelButton "right" 0
      -af $cancelButton "bottom" 0
      $buttonsForm;

  textFieldGrp -e -tcc "nkCopyPoseInvokeEvent(\"layoutDialog\", \"tcc\", \"poseNameText\");" $poseNameText;
  textScrollList -e -sc "nkCopyPoseInvokeEvent(\"layoutDialog\", \"sc\", \"nodeList\");" $nodeList;

  checkBoxGrp -e -cc1 "nkCopyPoseInvokeEvent(\"layoutDialog\", \"cc1\", \"pasteAttributesCheckBoxGrp\");" $pasteAttributesCheckBoxGrp;
  checkBoxGrp -e -cc2 "nkCopyPoseInvokeEvent(\"layoutDialog\", \"cc2\", \"pasteAttributesCheckBoxGrp\");" $pasteAttributesCheckBoxGrp;
  checkBoxGrp -e -cc3 "nkCopyPoseInvokeEvent(\"layoutDialog\", \"cc3\", \"pasteAttributesCheckBoxGrp\");" $pasteAttributesCheckBoxGrp;

  textFieldGrp -e -tcc "nkCopyPoseInvokeEvent(\"layoutDialog\", \"tcc\", \"selectPatternAText\");" $selectPatternAText;
  textFieldGrp -e -tcc "nkCopyPoseInvokeEvent(\"layoutDialog\", \"tcc\", \"selectPatternBText\");" $selectPatternBText;

  radioButtonGrp -e -onc "nkCopyPoseInvokeEvent(\"layoutDialog\", \"onc\", \"mirrorAxisRadioButton\");" $mirrorAxisRadioButton;
  radioButtonGrp -e -onc "nkCopyPoseInvokeEvent(\"layoutDialog\", \"onc\", \"primaryAxisRadioButton\");" $primaryAxisRadioButton;
  radioButtonGrp -e -onc "nkCopyPoseInvokeEvent(\"layoutDialog\", \"onc\", \"secondaryAxisRadioButton\");" $secondaryAxisRadioButton;

  checkBoxGrp -e -cc1 "nkCopyPoseInvokeEvent(\"layoutDialog\", \"cc1\", \"invertAxisCheckBoxGrp\");" $invertAxisCheckBoxGrp;
  checkBoxGrp -e -cc2 "nkCopyPoseInvokeEvent(\"layoutDialog\", \"cc2\", \"invertAxisCheckBoxGrp\");" $invertAxisCheckBoxGrp;

  button -e -c "nkCopyPoseInvokeEvent(\"layoutDialog\", \"c\", \"okButton\");" $okButton;
  button -e -c "nkCopyPoseInvokeEvent(\"layoutDialog\", \"c\", \"cancelButton\");" $cancelButton;

  // print("// " + $outerForm + "\n");
  // print("// " + $poseNameText + "\n");
  // print("// " + $nodeList + "\n");
  // print("// " + $poseSettingColumn + "\n");
  // print("// " + $pasteFrame + "\n");
  // print("// " + $pasteColumn + "\n");
  // print("// " + $pasteAttributesCheckBoxGrp + "\n");
  // print("// " + $selectFrame + "\n");
  // print("// " + $selectColumn + "\n");
  // print("// " + $selectTextForm + "\n");
  // print("// " + $selectPatternAText + "\n");
  // print("// " + $selectPatternBText + "\n");
  // print("// " + $mirrorFrame + "\n");
  // print("// " + $mirrorColumn + "\n");
  // print("// " + $mirrorAxisRadioButton + "\n");
  // print("// " + $primaryAxisRadioButton + "\n");
  // print("// " + $secondaryAxisRadioButton + "\n");
  // print("// " + $invertAxisCheckBoxGrp + "\n");
  // print("// " + $buttonsForm + "\n");
  // print("// " + $okButton + "\n");
  // print("// " + $cancelButton + "\n");

  nkUIAppendControls({
    $poseNameText,
    $nodeList,
    $pasteAttributesCheckBoxGrp,
    $selectPatternAText,
    $selectPatternBText,
    $mirrorAxisRadioButton,
    $primaryAxisRadioButton,
    $secondaryAxisRadioButton,
    $invertAxisCheckBoxGrp
  });

  updateNodeList(false);
}

/*-
@returns <>
*/
proc buildMainWindow() {
  if (`window -ex "nkCopyPoseWindow"` == true) {
    deleteUI "nkCopyPoseWindow";
  }

  string $sourceDirname = getSourceDirname("nkCopyPose");
  string $iconDir = `size $sourceDirname` ? $sourceDirname + "/icons/" : "";
  string $addIcon = $iconDir + "addPose.png";
  string $deleteIcon = $iconDir + "deletePose.png";
  string $updateIcon = $iconDir + "updatePose.png";
  string $editIcon = $iconDir + "editPose.png";
  string $moveUpIcon = $iconDir + "moveUpPose.png";
  string $moveDownIcon = $iconDir + "moveDownPose.png";
  string $selectSourceIcon = $iconDir + "selectSource.png";
  string $selectOppositeIcon = $iconDir + "selectOpposite.png";
  string $pasteSourceIcon = $iconDir + "pasteSource.png";
  string $pasteOppositeIcon = $iconDir + "pasteOpposite.png";
  // print("addIcon           :" + $addIcon + "\n");
  // print("deleteIcon        :" + $deleteIcon + "\n");
  // print("updateIcon        :" + $updateIcon + "\n");
  // print("editIcon          :" + $editIcon + "\n");
  // print("moveUpIcon        :" + $moveUpIcon + "\n");
  // print("moveDownIcon      :" + $moveDownIcon + "\n");
  // print("selectSourceIcon  :" + $selectSourceIcon + "\n");
  // print("selectOppositeIcon:" + $selectOppositeIcon + "\n");
  // print("pasteSourceIcon   :" + $pasteSourceIcon + "\n");
  // print("pasteOppositeIcon :" + $pasteOppositeIcon + "\n");

  string $nkCopyPoseWindow = `window -t ("nkCopyPose " + (nkCopyPoseVersion()))
      -mxb false
      -mnb false
      -s true
      nkCopyPoseWindow`;
    string $outerForm = `formLayout outerForm`;
      string $poseManipRow = `rowLayout
          // -bgc 0.5 0.25 0.25
          -nc 7
          -adj 1
          poseManipRow`;
        separator -st "none" -vis false;
        string $addPoseButton = `iconTextButton
            -ann "Add"
            // -bgc 0.25 0.5 0.5
            -i $addIcon
            -w 23
            addPoseButton`;
        string $deletePoseButton = `iconTextButton
            -ann "Delete"
            // -bgc 0.25 0.5 0.5
            -i $deleteIcon
            -w 23
            deletePoseButton`;
        string $updatePoseButton = `iconTextButton
            -ann "Update"
            // -bgc 0.25 0.5 0.5
            -i $updateIcon
            -w 23
            updatePoseButton`;
        string $editPoseButton = `iconTextButton
            -ann "Edit"
            // -bgc 0.25 0.5 0.5
            -i $editIcon
            -w 23
            editPoseButton`;
        string $moveUpPoseButton = `iconTextButton
            -ann "Move Up"
            // -bgc 0.25 0.5 0.5
            -i $moveUpIcon
            -w 23
            moveUpPoseButton`;
        string $moveDownPoseButton = `iconTextButton
            -ann "Move Down"
            // -bgc 0.25 0.5 0.5
            -i $moveDownIcon
            -w 23
            moveDownPoseButton`;
      setParent ..;

      string $poseList = `textScrollList -ams false poseList`;

      string $nodeManipRow = `rowLayout
          // -bgc 0.5 0.25 0.25
          -nc 6
          -adj 1
          nodeManipRow`;
        separator -st "none" -vis false;
        string $selectSourceButton = `iconTextButton
            -ann "Select Source"
            // -bgc 0.25 0.5 0.5
            -i $selectSourceIcon
            -w 23
            selectSourceButton`;
        string $selectOppositeButton = `iconTextButton
            -ann "Select Opposite"
            // -bgc 0.25 0.5 0.5
            -i $selectOppositeIcon
            -w 23
            selectOppositeButton`;
        separator -st "none" -vis false -w 23;
        string $pasteSourceButton = `iconTextButton
            -ann "As Is Paste"
            // -bgc 0.25 0.5 0.5
            -i $pasteSourceIcon
            -w 23
            pasteSourceButton`;
        string $pasteOppositeButton = `iconTextButton
            -ann "Mirror Paste"
            // -bgc 0.25 0.5 0.5
            -i $pasteOppositeIcon
            -w 23
            pasteOppositeButton`;
      setParent ..;
    setParent ..;

  formLayout -e
      -af $poseManipRow "top" 5
      -af $poseManipRow "left" 3
      -af $poseManipRow "right" 5
      -ac $poseList "top" 5 $poseManipRow
      -af $poseList "left" 5
      -af $poseList "right" 5
      -ac $poseList "bottom" 5 $nodeManipRow
      -af $nodeManipRow "left" 3
      -af $nodeManipRow "right" 5
      -af $nodeManipRow "bottom" 5
      $outerForm;

  window -e -cc "nkCopyPoseInvokeEvent(\"nkCopyPoseWindow\", \"cc\", \"nkCopyPoseWindow\");" $nkCopyPoseWindow;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"nkCopyPoseWindow\", \"c\", \"addPoseButton\");" $addPoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"nkCopyPoseWindow\", \"c\", \"deletePoseButton\");" $deletePoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"nkCopyPoseWindow\", \"c\", \"updatePoseButton\");" $updatePoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"nkCopyPoseWindow\", \"c\", \"editPoseButton\");" $editPoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"nkCopyPoseWindow\", \"c\", \"moveUpPoseButton\");" $moveUpPoseButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"nkCopyPoseWindow\", \"c\", \"moveDownPoseButton\");" $moveDownPoseButton;
  textScrollList -e -dcc "nkCopyPoseInvokeEvent(\"nkCopyPoseWindow\", \"dcc\", \"poseList\");" $poseList;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"nkCopyPoseWindow\", \"c\", \"selectSourceButton\");" $selectSourceButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"nkCopyPoseWindow\", \"c\", \"selectOppositeButton\");" $selectOppositeButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"nkCopyPoseWindow\", \"c\", \"pasteSourceButton\");" $pasteSourceButton;
  iconTextButton -e -c "nkCopyPoseInvokeEvent(\"nkCopyPoseWindow\", \"c\", \"pasteOppositeButton\");" $pasteOppositeButton;

  // print("// " + $nkCopyPoseWindow + "\n");
  // print("// " + $outerForm + "\n");
  // print("// " + $poseManipRow + "\n");
  // print("// " + $addPoseButton + "\n");
  // print("// " + $deletePoseButton + "\n");
  // print("// " + $updatePoseButton + "\n");
  // print("// " + $editPoseButton + "\n");
  // print("// " + $moveUpPoseButton + "\n");
  // print("// " + $moveDownPoseButton + "\n");
  // print("// " + $poseList + "\n");
  // print("// " + $nodeManipRow + "\n");
  // print("// " + $selectSourceButton + "\n");
  // print("// " + $selectOppositeButton + "\n");
  // print("// " + $pasteSourceButton + "\n");
  // print("// " + $pasteOppositeButton + "\n");

  nkUIAppendControls({$poseList});

  updatePoseList();

  setFocus $nkCopyPoseWindow;
  showWindow $nkCopyPoseWindow;
}

// -----------------------------------------------------------------------------
// システムイベント
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
// proc registerScriptJob() {
// }

// -----------------------------------------------------------------------------
// メイン
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc initialize() {
  buildMainWindow();
  // registerScriptJob();
}

/*-
@returns <string>
*/
global proc string nkCopyPoseVersion() {
  return "3.0.2";
}

/*-
@returns <>
*/
global proc nkCopyPose() {
  initialize();
}

/*
eval ("source \"" + `getenv "MAYA_APP_DIR"` + "/library/nkCopyPose/nkCopyPose.mel\"");
nkCopyPose;
*/
