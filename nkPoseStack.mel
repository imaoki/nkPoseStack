/*! © 2023 imaoki | MIT License | https://github.com/imaoki */

// /////////////////////////////////////////////////////////////////////////////
// ボイラープレート
// /////////////////////////////////////////////////////////////////////////////
// 配列
/*1.0.0*/proc int minFloatArrayCount(float $a[], float $b[]) {int $numA = `size $a`;int $numB = `size $b`;return `min $numA $numB`;}proc int minIntArrayCount(int $a[], int $b[]) {int $numA = `size $a`;int $numB = `size $b`;return `min $numA $numB`;}proc int minStringArrayCount(string $a[], string $b[]) {int $numA = `size $a`;int $numB = `size $b`;return `min $numA $numB`;}
// ファイル
/*1.0.0*/proc string escapeStringForPythonAtFile(string $input) {string $escapedText;int $size = `size $input`;for ($i = 1; $i <= $size; $i++) {string $c = `substring $input $i $i`;switch ($c) {case "\\": $escapedText += "\\\\"; break;case "'": $escapedText += "\\'"; break;case "\n": $escapedText += "\\n"; break;case "\r": $escapedText += "\\r"; break;default: $escapedText += $c; break;}}return $escapedText;}proc string getSourceFilename(string $procName) {string $filename;string $thisIs = `whatIs $procName`;string $pattern1 = "^Mel procedure found in: *";string $pattern2 = "^Script found in: *";if (`match $pattern1 $thisIs` != "") {$filename = `substitute $pattern1 $thisIs ""`;}else if (`match $pattern2 $thisIs` != "") {$filename = `substitute $pattern2 $thisIs ""`;}return $filename;}proc string getSourceDirname(string $procName) {return dirname(getSourceFilename($procName));}proc int existsDirname(string $dirname) {return `filetest -d $dirname`;}proc int existsFilename(string $filename) {return `filetest -f $filename`;}proc string[] getDirnames(string $dirname) {string $subDirnames[];string $filenames[] = `getFileList -fld $dirname`;for ($i = 0; $i < `size $filenames`; $i++) {string $subDirname = $dirname + "/" + $filenames[$i];if (existsDirname($subDirname)) {$subDirnames[`size $subDirnames`] = $subDirname;}}$subDirnames = `sort $subDirnames`;return $subDirnames;}proc string[] getFilenames(string $dirname, string $filenamePattern) {string $filenames[] = `getFileList -fs $filenamePattern -fld $dirname`;for ($i = 0; $i < `size $filenames`; $i++) {$filenames[$i] = $dirname + "/" + $filenames[$i];}$filenames = `sort $filenames`;return $filenames;}proc string[] readAllLines(string $filename, string $encoding) {if (!`size $encoding`) $encoding = "utf-8";string $lines[];if (existsFilename($filename)) {python("with open('" + $filename + "', 'r', encoding='" + $encoding + "') as f:" + " lines = tuple(s.rstrip() for s in f.readlines())");$lines = `python("lines")`;}return $lines;}proc string readAllText(string $filename, string $encoding) {if (!`size $encoding`) $encoding = "utf-8";string $text;if (existsFilename($filename)) {python("with open('" + $filename + "', 'r', encoding='" + $encoding + "') as f: text = f.read()");$text = `python("text")`;}return $text;}proc int writeAllText(string $filename, string $encoding, string $input) {string $dirname = dirname($filename);if (!existsDirname($dirname)) return false;$input = escapeStringForPythonAtFile($input);if (!`size $encoding`) $encoding = "utf-8";python("with open('" + $filename + "', 'w', encoding='" + $encoding + "') as f:" + " num = f.write('" + $input + "')");return (`python("num")` > 0);}
// ノード
/*1.0.0*/proc string[] getSelectedNodes() {return `ls -l -sl -typ "joint" -typ "transform"`;}proc string getParentNode(string $n) {string $parent;string $parents[] = `listRelatives -f -p $n`;if (`size $parents` > 0) $parent = $parents[0];return $parent;}
// 数値
/*1.0.0*/proc int isInRangeFloat(float $value, float $min, float $max) {return ($min <= $value && $value <= $max);}proc int isInRangeInt(int $value, int $min, int $max) {return ($min <= $value && $value <= $max);}
// オブザーバ
/*1.0.0*/global string $nkObservers[];proc string escapeStringParam(string $input) {string $escapedText;int $size = `size $input`;for ($i = 1; $i <= $size; $i++) {string $c = `substring $input $i $i`;switch ($c) {case "\\": $escapedText += "\\\\"; break;case "\"": $escapedText += "\\\""; break;case "\n": $escapedText += "\\n"; break;case "\r": $escapedText += "\\r"; break;case "\t": $escapedText += "\\t"; break;default: $escapedText += $c; break;}}return $escapedText;}proc string[] escapeStringParams(string $input[]) {string $escapedArray[];for ($s in $input) {$escapedArray[`size $escapedArray`] = escapeStringParam($s);}return $escapedArray;}proc string floatParamsToString(float $params[]) {string $param = "{";int $numParams = `size $params`;for ($i = 0; $i < $numParams; $i++) {string $floatString = (string) $params[$i];if (!`gmatch $floatString "*.*"`) $floatString += ".0";$param += $floatString + (($i < $numParams - 1) ? ", " : "");}$param += "}";return $param;}proc string intParamsToString(int $params[]) {string $param = "{}";if (`size $param`) {$param = "{" + intArrayToString($params, ", ") + "}";}return $param;}proc string stringParamsToString(string $params[]) {string $param = "{}";if (`size $param`) {$param = "{\"" + stringArrayToString(escapeStringParams($params), "\", \"") + "\"}";}return $param;}proc clearObservers() {global string $nkObservers[];clear $nkObservers;}proc int isValidEvent(string $event) {return (isValidString($event, "^[^;]+$"));}proc int isValidProc(string $proc) {return (isValidString($proc, "^[a-zA-Z\|:\._][a-zA-Z0-9\|:\._]*$"));}proc int isValidObserver(string $observer) {return (isValidString($observer, "^[^;]+;[a-zA-Z\|:\._][a-zA-Z0-9\|:\._]*$"));}proc string makeObserver(string $event, string $proc) {string $observer;if (isValidEvent($event) && isValidProc($proc)) {$observer = $event + ";" + $proc;}return $observer;}proc string extractEvent(string $observer) {string $event;string $buffer[];if (`tokenize $observer ";" $buffer` == 2) {$event = $buffer[0];}return $event;}proc string extractProc(string $observer) {string $proc;string $buffer[];if (`tokenize $observer ";" $buffer` == 2) {$proc = $buffer[1];}return $proc;}proc int findObserver(string $observer) {global string $nkObservers[];int $index = -1;for ($i = 0; $i < `size $nkObservers`; $i++) {if ($observer == $nkObservers[$i]) {$index = $i;break;}}return $index;}proc int existsObserver(string $observer) {return (findObserver($observer) >= 0);}proc string[] getObserverProcs(string $event) {global string $nkObservers[];string $procs[];if (!isValidEvent($event)) return $procs;for ($observer in $nkObservers) {if (extractEvent($observer) == $event) {$procs[`size $procs`] = extractProc($observer);}}return $procs;}proc int subscribe(string $event, string $proc) {global string $nkObservers[];string $observer = makeObserver($event, $proc);if (!isValidObserver($observer)) return false;if (existsObserver($observer)) return false;$nkObservers[`size $nkObservers`] = $observer;return true;}proc int unsubscribe(string $event, string $proc) {global string $nkObservers[];string $observer = makeObserver($event, $proc);if (!isValidObserver($observer)) return false;int $index = findObserver($observer);if ($index < 0) return false;stringArrayRemoveAtIndex($index, $nkObservers);return true;}proc notify(string $event) {string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval $proc;}}}proc notifyFloat(string $event, float $param) {string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval $proc $param;}}}proc notifyInt(string $event, int $param) {string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval $proc $param;}}}proc notifyString(string $event, string $param) {string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval $proc $param;}}}proc notifyFloatArray(string $event, float $params[]) {string $param = floatParamsToString($params);string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval ($proc + "(" + $param + ")");}}}proc notifyIntArray(string $event, int $params[]) {string $param = intParamsToString($params);string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval ($proc + "(" + $param + ")");}}}proc notifyStringArray(string $event, string $params[]) {string $param = stringParamsToString($params);string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval ($proc + "(" + $param + ")");}}}
// クォータニオン
/*1.0.0*/proc int reverseRotateOrder(int $order) {int $reverseOrder[] = {5, 3, 4, 1, 2, 0};return $reverseOrder[$order];}proc float[] eulerToQuat(float $r[], int $order) {float $qx = 0.0;float $qy = 0.0;float $qz = 0.0;float $qw = 1.0;float $rx = `deg_to_rad $r[0]`;float $ry = `deg_to_rad $r[1]`;float $rz = `deg_to_rad $r[2]`;float $cx = cos(0.5 * $rx);float $cy = cos(0.5 * $ry);float $cz = cos(0.5 * $rz);float $sx = sin(0.5 * $rx);float $sy = sin(0.5 * $ry);float $sz = sin(0.5 * $rz);switch ($order) {case 0: $qx = $sx * $cy * $cz + $cx * $sy * $sz;$qy = $cx * $sy * $cz - $sx * $cy * $sz;$qz = $cx * $cy * $sz + $sx * $sy * $cz;$qw = $cx * $cy * $cz - $sx * $sy * $sz;break;case 1: $qx = $sx * $cy * $cz + $cx * $sy * $sz;$qy = $cx * $sy * $cz + $sx * $cy * $sz;$qz = $cx * $cy * $sz - $sx * $sy * $cz;$qw = $cx * $cy * $cz - $sx * $sy * $sz;break;case 2: $qx = $sx * $cy * $cz - $cx * $sy * $sz;$qy = $cx * $sy * $cz + $sx * $cy * $sz;$qz = $cx * $cy * $sz + $sx * $sy * $cz;$qw = $cx * $cy * $cz - $sx * $sy * $sz;break;case 3: $qx = $sx * $cy * $cz - $cx * $sy * $sz;$qy = $cx * $sy * $cz - $sx * $cy * $sz;$qz = $cx * $cy * $sz + $sx * $sy * $cz;$qw = $cx * $cy * $cz + $sx * $sy * $sz;break;case 4: $qx = $sx * $cy * $cz + $cx * $sy * $sz;$qy = $cx * $sy * $cz - $sx * $cy * $sz;$qz = $cx * $cy * $sz - $sx * $sy * $cz;$qw = $cx * $cy * $cz + $sx * $sy * $sz;break;case 5: $qx = $sx * $cy * $cz - $cx * $sy * $sz;$qy = $cx * $sy * $cz + $sx * $cy * $sz;$qz = $cx * $cy * $sz - $sx * $sy * $cz;$qw = $cx * $cy * $cz + $sx * $sy * $sz;break;default: break;}return {$qx, $qy, $qz, $qw};}proc float[] quatToEuler(float $q[], int $order) {float $rx = 0.0;float $ry = 0.0;float $rz = 0.0;float $qx = $q[0];float $qy = $q[1];float $qz = $q[2];float $qw = $q[3];float $sx;float $sy;float $sz;int $unlocked;switch ($order) {case 0: $sy = 2 * $qx * $qz + 2 * $qy * $qw;$unlocked = abs($sy) < 0.9999999;$rx = $unlocked ? atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1) : atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1);$ry = asin($sy);$rz = $unlocked ? atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1) : 0;break;case 1: $sz = 2 * $qx * $qy + 2 * $qz * $qw;$unlocked = abs($sz) < 0.9999999;$rx = $unlocked ? atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1) : 0;$ry = $unlocked ? atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1) : atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1);$rz = asin($sz);break;case 2: $sx = 2 * $qy * $qz + 2 * $qx * $qw;$unlocked = abs($sx) < 0.9999999;$rx = asin($sx);$ry = $unlocked ? atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1) : 0;$rz = $unlocked ? atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1) : atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1);break;case 3: $sz = -(2 * $qx * $qy - 2 * $qz * $qw);$unlocked = abs($sz) < 0.9999999;$rx = $unlocked ? atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1) : atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1);$ry = $unlocked ? atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1) : 0;$rz = asin($sz);break;case 4: $sx = -(2 * $qy * $qz - 2 * $qx * $qw);$unlocked = abs($sx) < 0.9999999;$rx = asin($sx);$ry = $unlocked ? atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1) : atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1);$rz = $unlocked ? atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1) : 0;break;case 5: $sy = -(2 * $qx * $qz - 2 * $qy * $qw);$unlocked = abs($sy) < 0.9999999;$rx = $unlocked ? atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1) : 0;$ry = asin($sy);$rz = $unlocked ? atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1) : atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1);break;default: break;}$rx = `rad_to_deg $rx`;$ry = `rad_to_deg $ry`;$rz = `rad_to_deg $rz`;return {$rx, $ry, $rz};}proc float[] angleAxisToQuat(float $degree, float $axis[]) {float $ha = `deg_to_rad $degree` * 0.5;float $s = sin($ha);float $qx = $axis[0] * $s;float $qy = $axis[1] * $s;float $qz = $axis[2] * $s;float $qw = cos($ha);return {$qx, $qy, $qz, $qw};}proc float[] quatAdd(float $q1[], float $q2[]) {float $q1x = $q1[0];float $q1y = $q1[1];float $q1z = $q1[2];float $q1w = $q1[3];float $q2x = $q2[0];float $q2y = $q2[1];float $q2z = $q2[2];float $q2w = $q2[3];float $qx = $q1x + $q2x;float $qy = $q1y + $q2y;float $qz = $q1z + $q2z;float $qw = $q1w + $q2w;return {$qx, $qy, $qz, $qw};}proc float[] quatSubtract(float $q1[], float $q2[]) {float $q1x = $q1[0];float $q1y = $q1[1];float $q1z = $q1[2];float $q1w = $q1[3];float $q2x = $q2[0];float $q2y = $q2[1];float $q2z = $q2[2];float $q2w = $q2[3];float $qx = $q1x - $q2x;float $qy = $q1y - $q2y;float $qz = $q1z - $q2z;float $qw = $q1w - $q2w;return {$qx, $qy, $qz, $qw};}proc float[] quatMultiply(float $q1[], float $q2[]) {float $q1x = $q1[0];float $q1y = $q1[1];float $q1z = $q1[2];float $q1w = $q1[3];float $q2x = $q2[0];float $q2y = $q2[1];float $q2z = $q2[2];float $q2w = $q2[3];float $qx = $q1x * $q2w + $q1w * $q2x + $q1y * $q2z - $q1z * $q2y;float $qy = $q1y * $q2w + $q1w * $q2y + $q1z * $q2x - $q1x * $q2z;float $qz = $q1z * $q2w + $q1w * $q2z + $q1x * $q2y - $q1y * $q2x;float $qw = $q1w * $q2w - $q1x * $q2x - $q1y * $q2y - $q1z * $q2z;return {$qx, $qy, $qz, $qw};}proc float[] quatInverse(float $q[]) {return {$q[0] * -1, $q[1] * -1, $q[2] * -1, $q[3]};}proc float[] rotateVectorByQuat(float $v[], float $q[]) {float $iq[] = quatInverse($q);float $vq[] = {$v[0], $v[1], $v[2], 0};$vq = quatMultiply(quatMultiply($q, $vq), $iq);return {$vq[0], $vq[1], $vq[2]};}proc float[] quatFlip(float $q[], float $axis[]) {float $flipQ[] = angleAxisToQuat(180.0, $axis);return quatMultiply($flipQ, $q);}
// UIコントロール
/*2.0.0*/global string $nkUIControls[];proc appendUIControls(string $controls[]) {global string $nkUIControls[];for ($control in $controls) {$nkUIControls[`size $nkUIControls`] = $control;}}proc string getUIControl(string $root, string $end) {global string $nkUIControls[];string $path;for ($control in $nkUIControls) {string $buffer[];int $depth = `tokenize $control "|" $buffer`;string $first = ($depth > 0) ? $buffer[0] : "";string $last = ($depth > 0) ? $buffer[$depth - 1] : "";if ($first == $root && $last == $end) {$path = $control;break;}}return $path;}proc removeUIControls(string $root, string $end) {global string $nkUIControls[];string $paths[];for ($control in $nkUIControls) {string $buffer[];int $depth = `tokenize $control "|" $buffer`;string $first = ($depth > 0) ? $buffer[0] : "";string $last = ($depth > 0) ? $buffer[$depth - 1] : "";int $shouldRemove = (!`size $end`) ? $first == $root : $first == $root && $last == $end;if ($shouldRemove) $paths[`size $paths`] = $control;}if (`size $paths` > 0) {$nkUIControls = stringArrayRemove($paths, $nkUIControls);}}proc string uiControlTypeOf(string $control) {string $type = `objectTypeUI $control`;if ($type == "floatingWindow") $type = "window";return $type;}proc int qEnable(string $control) {string $type = uiControlTypeOf($control);if ($type == "window" || $type == "workspaceControl") return true;return `control -q -en $control`;}proc eEnable(int $value, string $control) {string $type = uiControlTypeOf($control);if ($type == "window" || $type == "workspaceControl") return;control -e -en $value $control;}proc int qExists(string $control) {return `control -q -ex $control`;}proc int qVisible(string $control) {return `control -q -vis $control`;}proc eVisible(int $value, string $control) {control -e -vis $value $control;}proc float qFloat(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc eFloat(string $type, string $flag, float $value, string $control) {eval $type "-e" $flag $value $control;}proc int qInt(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc eInt(string $type, string $flag, int $value, string $control) {eval $type "-e" $flag $value $control;}proc string qString(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc eString(string $type, string $flag, string $value, string $control) {eval $type "-e" $flag ("\"" + $value + "\"") $control;}proc float[] qFloatArray(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc int[] qIntArray(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc string[] qStringArray(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc eStringArray(string $type, string $flag, string $values[], string $control) {for ($value in $values) {eString($type, $flag, $value, $control);}}proc eOrderedFloat(string $type, string $flag, float $values[], string $control) {for ($i = 0; $i < `size $values`; $i++) {eFloat($type, ($flag + ($i + 1)), $values[$i], $control);}}proc eOrderedInt(string $type, string $flag, int $values[], string $control) {for ($i = 0; $i < `size $values`; $i++) {eInt($type, ($flag + ($i + 1)), $values[$i], $control);}}proc eOrderedString(string $type, string $flag, string $values[], string $control) {for ($i = 0; $i < `size $values`; $i++) {eString($type, ($flag + ($i + 1)), $values[$i], $control);}}proc int qIndex(string $type, string $flag, string $control) {return (qInt($type, $flag, $control) - 1);}proc eIndex(string $type, string $flag, int $index, string $control) {eInt($type, $flag, ($index + 1), $control);}proc int[] qIndexArray(string $type, string $flag, string $control) {int $indices[] = qIntArray($type, $flag, $control);for ($i = 0; $i < `size $indices`; $i++) $indices[$i] -= 1;return $indices;}proc eIndexArray(string $type, string $flag, int $indices[], string $control) {for ($i in $indices) {eInt($type, $flag, $i + 1, $control);}}proc int qFirstIndex(string $type, string $flag, string $control) {int $indices[] = qIndexArray($type, $flag, $control);return  ((`size $indices`) ? $indices[0] : -1);}proc string qFirstString(string $type, string $flag, string $control) {string $values[] = qStringArray($type, $flag, $control);return  ((`size $values`) ? $values[0] : "");}proc eIntString(string $type, string $flag, int $index, string $value, string $control) {eval $type "-e" $flag $index ("\"" + $value + "\"") $control;}proc eIndexString(string $type, string $flag, int $index, string $value, string $control) {eIntString($type, $flag, $index + 1, $value, $control);}proc executeUIControl(string $type, string $flag, string $control) {eval $type "-e" $flag $control;}proc string getParentableWindow(string $control) {if (uiControlTypeOf($control) == "workspaceControl" && !qInt("workspaceControl", "-fl", $control)) {return "MayaWindow";}else {return $control;}}proc windowClose(string $control) {if (qExists($control)) {string $type = uiControlTypeOf($control);switch ($type) {case "window": deleteUI $control; break;case "workspaceControl": executeUIControl("workspaceControl", "-cl", $control);break;default: break;}}}proc windowPrefRemove(string $type, string $control) {if (qExists($control)) windowClose($control);switch ($type) {case "window": if (qInt("windowPref", "-ex", $control)) {windowPref -r $control;}break;case "workspaceControl": if (qInt("workspaceControlState", "-ex", $control)) {workspaceControlState -r $control;}break;default: break;}}proc string buildWorkspaceControl(string $workspaceControlName,string $label,string $buildProcName,string $buildProcFilename) {string $control = $workspaceControlName;if (!qExists($workspaceControlName)) {string $uiScript = "if (!`exists " + $buildProcName + "`)" + " source \"" + $buildProcFilename + "\"; " + $buildProcName + "();";$control = `workspaceControl -dup false -fl true -l $label -rt false -ui $uiScript$workspaceControlName`;}return $control;}

// /////////////////////////////////////////////////////////////////////////////
// ドメイン
// /////////////////////////////////////////////////////////////////////////////
/*-
@var <string[]>
```ebnf
            pose = '"' , pose_name , "=" , pose_transforms , '"' ;
       pose_name = { any_char - illegal_char }+ ;
 pose_transforms = { pose_transform }+ ;
  pose_transform = transform_header , transform_values , ";" ;
transform_header = transform_node , "[" , pose_setting , "]" ;
  transform_node = "|" , node_name , { "|" , node_name } ;
       node_name = ( letter | "_" ) , { letter | digit | "_" } ;
    pose_setting = paste_setting , "/" , select_setting , "/" , mirror_setting ;
   paste_setting = bool , "," , bool , "," , bool ;
  select_setting = select_pattern , "," , select_pattern ;
  mirror_setting = axis , "," , axis , "," , axis , "," , bool , "," , bool ;
  select_pattern = { letter | digit | "_" | "|" }+ ;
            axis = ? 0-2 ? ;
            bool = ? 0-1 ? ;
transform_values = t , "," , q , "," , s , "," , h ;
               t = number , "," , number , "," , number ;
               q = number , "," , number , "," , number , "," , number ;
               s = number , "," , number , "," , number ;
               h = number , "," , number , "," , number ;
          number = [ "-" ] , ( integer | real ) ;
           digit = ? 0-9 ? ;
          letter = ? a-zA-Z ? ;
    illegal_char = "=" | ";" | "[" | "]" | "/" | "," ;
        any_char = ? Any visible characters ? ;
```
*/
global string $nkPoseStackPoses[];

/*-
@var <boolean[3]>
*/
global int $nkPoseStackInitPasteSetting[];

/*-
@var <string[2]>
*/
global string $nkPoseStackInitSelectSetting[];

/*-
@var <int[5]>
*/
global int $nkPoseStackInitMirrorSetting[];

/*-
@returns <>
*/
proc initializeInitParameters() {
  // print("initializeInitParameters\n"); // debug
  global int $nkPoseStackInitPasteSetting[];
  global string $nkPoseStackInitSelectSetting[];
  global int $nkPoseStackInitMirrorSetting[];
  if (!`size $nkPoseStackInitPasteSetting`) {
    $nkPoseStackInitPasteSetting = {true, true, false};
    // print("  nkPoseStackInitPasteSetting :{" + intArrayToString($nkPoseStackInitPasteSetting, ", ") + "}\n"); // debug
  }
  if (!`size $nkPoseStackInitSelectSetting`) {
    $nkPoseStackInitSelectSetting = {"_L", "_R"};
    // print("  nkPoseStackInitSelectSetting:{" + stringArrayToString($nkPoseStackInitSelectSetting, ", ") + "}\n"); // debug
  }
  if (!`size $nkPoseStackInitMirrorSetting`) {
    $nkPoseStackInitMirrorSetting = {0, 0, 1, false, false};
    // print("  nkPoseStackInitMirrorSetting:{" + intArrayToString($nkPoseStackInitMirrorSetting, ", ") + "}\n"); // debug
  }
}

// -----------------------------------------------------------------------------
// トランスフォーム
// -----------------------------------------------------------------------------
/*-
@param $n <string>
@param $poseSetting <string>
@returns <string>
*/
proc string makeTransformHeader(string $n, string $poseSetting) {
  return ($n + "[" + $poseSetting + "]");
}

/*-
@param $n <string>
@returns <float[13]>
*/
proc float[] makeTransformValues(string $n) {
  // print("makeTransformValues\n"); // debug
  // print("  n:" + $n + "\n"); // debug
  float $values[] = {
    0, 0, 0,
    0, 0, 0, 1,
    1, 1, 1,
    0, 0, 0
  };
  string $type = `nodeType $n`;
  if ($type == "transform" || $type == "joint") {
    float $t[] = `getAttr ($n + ".translate")`;
    float $r[] = `getAttr ($n + ".rotate")`;
    float $s[] = `getAttr ($n + ".scale")`;
    float $h[] = `getAttr ($n + ".shear")`;
    // print("  t :{" + floatArrayToString($t, ", ") + "}\n"); // debug
    // print("  r :{" + floatArrayToString($r, ", ") + "}\n"); // debug
    // print("  s :{" + floatArrayToString($s, ", ") + "}\n"); // debug
    // print("  h :{" + floatArrayToString($h, ", ") + "}\n"); // debug

    int $o = `getAttr ($n + ".rotateOrder")`;
    $o = reverseRotateOrder($o);
    int $oXYZ = reverseRotateOrder(0);

    float $rq[] = eulerToQuat($r, $o);

    float $ra[] = `getAttr ($n + ".rotateAxis")`;
    $ra = eulerToQuat($ra, $oXYZ);

    float $jo[] = {0, 0, 0, 1};
    if (`attributeQuery -n $n -ex "jointOrient"`) {
      $jo = `getAttr ($n + ".jointOrient")`;
      $jo = eulerToQuat($jo, $oXYZ);
    }

    float $q[] = quatMultiply($jo, quatMultiply($ra, $rq));

    // print("  o :" + $o + "\n"); // debug
    // print("  rq:{" + floatArrayToString($rq, ", ") + "}\n"); // debug
    // print("  ra:{" + floatArrayToString($ra, ", ") + "}\n"); // debug
    // print("  jo:{" + floatArrayToString($jo, ", ") + "}\n"); // debug
    // print("  q :{" + floatArrayToString($q, ", ") + "}\n"); // debug

    $values = {
      $t[0], $t[1], $t[2],
      $q[0], $q[1], $q[2], $q[3],
      $s[0], $s[1], $s[2],
      $h[0], $h[1], $h[2]
    };
  }
  return $values;
}

/*-
@param $header <string>
@param $values <float[]>
@returns <string>
*/
proc string makePoseTransform(string $header, float $values[]) {
  return ($header + floatArrayToString($values, ",") + ";");
}

/*-
@param $nodes <string[]>
@param $poseSettings <string[]>
@returns <string[]>
*/
proc string[] makePoseTransforms(string $nodes[], string $poseSettings[]) {
  // print("makePoseTransforms\n"); // debug
  // print("  nodes       :{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  // print("  poseSettings:{\n    " + stringArrayToString($poseSettings, ",\n    ") + "\n  }\n"); // debug
  string $poseTransforms[];
  int $numTransforms = minStringArrayCount($nodes, $poseSettings);
  for ($i = 0; $i < $numTransforms; $i++) {
    string $n = $nodes[$i];
    // print("  n:" + $n + "\n"); // debug
    string $header = makeTransformHeader($n, $poseSettings[$i]);
    float $values[] = makeTransformValues($n);
    string $poseTransform = makePoseTransform($header, $values);
    // print("    poseTransform:" + $poseTransform + "\n"); // debug
    $poseTransforms[$i] = $poseTransform;
  }
  return $poseTransforms;
}

/*-
@param $n <string>
@param $m <float[12]>
@param $shouldSetT <boolean>
@param $shouldSetR <boolean>
@param $shouldSetS <boolean>
@returns <>
*/
proc setTransformAttributes(
  string $n,
  float $m[],
  int $shouldApplyT,
  int $shouldApplyR,
  int $shouldApplyS
) {
  // print("setTransformAttributes\n"); // debug
  // print("  n           :" + $n + "\n"); // debug
  // print("  m           :{" + floatArrayToString($m, ", ") + "}\n"); // debug
  // print("  shouldApplyT:" + $shouldApplyT + "\n"); // debug
  // print("  shouldApplyR:" + $shouldApplyR + "\n"); // debug
  // print("  shouldApplyS:" + $shouldApplyS + "\n"); // debug
  if (`objExists $n` && `size $m` == 12) {
    float $t[] = {$m[0], $m[1], $m[2]};
    float $r[] = {$m[3], $m[4], $m[5]};
    float $s[] = {$m[6], $m[7], $m[8]};
    float $h[] = {$m[9], $m[10], $m[11]};
    // print("  t:{" + floatArrayToString($t, ", ") + "}\n"); // debug
    // print("  r:{" + floatArrayToString($r, ", ") + "}\n"); // debug
    // print("  s:{" + floatArrayToString($s, ", ") + "}\n"); // debug
    // print("  h:{" + floatArrayToString($h, ", ") + "}\n"); // debug

    string $tx = $n + ".tx";
    string $ty = $n + ".ty";
    string $tz = $n + ".tz";
    string $rx = $n + ".rx";
    string $ry = $n + ".ry";
    string $rz = $n + ".rz";
    string $sx = $n + ".sx";
    string $sy = $n + ".sy";
    string $sz = $n + ".sz";

    if ($shouldApplyT) {
      if (!`getAttr -l $tx`) setAttr $tx $t[0];
      if (!`getAttr -l $ty`) setAttr $ty $t[1];
      if (!`getAttr -l $tz`) setAttr $tz $t[2];
    }
    if ($shouldApplyR) {
      if (!`getAttr -l $rx`) setAttr $rx $r[0];
      if (!`getAttr -l $ry`) setAttr $ry $r[1];
      if (!`getAttr -l $rz`) setAttr $rz $r[2];
    }
    if ($shouldApplyS) {
      if (!`getAttr -l $sx`) setAttr $sx $s[0];
      if (!`getAttr -l $sy`) setAttr $sy $s[1];
      if (!`getAttr -l $sz`) setAttr $sz $s[2];
    }
  }
}

/*-
@param $n <string>
@param $m <float[13]>
@returns <float[12]>
*/
proc float[] asIsTransform(string $n, float $m[]) {
  // print("asIsTransform\n"); // debug
  // print("  n :" + $n + "\n"); // debug
  // print("  m :{" + floatArrayToString($m, ", ") + "}\n"); // debug

  float $t[] = {$m[0], $m[1], $m[2]};
  float $q[] = {$m[3], $m[4], $m[5], $m[6]};
  float $s[] = {$m[7], $m[8], $m[9]};
  float $h[] = {$m[10], $m[11], $m[12]};
  // print("  t :{" + floatArrayToString($t, ", ") + "}\n"); // debug
  // print("  q :{" + floatArrayToString($q, ", ") + "}\n"); // debug
  // print("  s :{" + floatArrayToString($s, ", ") + "}\n"); // debug
  // print("  h :{" + floatArrayToString($h, ", ") + "}\n"); // debug

  int $o = `getAttr ($n + ".rotateOrder")`;
  $o = reverseRotateOrder($o);
  int $oXYZ = reverseRotateOrder(0);

  float $ra[] = `getAttr ($n + ".rotateAxis")`;
  $ra = quatInverse(eulerToQuat($ra, $oXYZ));

  float $jo[] = {0, 0, 0, 1};
  if (`attributeQuery -n $n -ex "jointOrient"`) {
    $jo = `getAttr ($n + ".jointOrient")`;
    $jo = quatInverse(eulerToQuat($jo, $oXYZ));
  }

  float $rq[] = quatMultiply($jo, quatMultiply($ra, $q));
  float $r[] = quatToEuler($rq, $o);

  // print("  o :" + $o + "\n"); // debug
  // print("  q :{" + floatArrayToString($q, ", ") + "}\n"); // debug
  // print("  ra:{" + floatArrayToString($ra, ", ") + "}\n"); // debug
  // print("  jo:{" + floatArrayToString($jo, ", ") + "}\n"); // debug
  // print("  rq:{" + floatArrayToString($rq, ", ") + "}\n"); // debug
  // print("  r :{" + floatArrayToString($r, ", ") + "}\n"); // debug

  float $values[] = {
    $t[0], $t[1], $t[2],
    $r[0], $r[1], $r[2],
    $s[0], $s[1], $s[2],
    $h[0], $h[1], $h[2]
  };
  // print("  values:{" + floatArrayToString($values, ", ") + "}\n"); // debug

  return $values;
}

/*-
@param $n <string>
@param $m <float[13]>
@param $hasCommonParent <boolean>
@param $mirrorAxis <int>
@param $primaryAxis <int>
@param $secondaryAxis <int>
@param $invertPrimaryAxis <boolean>
@param $invertSecondaryAxis <boolean>
@returns <float[12]>
*/
proc float[] mirrorTransform(
  string $n,
  float $m[],
  int $hasCommonParent,
  int $mirrorAxis,
  int $primaryAxis,
  int $secondaryAxis,
  int $invertPrimaryAxis,
  int $invertSecondaryAxis
) {
  // print("mirrorTransform\n"); // debug
  // print("  n                  :" + $n + "\n"); // debug
  // print("  m                  :{" + floatArrayToString($m, ", ") + "}\n"); // debug
  // print("  hasCommonParent    :" + $hasCommonParent + "\n"); // debug
  // print("  mirrorAxis         :" + $mirrorAxis + "\n"); // debug
  // print("  primaryAxis        :" + $primaryAxis + "\n"); // debug
  // print("  secondaryAxis      :" + $secondaryAxis + "\n"); // debug
  // print("  invertPrimaryAxis  :" + $invertPrimaryAxis + "\n"); // debug
  // print("  invertSecondaryAxis:" + $invertSecondaryAxis + "\n"); // debug

  float $t[] = {$m[0], $m[1], $m[2]};
  float $q[] = {$m[3], $m[4], $m[5], $m[6]};
  float $s[] = {$m[7], $m[8], $m[9]};
  float $h[] = {$m[10], $m[11], $m[12]};
  // print("  t :{" + floatArrayToString($t, ", ") + "}\n"); // debug
  // print("  q :{" + floatArrayToString($q, ", ") + "}\n"); // debug
  // print("  s :{" + floatArrayToString($s, ", ") + "}\n"); // debug
  // print("  h :{" + floatArrayToString($h, ", ") + "}\n"); // debug

  // 位置のミラーリング
  if ($hasCommonParent) {
    $t[$mirrorAxis] *= -1;
  }
  else {
    if ($invertPrimaryAxis) $t[$primaryAxis] *= -1;
    if ($invertSecondaryAxis) $t[$secondaryAxis] *= -1;
    if ($invertPrimaryAxis == $invertSecondaryAxis) {
      // 第三の軸を反転
      int $usedAxis[];
      $usedAxis[$primaryAxis] = 1;
      $usedAxis[$secondaryAxis] = 1;
      int $i;
      for ($i = 0; $i < 3; $i++) if (!$usedAxis[$i]) break;
      $t[$i] *= -1;
    }
  }

  // 回転のミラーリング
  int $o = `getAttr ($n + ".rotateOrder")`;
  $o = reverseRotateOrder($o);
  int $oXYZ = reverseRotateOrder(0);

  float $ra[] = `getAttr ($n + ".rotateAxis")`;
  $ra = quatInverse(eulerToQuat($ra, $oXYZ));

  float $jo[] = {0, 0, 0, 1};
  if (`attributeQuery -n $n -ex "jointOrient"`) {
    $jo = `getAttr ($n + ".jointOrient")`;
    $jo = quatInverse(eulerToQuat($jo, $oXYZ));
  }

  float $mq[] = $q;
  $mq[$mirrorAxis] *= -1;
  $mq[3] *= -1;
  float $cq[] = quatMultiply($jo, quatMultiply($ra, $mq));

  // print("  o :" + $o + "\n"); // debug
  // print("  q :{" + floatArrayToString($q, ", ") + "}\n"); // debug
  // print("  ra:{" + floatArrayToString($ra, ", ") + "}\n"); // debug
  // print("  jo:{" + floatArrayToString($jo, ", ") + "}\n"); // debug
  // print("  mq:{" + floatArrayToString($mq, ", ") + "}\n"); // debug

  // ソースとターゲットの親が異なる場合は親ノードの反転をリセットしておく
  if (!$hasCommonParent) {
    if ($mirrorAxis == $primaryAxis || $mirrorAxis == $secondaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      if ($mirrorAxis == $primaryAxis) {
        $flipAxis[$secondaryAxis] = 1;
      }
      else if ($mirrorAxis == $secondaryAxis) {
        $flipAxis[$primaryAxis] = 1;
      }
      $cq = quatFlip($cq, $flipAxis);
    }
    if ($invertPrimaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      $flipAxis[$secondaryAxis] = 1;
      $cq = quatFlip($cq, $flipAxis);
    }
    if ($invertSecondaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      $flipAxis[$primaryAxis] = 1;
      $cq = quatFlip($cq, $flipAxis);
    }
  }

  // プライマリとセカンダリを対称化するための反転
  if ($mirrorAxis == $primaryAxis || $mirrorAxis == $secondaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    if ($mirrorAxis == $primaryAxis) {
      $flipAxis[$secondaryAxis] = 1;
    }
    else if ($mirrorAxis == $secondaryAxis) {
      $flipAxis[$primaryAxis] = 1;
    }
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }

  // 任意の反転
  if ($invertPrimaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    $flipAxis[$secondaryAxis] = 1;
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }
  if ($invertSecondaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    $flipAxis[$primaryAxis] = 1;
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }

  float $r[] = quatToEuler($cq, $o);
  // print("  cq:{" + floatArrayToString($cq, ", ") + "}\n"); // debug
  // print("  r :{" + floatArrayToString($r, ", ") + "}\n"); // debug

  float $values[] = {
    $t[0], $t[1], $t[2],
    $r[0], $r[1], $r[2],
    $s[0], $s[1], $s[2],
    $h[0], $h[1], $h[2]
  };
  // print("  values:{" + floatArrayToString($values, ", ") + "}\n"); // debug

  return $values;
}

// -----------------------------------------------------------------------------
// データ変換
// -----------------------------------------------------------------------------
/*-
@param $pasteSetting <boolean[3]>
@param $selectSetting <string[2]>
@param $mirrorSetting <int[5]>
@returns <string>
*/
proc string makePoseSetting(
  int $pasteSetting[],
  string $selectSetting[],
  int $mirrorSetting[]
) {
  string $poseSetting = intArrayToString($pasteSetting, ",");
  $poseSetting += "/" + stringArrayToString($selectSetting, ",");
  $poseSetting += "/" + intArrayToString($mirrorSetting, ",");
  return $poseSetting;
}

/*-
@param $poseName <string>
@param $poseTransforms <string[]>
@returns <string>
*/
proc string makePose(
  string $poseName,
  string $poseTransforms[]
) {
  string $pose = $poseName + "=";
  for ($poseTransform in $poseTransforms) {
    $pose += $poseTransform;
  }
  return $pose;
}

/*-
@param $pose <string>
@returns <string>
*/
proc string extractPoseName(string $pose) {
  string $poseName;
  string $buffer[];
  if (`tokenize $pose "=" $buffer` == 2) {
    $poseName = $buffer[0];
  }
  return $poseName;
}

/*-
@param $pose <string>
@returns <string[]>
*/
proc string[] extractPoseTransforms(string $pose) {
  string $poseTransforms[];
  string $buffer1[];
  if (`tokenize $pose "=" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[1] ";" $buffer2` > 0) {
      $poseTransforms = $buffer2;
    }
  }
  return $poseTransforms;
}

/*-
@param $poseTransform <string>
@returns <string[2]>
*/
proc string[] extractTransformHeader(string $poseTransform) {
  string $header[];
  string $buffer1[];
  if (`tokenize $poseTransform "]" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[0] "[" $buffer2` == 2) {
      $header = $buffer2;
    }
  }
  return $header;
}

/*-
@param $poseTransform <string>
@returns <string>
*/
proc string extractTransformNode(string $poseTransform) {
  string $node;
  string $header[] = extractTransformHeader($poseTransform);
  if (`size $header` == 2) $node = $header[0];
  return $node;
}

/*-
@param $poseTransform <string>
@returns <string>
*/
proc string extractPoseSetting(string $poseTransform) {
  string $poseSetting;
  string $header[] = extractTransformHeader($poseTransform);
  if (`size $header` == 2) $poseSetting = $header[1];
  return $poseSetting;
}

/*-
@param $poseSetting <string>
@returns <string[3]>
*/
proc string[] extractPoseSettings(string $poseSetting) {
  string $poseSettings[];
  string $buffer[];
  if (`tokenize $poseSetting "/" $buffer` == 3) {
    $poseSettings = $buffer;
  }
  return $poseSettings;
}

/*-
@param $poseSetting <string>
@returns <boolean[3]>
*/
proc int[] extractPasteSetting(string $poseSetting) {
  int $pasteSetting[] = {1, 1, 0};
  string $poseSettings[] = extractPoseSettings($poseSetting);
  string $buffer[];
  if (`tokenize $poseSettings[0] "," $buffer` == 3) {
    for ($i = 0; $i < 3; $i++) {
      $pasteSetting[$i] = (int) $buffer[$i];
    }
  }
  return $pasteSetting;
}

/*-
@param $poseSetting <string>
@returns <string[2]>
*/
proc string[] extractSelectSetting(string $poseSetting) {
  string $selectSetting[] = {"_L", "_R"};
  string $poseSettings[] = extractPoseSettings($poseSetting);
  string $buffer[];
  if (`tokenize $poseSettings[1] "," $buffer` == 2) {
    for ($i = 0; $i < 2; $i++) {
      $selectSetting[$i] = $buffer[$i];
    }
  }
  return $selectSetting;
}

/*-
@param $poseSetting <string>
@returns <int[5]>
*/
proc int[] extractMirrorSetting(string $poseSetting) {
  int $mirrorSetting[] = {0, 0, 1, 0, 0};
  string $poseSettings[] = extractPoseSettings($poseSetting);
  string $buffer[];
  if (`tokenize $poseSettings[2] "," $buffer` == 5) {
    for ($i = 0; $i < 5; $i++) {
      $mirrorSetting[$i] = (int) $buffer[$i];
    }
  }
  return $mirrorSetting;
}

/*-
@param $poseTransform <string>
@returns <float[13]>
*/
proc float[] extractTransformValues(string $poseTransform) {
  float $values[] = {
    0, 0, 0,
    0, 0, 0, 1,
    1, 1, 1,
    0, 0, 0
  };
  string $buffer1[];
  if (`tokenize $poseTransform "]" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[1] "," $buffer2` == 13) {
      for ($i = 0; $i < 13; $i++) {
        $values[$i] = (float) $buffer2[$i];
      }
    }
  }
  return $values;
}

// -----------------------------------------------------------------------------
// ポーズ
// -----------------------------------------------------------------------------
/*-
@returns <boolean>
*/
proc int clearPoses() {
  // print("clearPoses\n"); // debug
  global string $nkPoseStackPoses[];
  clear $nkPoseStackPoses;
  notifyInt("nkPoseStackPosesClear", -1);
  return true;
}

/*-
@returns <boolean>
*/
proc int openPoses() {
  // print("openPoses\n"); // debug
  global string $nkPoseStackPoses[];
  string $filenames[] = `fileDialog2
      -cap "Open List - nkPoseStack"
      -ds 2
      -ff "*.posestack"
      -fm 1`;
  // print("  filenames:{\n    " + stringArrayToString($filenames, ",\n    ") + "\n  }\n"); // debug
  if (`size $filenames` != 1) return false;
  string $filename = $filenames[0];
  // print("  filename:" + $filename + "\n"); // debug
  string $lines[] = readAllLines($filename, "");
  // print("  lines:{\n    " + stringArrayToString($lines, ",\n    ") + "\n  }\n"); // debug
  if (!`size $lines`) return false;
  $nkPoseStackPoses = $lines;
  notifyInt("nkPoseStackPosesOpen", -1);
  return true;
}

/*-
@returns <boolean>
*/
proc int importPoses() {
  // print("importPoses\n"); // debug
  global string $nkPoseStackPoses[];
  string $filenames[] = `fileDialog2
      -cap "Import List - nkPoseStack"
      -ds 2
      -ff "*.posestack"
      -fm 1`;
  // print("  filenames:{\n    " + stringArrayToString($filenames, ",\n    ") + "\n  }\n"); // debug
  if (`size $filenames` != 1) return false;
  string $filename = $filenames[0];
  // print("  filename:" + $filename + "\n"); // debug
  string $lines[] = readAllLines($filename, "");
  // print("  lines:{\n    " + stringArrayToString($lines, ",\n    ") + "\n  }\n"); // debug
  if (!`size $lines`) return false;
  for ($line in $lines) {
    $nkPoseStackPoses[`size $nkPoseStackPoses`] = $line;
  }
  notifyInt("nkPoseStackPosesImport", -1);
  return true;
}

/*-
@returns <>
*/
proc savePoses() {
  // print("savePoses\n"); // debug
  global string $nkPoseStackPoses[];
  string $filenames[] = `fileDialog2
      -cap "Save List As... - nkPoseStack"
      -ds 2
      -ff "*.posestack"
      -fm 0`;
  // print("  filenames:{\n    " + stringArrayToString($filenames, ",\n    ") + "\n  }\n"); // debug
  if (`size $filenames` == 1) {
    string $filename = $filenames[0];
    // print("  filename:" + $filename + "\n"); // debug
    string $saveText;
    for ($pose in $nkPoseStackPoses) {
      $saveText += $pose + "\n";
    }
    // print("  saveText:\"\n" + $saveText + "\n\"\n"); // debug
    writeAllText($filename, "", $saveText);
  }
}

/*-
@returns <int>
*/
proc int getNumPoses() {
  global string $nkPoseStackPoses[];
  return `size $nkPoseStackPoses`;
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@returns <string>
*/
proc string getPose(int $poseIndex) {
  global string $nkPoseStackPoses[];
  string $pose;
  if (isInRangeInt($poseIndex, 0, getNumPoses() - 1)) {
    $pose = $nkPoseStackPoses[$poseIndex];
  }
  return $pose;
}

/*-
@returns <string[]>
*/
proc string[] getPoseNames() {
  global string $nkPoseStackPoses[];
  string $poseNames[];
  for ($pose in $nkPoseStackPoses) {
    $poseNames[`size $poseNames`] = extractPoseName($pose);
  }
  return $poseNames;
}

/*-
@param $poseName <string>
@param $nodes <string[]>
@param $poseSettings <string[]>
@returns <int> 追加後のポーズ数。
*/
proc int addPose(
  string $poseName,
  string $nodes[],
  string $poseSettings[]
) {
  // print("addPose\n"); // debug
  // print("  poseName    :" + $poseName + "\n"); // debug
  // print("  nodes       :{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  // print("  poseSettings:{\n    " + stringArrayToString($poseSettings, ",\n    ") + "\n  }\n"); // debug
  global string $nkPoseStackPoses[];
  string $poseTransforms[] = makePoseTransforms($nodes, $poseSettings);
  // print("  poseTransforms:{\n    " + (stringArrayToString($poseTransforms, ",\n    ")) + "\n  }\n"); // debug
  string $pose = makePose(
    $poseName,
    $poseTransforms
  );
  // print("  pose:" + $pose + "\n"); // debug
  $nkPoseStackPoses[(getNumPoses())] = $pose;
  int $numPoses = getNumPoses();
  notifyInt("nkPoseStackPosesAdd", $numPoses - 1);
  return $numPoses;
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@param $poseName <string>
@param $poseSettings <string[]>
@returns <>
*/
proc editPose(int $poseIndex, string $poseName, string $poseSettings[]) {
  // print("editPose\n"); // debug
  // print("  poseIndex   :" + $poseIndex + "\n"); // debug
  // print("  poseName    :" + $poseName + "\n"); // debug
  // print("  poseSettings:{\n    " + stringArrayToString($poseSettings, ",\n    ") + "\n  }\n"); // debug
  global string $nkPoseStackPoses[];

  string $pose = getPose($poseIndex);
  if (!`size $pose`) return;

  string $poseTransforms[] = extractPoseTransforms($pose);
  // print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poseTransforms`) return;

  string $newPoseTransforms[];
  int $numTransforms = minStringArrayCount($poseSettings, $poseTransforms);
  for ($i = 0; $i < $numTransforms; $i++) {
    string $poseTransform = $poseTransforms[$i];
    // print("  poseTransform:" + $poseTransform + "\n"); // debug
    string $n = extractTransformNode($poseTransform);
    // print("    n               :" + $n + "\n"); // debug
    string $header = makeTransformHeader($n, $poseSettings[$i]);
    // print("    header          :" + $header + "\n"); // debug
    float $values[] = extractTransformValues($poseTransform);
    // print("    values          :{" + floatArrayToString($values, ", ") + "}\n"); // debug
    string $newPoseTransform = makePoseTransform($header, $values);
    // print("    newPoseTransform:" + $newPoseTransform + "\n"); // debug
    $newPoseTransforms[$i] = $newPoseTransform;
  }
  // print("  newPoseTransforms:{\n    " + (stringArrayToString($newPoseTransforms, ",\n    ")) + "\n  }\n"); // debug

  string $newPose = makePose(
    $poseName,
    $newPoseTransforms
  );
  // print("  newPose:" + $newPose + "\n"); // debug
  $nkPoseStackPoses[$poseIndex] = $newPose;
  notifyInt("nkPoseStackPosesEdit", $poseIndex);
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@returns <int> 複製先のポーズインデックス。基数は`0`。
*/
proc int duplicatePose(int $poseIndex) {
  // print("duplicatePose\n"); // debug
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  global string $nkPoseStackPoses[];
  if (!isInRangeInt($poseIndex, 0, getNumPoses() - 1)) return $poseIndex;
  string $pose = getPose($poseIndex);
  if (!`size $pose`) return $poseIndex;
  int $newPoseIndex = $poseIndex + 1;
  // print("  newPoseIndex:" + $newPoseIndex + "\n"); // debug
  stringArrayInsertAtIndex($newPoseIndex, $nkPoseStackPoses, $pose);
  notifyInt("nkPoseStackPosesDuplicate", $newPoseIndex);
  return $newPoseIndex;
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@returns <>
*/
proc updatePose(int $poseIndex) {
  // print("updatePose\n"); // debug
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  global string $nkPoseStackPoses[];

  string $pose = getPose($poseIndex);
  if (!`size $pose`) return;

  string $poseName = extractPoseName($pose);
  // print("  poseName      :" + $poseName + "\n"); // debug
  string $poseTransforms[] = extractPoseTransforms($pose);
  // print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poseTransforms`) return;

  string $nodes[];
  string $poseSettings[];
  for ($i = 0; $i < `size $poseTransforms`; $i++) {
    string $poseTransform = $poseTransforms[$i];
    // print("  poseTransform:" + $poseTransform + "\n"); // debug
    string $node = extractTransformNode($poseTransform);
    // print("    node       :" + $node + "\n"); // debug
    string $poseSetting = extractPoseSetting($poseTransform);
    // print("    poseSetting:" + $poseSetting + "\n"); // debug
    $nodes[$i] = $node;
    $poseSettings[$i] = $poseSetting;
  }
  string $newPoseTransforms[] = makePoseTransforms($nodes, $poseSettings);
  // print("  newPoseTransforms:{\n    " + (stringArrayToString($newPoseTransforms, ",\n    ")) + "\n  }\n"); // debug

  string $newPose = makePose(
    $poseName,
    $newPoseTransforms
  );
  // print("  newPose:" + $newPose + "\n"); // debug
  $nkPoseStackPoses[$poseIndex] = $newPose;
  notifyInt("nkPoseStackPosesUpdate", $poseIndex);
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@param $isOpposite <boolean>
@returns <>
*/
proc selectNodes(int $poseIndex, int $isOpposite) {
  // print("selectNodes\n"); // debug
  // print("  poseIndex :" + $poseIndex + "\n"); // debug
  // print("  isOpposite:" + $isOpposite + "\n"); // debug

  string $pose = getPose($poseIndex);
  // print("  pose:" + $pose + "\n"); // debug
  if (!`size $pose`) return;

  string $poseTransforms[] = extractPoseTransforms($pose);
  // print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poseTransforms`) return;

  string $targetNodes[];
  for ($poseTransform in $poseTransforms) {
    // print("  poseTransform:" + $poseTransform + "\n"); // debug
    string $targetNode = extractTransformNode($poseTransform);
    // print("    targetNode   :" + $targetNode + "\n"); // debug
    string $poseSetting = extractPoseSetting($poseTransform);
    // print("    poseSetting  :" + $poseSetting + "\n"); // debug
    string $selectSetting[] = extractSelectSetting($poseSetting);
    // print("    selectSetting:{" + stringArrayToString($selectSetting, ", ") + "}\n"); // debug
    string $patternA = $selectSetting[0];
    string $patternB = $selectSetting[1];
    // print("    patternA     :" + $patternA + "\n"); // debug
    // print("    patternB     :" + $patternB + "\n"); // debug
    if ($isOpposite) {
      if (`gmatch $targetNode ("*" + $patternA + "*")`) {
        $targetNode = substituteAllString($targetNode, $patternA, $patternB);
      }
      else if (`gmatch $targetNode ("*" + $patternB + "*")`) {
        $targetNode = substituteAllString($targetNode, $patternB, $patternA);
      }
    }
    if (`objExists $targetNode`) {
      $targetNodes[`size $targetNodes`] = $targetNode;
    }
  }
  // print("  targetNodes:{\n    " + stringArrayToString($targetNodes, "\n    ") + "\n  }\n"); // debug
  if (!`size $targetNodes`) return;

  int $mods = `getModifiers`;
  // print("  mods:" + $mods + "\n"); // debug
  switch ($mods) {
    // Nothing
    case 0: select -r $targetNodes; break;
    // Shift
    case 1: select -tgl $targetNodes; break;
    // Ctrl
    case 4: select -d $targetNodes; break;
    // Shift + Ctrl
    case 5: select -add $targetNodes; break;
    default: break;
  }
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@param $isOpposite <boolean>
@param $targetNodes <string[]>
@returns <>
*/
proc pastePose(int $poseIndex, int $isOpposite, string $targetNodes[]) {
  // print("pastePose\n"); // debug
  // print("  poseIndex  :" + $poseIndex + "\n"); // debug
  // print("  isOpposite :" + $isOpposite + "\n"); // debug
  // print("  targetNodes:{\n    " + stringArrayToString($targetNodes, ",\n    ") + "\n  }\n"); // debug

  if (!`size $targetNodes`) return;

  string $pose = getPose($poseIndex);
  // print("  pose:" + $pose + "\n"); // debug
  if (!`size $pose`) return;

  string $poseTransforms[] = extractPoseTransforms($pose);
  // print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poseTransforms`) return;

  int $numTargets = minStringArrayCount($targetNodes, $poseTransforms);
  // print("  numTargets:" + $numTargets + "\n"); // debug
  for ($i = 0; $i < $numTargets; $i++) {
    string $poseTransform = $poseTransforms[$i];
    // print("  poseTransform:" + $poseTransform + "\n"); // debug
    string $sourceNode = extractTransformNode($poseTransform);
    // print("    sourceNode     :" + $sourceNode + "\n"); // debug
    string $targetNode = $targetNodes[$i];
    // print("    targetNode     :" + $targetNode + "\n"); // debug

    float $transformValues[] = extractTransformValues($poseTransform);
    // print("    transformValues:{" + floatArrayToString($transformValues, ", ") + "}\n"); // debug

    string $poseSetting = extractPoseSetting($poseTransform);
    // print("    poseSetting    :" + $poseSetting + "\n"); // debug
    int $pasteSetting[] = extractPasteSetting($poseSetting);
    // print("    pasteSetting   :{" + intArrayToString($pasteSetting, ", ") + "}\n"); // debug

    if ($isOpposite) {
      int $mirrorSetting[] = extractMirrorSetting($poseSetting);
      // print("    mirrorSetting  :{" + intArrayToString($mirrorSetting, ", ") + "}\n"); // debug
      string $sourceParent = getParentNode($sourceNode);
      string $targetParent = getParentNode($targetNode);
      int $hasCommonParent = $sourceParent == $targetParent;
      // print("    hasCommonParent:" + $hasCommonParent + "\n"); // debug
      $transformValues = mirrorTransform(
        $targetNode,
        $transformValues,
        $hasCommonParent,
        $mirrorSetting[0],
        $mirrorSetting[1],
        $mirrorSetting[2],
        $mirrorSetting[3],
        $mirrorSetting[4]
      );
    }
    else {
      $transformValues = asIsTransform($targetNode, $transformValues);
    }

    setTransformAttributes(
      $targetNode,
      $transformValues,
      $pasteSetting[0],
      $pasteSetting[1],
      $pasteSetting[2]
    );
  }
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@returns <int> 削除後のポーズ数。
*/
proc int deletePose(int $poseIndex) {
  // print("deletePose\n"); // debug
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  global string $nkPoseStackPoses[];
  if (isInRangeInt($poseIndex, 0, getNumPoses() - 1)) {
    stringArrayRemoveAtIndex($poseIndex, $nkPoseStackPoses);
  }
  int $numPoses = getNumPoses();
  int $nextPoseIndex = $poseIndex;
  if ($numPoses) {
    if ($nextPoseIndex > $numPoses - 1) $nextPoseIndex = $numPoses - 1;
  }
  else {
    $nextPoseIndex = -1;
  }
  notifyInt("nkPoseStackPosesDelete", $nextPoseIndex);
  return $numPoses;
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@returns <int> 移動後のポーズインデックス。基数は`0`。
*/
proc int moveUpPose(int $poseIndex) {
  // print("moveUpPose\n"); // debug
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  global string $nkPoseStackPoses[];
  if (!isInRangeInt($poseIndex, 1, getNumPoses() - 1)) return $poseIndex;
  string $pose = getPose($poseIndex);
  if (!`size $pose`) return $poseIndex;
  int $newPoseIndex = $poseIndex - 1;
  // print("  newPoseIndex:" + $newPoseIndex + "\n"); // debug
  stringArrayRemoveAtIndex($poseIndex, $nkPoseStackPoses);
  stringArrayInsertAtIndex($newPoseIndex, $nkPoseStackPoses, $pose);
  notifyInt("nkPoseStackPosesMoveUp", $newPoseIndex);
  return $newPoseIndex;
}

/*-
@param $poseIndex <int> 基数`0`の整数。
@returns <int> 移動後のポーズインデックス。基数は`0`。
*/
proc int moveDownPose(int $poseIndex) {
  // print("moveDownPose\n"); // debug
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  global string $nkPoseStackPoses[];
  if (!isInRangeInt($poseIndex, 0, getNumPoses() - 2)) return $poseIndex;
  string $pose = getPose($poseIndex);
  if (!`size $pose`) return $poseIndex;
  int $newPoseIndex = $poseIndex + 1;
  // print("  newPoseIndex:" + $newPoseIndex + "\n"); // debug
  stringArrayRemoveAtIndex($poseIndex, $nkPoseStackPoses);
  stringArrayInsertAtIndex($newPoseIndex, $nkPoseStackPoses, $pose);
  notifyInt("nkPoseStackPosesMoveDown", $newPoseIndex);
  return $newPoseIndex;
}

// /////////////////////////////////////////////////////////////////////////////
// プレゼンテーション
// /////////////////////////////////////////////////////////////////////////////
/*-
@var <int> `-1`ならポーズ追加。
*/
global int $nkPoseStackEditorPoseIndex;

/*-
@var <string>
*/
global string $nkPoseStackEditorPoseName;

/*-
@var <string[]>
*/
global string $nkPoseStackEditorNodes[];

/*-
@var <string[]>
*/
global string $nkPoseStackEditorPoseSettings[];

/*-
@var <boolean> 設定UIが更新中かどうか。
*/
global int $nkPoseStackEditorIsUIUpdating;

/*-
@var <boolean[3]> プロンプトを閉じる際に初期化用の設定値を更新するかどうか。
*/
global int $nkPoseStackNeedUpdateInitParameters[];

/*-
@returns <>
*/
proc initializeEditorParameters() {
  global int $nkPoseStackEditorPoseIndex;
  global string $nkPoseStackEditorPoseName;
  global string $nkPoseStackEditorNodes[];
  global string $nkPoseStackEditorPoseSettings[];
  global int $nkPoseStackEditorIsUIUpdating;
  global int $nkPoseStackNeedUpdateInitParameters[];
  $nkPoseStackEditorPoseIndex = -1;
  $nkPoseStackEditorPoseName = "";
  clear $nkPoseStackEditorNodes;
  clear $nkPoseStackEditorPoseSettings;
  $nkPoseStackEditorIsUIUpdating = false;
  $nkPoseStackNeedUpdateInitParameters = {false, false, false};
}

/*-
@param $input <string>
@returns <string>
*/
proc string sanitizeText(string $input) {
  $input = substituteAllString($input, "=", "_");
  $input = substituteAllString($input, ";", "_");
  $input = substituteAllString($input, "[", "_");
  $input = substituteAllString($input, "]", "_");
  $input = substituteAllString($input, "/", "_");
  $input = substituteAllString($input, ",", "_");
  return $input;
}

/*-
@param $index <int> 基数`0`の整数。
@returns <string>
*/
proc string makeNodeListLabel(int $index) {
  global string $nkPoseStackEditorNodes[];
  global string $nkPoseStackEditorPoseSettings[];
  string $label = "[" + $nkPoseStackEditorPoseSettings[$index] + "]";
  string $buffer[];
  int $depth = `tokenize $nkPoseStackEditorNodes[$index] "|" $buffer`;
  if ($depth) {
    $label += " |" + $buffer[0];
    if ($depth == 2) $label += "|" + $buffer[1];
    else if ($depth > 2) $label += "...|" + $buffer[$depth - 1];
  }
  return $label;
}

/*-
@param $partial <boolean> 選択した項目のみを更新するかどうか。
@returns <>
*/
proc updateNodeList(int $partial) {
  // print("updateNodeList\n"); // debug
  // print("  partial:" + $partial + "\n"); // debug
  global string $nkPoseStackEditorNodes[];
  global string $nkPoseStackEditorPoseSettings[];
  string $nodeList = getUIControl("nkPoseStackEditorWindow", "nodeList");
  int $nodeIndices[] = qIndexArray("textScrollList", "-sii", $nodeList);
  // print("  nodeIndices:{" + intArrayToString($nodeIndices, ", ") + "}\n"); // debug
  int $numTransforms = minStringArrayCount(
    $nkPoseStackEditorNodes,
    $nkPoseStackEditorPoseSettings
  );
  if ($partial) {
    for ($i = `size $nodeIndices`; $i > 0; $i--) {
      int $index = $nodeIndices[$i - 1];
      $label = makeNodeListLabel($index);
      eIndex("textScrollList", "-rii", $index, $nodeList);
      eIndexString("textScrollList", "-ap", $index, $label, $nodeList);
    }
  }
  else {
    executeUIControl("textScrollList", "-ra", $nodeList);
    for ($i = 0; $i < $numTransforms; $i++) {
      $label = makeNodeListLabel($i);
      eString("textScrollList", "-a", $label, $nodeList);
    }
  }
  eIndexArray("textScrollList", "-sii", $nodeIndices, $nodeList);
}

/*-
@param $id <int>
@returns <>
*/
proc updatePoseSettings(int $id) {
  // print("updatePoseSettings\n"); // debug
  // print("  id:" + $id + "\n"); // debug
  global string $nkPoseStackEditorNodes[];
  global string $nkPoseStackEditorPoseSettings[];
  global int $nkPoseStackEditorIsUIUpdating;
  // print("  nkPoseStackEditorIsUIUpdating:" + $nkPoseStackEditorIsUIUpdating + "\n"); // debug

  // 設定UIの更新中はポーズ設定を更新しない
  if ($nkPoseStackEditorIsUIUpdating) return;

  string $nodeList = getUIControl("nkPoseStackEditorWindow", "nodeList");
  string $pasteAttributesCheckBoxGrp = getUIControl("nkPoseStackEditorWindow", "pasteAttributesCheckBoxGrp");
  string $selectPatternAText = getUIControl("nkPoseStackEditorWindow", "selectPatternAText");
  string $selectPatternBText = getUIControl("nkPoseStackEditorWindow", "selectPatternBText");
  string $mirrorAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "mirrorAxisRadioButton");
  string $primaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "primaryAxisRadioButton");
  string $secondaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "secondaryAxisRadioButton");
  string $invertAxisCheckBoxGrp = getUIControl("nkPoseStackEditorWindow", "invertAxisCheckBoxGrp");

  int $pasteSetting[] = qIntArray("checkBoxGrp", "-va3", $pasteAttributesCheckBoxGrp);
  string $selectSetting[] = {
    sanitizeText(qString("textFieldGrp", "-tx", $selectPatternAText)),
    sanitizeText(qString("textFieldGrp", "-tx", $selectPatternBText))
  };
  int $invertAxisValues[] = qIntArray("checkBoxGrp", "-va2", $invertAxisCheckBoxGrp);
  int $mirrorSetting[] = {
    qIndex("radioButtonGrp", "-sl", $mirrorAxisRadioButton),
    qIndex("radioButtonGrp", "-sl", $primaryAxisRadioButton),
    qIndex("radioButtonGrp", "-sl", $secondaryAxisRadioButton),
    $invertAxisValues[0],
    $invertAxisValues[1]
  };
  // print("  pasteSetting :{" + intArrayToString($pasteSetting, ", ") + "}\n"); // debug
  // print("  selectSetting:{" + stringArrayToString($selectSetting, ", ") + "}\n"); // debug
  // print("  mirrorSetting:{" + intArrayToString($mirrorSetting, ", ") + "}\n"); // debug

  int $nodeIndices[] = qIndexArray("textScrollList", "-sii", $nodeList);
  // print("  nodeIndices:{" + intArrayToString($nodeIndices, ", ") + "}\n"); // debug
  for ($nodeIndex in $nodeIndices) {
    string $newPoseSetting = $nkPoseStackEditorPoseSettings[$nodeIndex];
    // print("    newPoseSetting:" + $newPoseSetting + "\n"); // debug
    int $newPasteSetting[] = extractPasteSetting($newPoseSetting);
    string $newSelectSetting[] = extractSelectSetting($newPoseSetting);
    int $newMirrorSetting[] = extractMirrorSetting($newPoseSetting);
    // print("  newPasteSetting :{" + intArrayToString($newPasteSetting, ", ") + "}\n"); // debug
    // print("  newSelectSetting:{" + stringArrayToString($newSelectSetting, ", ") + "}\n"); // debug
    // print("  newMirrorSetting:{" + intArrayToString($newMirrorSetting, ", ") + "}\n"); // debug

    switch ($id) {
      case 0: $newPasteSetting[0] = $pasteSetting[0]; break;
      case 1: $newPasteSetting[1] = $pasteSetting[1]; break;
      case 2: $newPasteSetting[2] = $pasteSetting[2]; break;
      case 3: $newSelectSetting[0] = $selectSetting[0]; break;
      case 4: $newSelectSetting[1] = $selectSetting[1]; break;
      case 5: $newMirrorSetting[0] = $mirrorSetting[0]; break;
      case 6: $newMirrorSetting[1] = $mirrorSetting[1]; break;
      case 7: $newMirrorSetting[2] = $mirrorSetting[2]; break;
      case 8: $newMirrorSetting[3] = $mirrorSetting[3]; break;
      case 9: $newMirrorSetting[4] = $mirrorSetting[4]; break;
      default: break;
    }

    $nkPoseStackEditorPoseSettings[$nodeIndex] = makePoseSetting(
      $newPasteSetting, $newSelectSetting, $newMirrorSetting
    );
  }
  updateNodeList(true);
}

/*-
@param $pasteSetting <boolean[0|3]>
@returns <>
*/
proc updatePasteSettingUI(int $pasteSetting[]) {
  // print("updatePasteSettingUI\n"); // debug
  // print("  pasteSetting:{" + intArrayToString($pasteSetting, ", ") + "}\n"); // debug
  global int $nkPoseStackNeedUpdateInitParameters[];
  string $pasteAttributesCheckBoxGrp = getUIControl("nkPoseStackEditorWindow", "pasteAttributesCheckBoxGrp");
  int $isSelected = `size $pasteSetting`;
  eEnable($isSelected, $pasteAttributesCheckBoxGrp);
  if ($isSelected) {
    eOrderedInt("checkBoxGrp", "-v", $pasteSetting, $pasteAttributesCheckBoxGrp);
  }
  if (!$nkPoseStackNeedUpdateInitParameters[0] && $isSelected) {
    $nkPoseStackNeedUpdateInitParameters[0] = true;
  }
}

/*-
@param $selectSetting <string[0|2]>
@returns <>
*/
proc updateSelectSettingUI(string $selectSetting[]) {
  // print("updateSelectSettingUI\n"); // debug
  // print("  selectSetting:{" + stringArrayToString($selectSetting, ", ") + "}\n"); // debug
  global int $nkPoseStackNeedUpdateInitParameters[];
  string $selectPatternAText = getUIControl("nkPoseStackEditorWindow", "selectPatternAText");
  string $selectPatternBText = getUIControl("nkPoseStackEditorWindow", "selectPatternBText");
  int $isSelected = `size $selectSetting`;
  eEnable($isSelected, $selectPatternAText);
  eEnable($isSelected, $selectPatternBText);
  if ($isSelected) {
    eString("textFieldGrp", "-tx", $selectSetting[0], $selectPatternAText);
    eString("textFieldGrp", "-tx", $selectSetting[1], $selectPatternBText);
  }
  if (!$nkPoseStackNeedUpdateInitParameters[1] && $isSelected) {
    $nkPoseStackNeedUpdateInitParameters[1] = true;
  }
}

/*-
@param $mirrorSetting <int[0|5]>
@returns <>
*/
proc updateMirrorSettingUI(int $mirrorSetting[]) {
  // print("updateMirrorSettingUI\n"); // debug
  // print("  mirrorSetting:{" + intArrayToString($mirrorSetting, ", ") + "}\n"); // debug
  global int $nkPoseStackNeedUpdateInitParameters[];
  string $mirrorAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "mirrorAxisRadioButton");
  string $primaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "primaryAxisRadioButton");
  string $secondaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "secondaryAxisRadioButton");
  string $invertAxisCheckBoxGrp = getUIControl("nkPoseStackEditorWindow", "invertAxisCheckBoxGrp");
  int $isSelected = `size $mirrorSetting`;
  eEnable($isSelected, $mirrorAxisRadioButton);
  eEnable($isSelected, $primaryAxisRadioButton);
  eEnable($isSelected, $secondaryAxisRadioButton);
  eEnable($isSelected, $invertAxisCheckBoxGrp);
  if ($isSelected) {
    eIndex("radioButtonGrp", "-sl", $mirrorSetting[0], $mirrorAxisRadioButton);
    eIndex("radioButtonGrp", "-sl", $mirrorSetting[1], $primaryAxisRadioButton);
    eIndex("radioButtonGrp", "-sl", $mirrorSetting[2], $secondaryAxisRadioButton);
    eOrderedInt(
      "checkBoxGrp",
      "-v",
      {$mirrorSetting[3], $mirrorSetting[4]},
      $invertAxisCheckBoxGrp
    );
  }
  if (!$nkPoseStackNeedUpdateInitParameters[2] && $isSelected) {
    $nkPoseStackNeedUpdateInitParameters[2] = true;
  }
}

/*-
@param $poseIndex <int>
@returns <>
*/
proc updatePoseList(int $poseIndex) {
  // print("updatePoseList\n"); // debug
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  string $poseNames[] = getPoseNames();
  int $numPoseNames = `size $poseNames`;
  executeUIControl("textScrollList", "-ra", $poseList);
  for ($poseName in $poseNames) {
    eString("textScrollList", "-a", $poseName, $poseList);
  }
  if (isInRangeInt($poseIndex, 0, $numPoseNames - 1)) {
    eIndex("textScrollList", "-sii", $poseIndex, $poseList);
  }
}

/*-
@returns <>
*/
proc updateInitParameters() {
  // print("updateInitParameters\n"); // debug
  global int $nkPoseStackInitPasteSetting[];
  global string $nkPoseStackInitSelectSetting[];
  global int $nkPoseStackInitMirrorSetting[];
  global int $nkPoseStackNeedUpdateInitParameters[];
  // print("  nkPoseStackNeedUpdateInitParameters:{" + intArrayToString($nkPoseStackNeedUpdateInitParameters, ", ") + "}\n"); // debug

  if ($nkPoseStackNeedUpdateInitParameters[0]) {
    string $pasteAttributesCheckBoxGrp = getUIControl("nkPoseStackEditorWindow", "pasteAttributesCheckBoxGrp");
    $nkPoseStackInitPasteSetting = qIntArray(
      "checkBoxGrp",
      "-va3",
      $pasteAttributesCheckBoxGrp
    );
  }
  if ($nkPoseStackNeedUpdateInitParameters[1]) {
    string $selectPatternAText = getUIControl("nkPoseStackEditorWindow", "selectPatternAText");
    string $selectPatternBText = getUIControl("nkPoseStackEditorWindow", "selectPatternBText");
    $nkPoseStackInitSelectSetting = {
      sanitizeText(qString("textFieldGrp", "-tx", $selectPatternAText)),
      sanitizeText(qString("textFieldGrp", "-tx", $selectPatternBText))
    };
  }
  if ($nkPoseStackNeedUpdateInitParameters[2]) {
    string $mirrorAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "mirrorAxisRadioButton");
    string $primaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "primaryAxisRadioButton");
    string $secondaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "secondaryAxisRadioButton");
    string $invertAxisCheckBoxGrp = getUIControl("nkPoseStackEditorWindow", "invertAxisCheckBoxGrp");
    int $invertAxisValues[] = qIntArray(
      "checkBoxGrp",
      "-va2",
      $invertAxisCheckBoxGrp
    );
    $nkPoseStackInitMirrorSetting = {
      qIndex("radioButtonGrp", "-sl", $mirrorAxisRadioButton),
      qIndex("radioButtonGrp", "-sl", $primaryAxisRadioButton),
      qIndex("radioButtonGrp", "-sl", $secondaryAxisRadioButton),
      $invertAxisValues[0],
      $invertAxisValues[1]
    };
  }
  // print("  nkPoseStackInitPasteSetting :{" + intArrayToString($nkPoseStackInitPasteSetting, ", ") + "}\n"); // debug
  // print("  nkPoseStackInitSelectSetting:{" + stringArrayToString($nkPoseStackInitSelectSetting, ", ") + "}\n"); // debug
  // print("  nkPoseStackInitMirrorSetting:{" + intArrayToString($nkPoseStackInitMirrorSetting, ", ") + "}\n"); // debug
}

/*-
@returns <>
*/
proc applyPose() {
  // print("applyPose\n"); // debug
  global int $nkPoseStackEditorPoseIndex;
  global string $nkPoseStackEditorPoseName;
  global string $nkPoseStackEditorNodes[];
  global string $nkPoseStackEditorPoseSettings[];
  // print("  nkPoseStackEditorPoseIndex   :" + $nkPoseStackEditorPoseIndex + "\n"); // debug
  // print("  nkPoseStackEditorPoseName    :" + $nkPoseStackEditorPoseName + "\n"); // debug
  // print("  nkPoseStackEditorNodes       :{\n    " + stringArrayToString($nkPoseStackEditorNodes, ",\n    ") + "\n  }\n"); // debug
  // print("  nkPoseStackEditorPoseSettings:{\n    " + stringArrayToString($nkPoseStackEditorPoseSettings, ",\n    ") + "\n  }\n"); // debug

  if ($nkPoseStackEditorPoseIndex < 0) {
    int $numPoses = addPose(
      $nkPoseStackEditorPoseName,
      $nkPoseStackEditorNodes,
      $nkPoseStackEditorPoseSettings
    );
  }
  else {
    editPose(
      $nkPoseStackEditorPoseIndex,
      $nkPoseStackEditorPoseName,
      $nkPoseStackEditorPoseSettings
    );
  }
}

/*-
@param $n <string>
@returns <string>
*/
proc string makePoseName(string $n) {
  string $poseName = $n;
  string $buffer[];
  int $depth = `tokenize $n "|" $buffer`;
  if ($depth > 0) {
    $poseName = (($depth > 1) ? $buffer[0] + "-" : "") + $buffer[$depth - 1];
  }
  return $poseName;
}

/*-
@returns <>
*/
proc subscribePosesObservers() {
  // print("subscribePosesObservers\n"); // debug
  subscribe("nkPoseStackPosesClear", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPosesOpen", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPosesImport", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPosesAdd", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPosesDelete", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPosesEdit", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPosesDuplicate", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPosesMoveUp", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPosesMoveDown", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPosesUpdate", "nkPoseStackPosesChanged");
}

/*-
@returns <>
*/
proc unsubscribePosesObservers() {
  // print("unsubscribePosesObservers\n"); // debug
  unsubscribe("nkPoseStackPosesClear", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPosesOpen", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPosesImport", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPosesAdd", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPosesDelete", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPosesEdit", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPosesDuplicate", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPosesMoveUp", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPosesMoveDown", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPosesUpdate", "nkPoseStackPosesChanged");
}

/*-
@returns <>
*/
proc closeEditorWindow() {
  // print("closeEditorWindow\n"); // debug
  string $nkPoseStackEditorWindow = getUIControl("nkPoseStackEditorWindow", "nkPoseStackEditorWindow");
  // print("  nkPoseStackEditorWindow:" + $nkPoseStackEditorWindow + "\n"); // debug
  windowClose($nkPoseStackEditorWindow);
}

// -----------------------------------------------------------------------------
// UIコントロールイベントハンドラ
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc nkPoseStackEditorWindowClosed() {
  // print("nkPoseStackEditorWindowClosed\n"); // debug
  removeUIControls("nkPoseStackEditorWindow", "");
}

/*-
@returns <>
*/
proc poseNameTextChanged() {
  // print("poseNameTextChanged\n"); // debug
  global string $nkPoseStackEditorPoseName;
  string $poseNameText = getUIControl("nkPoseStackEditorWindow", "poseNameText");
  string $currentText = qString("textFieldGrp", "-tx", $poseNameText);
  string $newText = sanitizeText($currentText);
  int $numNewText = `size $newText`;
  if ($newText != $currentText || !$numNewText) {
    int $position = qIndex("textFieldGrp", "-ip", $poseNameText);
    // print("  position:" + $position + "\n"); // debug
    if (!$numNewText) {
      $newText = $nkPoseStackEditorPoseName;
      $position = -1;
    }
    eString("textFieldGrp", "-tx", $newText, $poseNameText);
    eIndex("textFieldGrp", "-ip", $position, $poseNameText);
  }
  $nkPoseStackEditorPoseName = $newText;
}

/*-
@returns <>
*/
proc nodeListSelected() {
  // print("nodeListSelected\n"); // debug
  global string $nkPoseStackEditorPoseSettings[];
  global int $nkPoseStackEditorIsUIUpdating;

  string $nodeList = getUIControl("nkPoseStackEditorWindow", "nodeList");
  int $nodeIndices[] = qIndexArray("textScrollList", "-sii", $nodeList);
  // print("  nodeIndices:{" + intArrayToString($nodeIndices, ", ") + "}\n"); // debug
  int $pasteSetting[];
  string $selectSetting[];
  int $mirrorSetting[];
  if (`size $nodeIndices`) {
    string $poseSetting = $nkPoseStackEditorPoseSettings[$nodeIndices[0]];
    $pasteSetting = extractPasteSetting($poseSetting);
    $selectSetting = extractSelectSetting($poseSetting);
    $mirrorSetting = extractMirrorSetting($poseSetting);
  }
  // print("  pasteSetting :{" + intArrayToString($pasteSetting, ", ") + "}\n"); // debug
  // print("  selectSetting:{" + stringArrayToString($selectSetting, ", ") + "}\n"); // debug
  // print("  mirrorSetting:{" + intArrayToString($mirrorSetting, ", ") + "}\n"); // debug

  $nkPoseStackEditorIsUIUpdating = true;
  updatePasteSettingUI($pasteSetting);
  updateSelectSettingUI($selectSetting);
  updateMirrorSettingUI($mirrorSetting);
  $nkPoseStackEditorIsUIUpdating = false;
}

/*-
@returns <>
*/
proc pasteAttributesCheckBoxGrp1Changed() {
  // print("pasteAttributesCheckBoxGrp1Changed\n"); // debug
  updatePoseSettings(0);
}

/*-
@returns <>
*/
proc pasteAttributesCheckBoxGrp2Changed() {
  // print("pasteAttributesCheckBoxGrp2Changed\n"); // debug
  updatePoseSettings(1);
}

/*-
@returns <>
*/
proc pasteAttributesCheckBoxGrp3Changed() {
  // print("pasteAttributesCheckBoxGrp3Changed\n"); // debug
  updatePoseSettings(2);
}

/*-
@returns <>
*/
proc selectPatternATextChanged() {
  // print("selectPatternATextChanged\n"); // debug
  string $selectPatternAText = getUIControl("nkPoseStackEditorWindow", "selectPatternAText");
  string $currentText = qString("textFieldGrp", "-tx", $selectPatternAText);
  string $newText = sanitizeText($currentText);
  int $numNewText = `size $newText`;
  if ($newText != $currentText || !$numNewText) {
    int $position = qIndex("textFieldGrp", "-ip", $selectPatternAText);
    // print("  position:" + $position + "\n"); // debug
    if (!$numNewText) {
      $newText = "_";
      $position = -1;
    }
    eString("textFieldGrp", "-tx", $newText, $selectPatternAText);
    eIndex("textFieldGrp", "-ip", $position, $selectPatternAText);
  }
  updatePoseSettings(3);
}

/*-
@returns <>
*/
proc selectPatternBTextChanged() {
  // print("selectPatternBTextChanged\n"); // debug
  string $selectPatternBText = getUIControl("nkPoseStackEditorWindow", "selectPatternBText");
  string $currentText = qString("textFieldGrp", "-tx", $selectPatternBText);
  string $newText = sanitizeText($currentText);
  int $numNewText = `size $newText`;
  if ($newText != $currentText || !$numNewText) {
    int $position = qIndex("textFieldGrp", "-ip", $selectPatternBText);
    // print("  position:" + $position + "\n"); // debug
    if (!$numNewText) {
      $newText = "_";
      $position = -1;
    }
    eString("textFieldGrp", "-tx", $newText, $selectPatternBText);
    eIndex("textFieldGrp", "-ip", $position, $selectPatternBText);
  }
  updatePoseSettings(4);
}

/*-
@returns <>
*/
proc mirrorAxisRadioButtonOn() {
  // print("mirrorAxisRadioButtonOn\n"); // debug
  updatePoseSettings(5);
}

/*-
@returns <>
*/
proc primaryAxisRadioButtonOn() {
  // print("primaryAxisRadioButtonOn\n"); // debug
  string $primaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "primaryAxisRadioButton");
  string $secondaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "secondaryAxisRadioButton");
  int $primaryAxisSelect = qIndex("radioButtonGrp", "-sl", $primaryAxisRadioButton);
  int $secondaryAxisSelect = qIndex("radioButtonGrp", "-sl", $secondaryAxisRadioButton);
  updatePoseSettings(6);
  if ($primaryAxisSelect == $secondaryAxisSelect) {
    $secondaryAxisSelect = $primaryAxisSelect + 1;
    if ($secondaryAxisSelect > 2) {
      $secondaryAxisSelect = 0;
    }
    eIndex("radioButtonGrp", "-sl", $secondaryAxisSelect, $secondaryAxisRadioButton);
    // ラジオボタンはコマンド操作でイベントが発生しないのでこちら側で更新する
    updatePoseSettings(7);
  }
}

/*-
@returns <>
*/
proc secondaryAxisRadioButtonOn() {
  // print("secondaryAxisRadioButtonOn\n"); // debug
  string $primaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "primaryAxisRadioButton");
  string $secondaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "secondaryAxisRadioButton");
  int $primaryAxisSelect = qIndex("radioButtonGrp", "-sl", $primaryAxisRadioButton);
  int $secondaryAxisSelect = qIndex("radioButtonGrp", "-sl", $secondaryAxisRadioButton);
  updatePoseSettings(7);
  if ($primaryAxisSelect == $secondaryAxisSelect) {
    $primaryAxisSelect = $secondaryAxisSelect - 1;
    if ($primaryAxisSelect < 0) {
      $primaryAxisSelect = 2;
    }
    eIndex("radioButtonGrp", "-sl", $primaryAxisSelect, $primaryAxisRadioButton);
    // ラジオボタンはコマンド操作でイベントが発生しないのでこちら側で更新する
    updatePoseSettings(6);
  }
}

/*-
@returns <>
*/
proc invertAxisCheckBoxGrp1Changed() {
  // print("invertAxisCheckBoxGrp1Changed\n"); // debug
  updatePoseSettings(8);
}

/*-
@returns <>
*/
proc invertAxisCheckBoxGrp2Changed() {
  // print("invertAxisCheckBoxGrp2Changed\n"); // debug
  updatePoseSettings(9);
}

/*-
@returns <>
*/
proc okButtonPressed() {
  // print("okButtonPressed\n"); // debug
  updateInitParameters();
  applyPose();
  closeEditorWindow();
}

/*-
@returns <>
*/
proc applyButtonPressed() {
  // print("applyButtonPressed\n"); // debug
  updateInitParameters();
  applyPose();
}

/*-
@returns <>
*/
proc cancelButtonPressed() {
  // print("cancelButtonPressed\n"); // debug
  closeEditorWindow();
}

/*-
@returns <>
*/
proc nkPoseStackWindowClosed() {
  // print("nkPoseStackWindowClosed\n"); // debug
  unsubscribePosesObservers();
  removeUIControls("nkPoseStackWindow", "");
  removeUIControls("nkPoseStackEditorWindow", "");
}

/*-
@returns <>
*/
proc clearListMenuItemSelected() {
  // print("clearListMenuItemSelected\n"); // debug
  string $result = `confirmDialog
      -b "OK" -b "Cancel"
      -db "OK" -cb "Cancel"
      -m "Are you sure?"
      -p (getParentableWindow("nkPoseStackWindow"))
      -t "Clear List - nkPoseStack"`;
  if ($result != "OK") return;
  clearPoses();
}

/*-
@returns <>
*/
proc openListMenuItemSelected() {
  // print("openListMenuItemSelected\n"); // debug
  openPoses();
}

/*-
@returns <>
*/
proc importListMenuItemSelected() {
  // print("importListMenuItemSelected\n"); // debug
  importPoses();
}

/*-
@returns <>
*/
proc saveListAsMenuItemSelected() {
  // print("saveListAsMenuItemSelected\n"); // debug
  savePoses();
}

/*-
@returns <>
*/
proc resetWindowMenuItemSelected() {
  // print("resetWindowMenuItemSelected\n"); // debug
  string $nkPoseStackEditorWindow = getUIControl("nkPoseStackEditorWindow", "nkPoseStackEditorWindow");
  string $nkPoseStackWindow = getUIControl("nkPoseStackWindow", "nkPoseStackWindow");
  // print("  nkPoseStackEditorWindow:" + $nkPoseStackEditorWindow + "\n"); // debug
  // print("  nkPoseStackWindow:" + $nkPoseStackWindow + "\n"); // debug
  windowPrefRemove("window", $nkPoseStackEditorWindow);
  windowPrefRemove("window", $nkPoseStackWindow);
  nkPoseStack();
}

/*-
@returns <>
*/
proc quitMenuItemSelected() {
  // print("quitMenuItemSelected\n"); // debug
  string $nkPoseStackWindow = getUIControl("nkPoseStackWindow", "nkPoseStackWindow");
  // print("  nkPoseStackWindow:" + $nkPoseStackWindow + "\n"); // debug
  windowClose($nkPoseStackWindow);
}

/*-
@returns <>
*/
proc aboutMenuItemSelected() {
  // print("aboutMenuItemSelected\n"); // debug
  confirmDialog
      -b "OK"
      -db "OK"
      -m (
        "nkPoseStack " + (nkPoseStackVersion())
            + "\n\nMIT License\nhttps://github.com/imaoki/nkPoseStack"
      )
      -p (getParentableWindow("nkPoseStackWindow"))
      -t "About - nkPoseStack";
}

/*-
@returns <>
*/
proc addPoseButtonPressed() {
  // print("addPoseButtonPressed\n"); // debug
  global int $nkPoseStackInitPasteSetting[];
  global string $nkPoseStackInitSelectSetting[];
  global int $nkPoseStackInitMirrorSetting[];
  // print("  nkPoseStackInitPasteSetting :{" + intArrayToString($nkPoseStackInitPasteSetting, ", ") + "}\n"); // debug
  // print("  nkPoseStackInitSelectSetting:{" + stringArrayToString($nkPoseStackInitSelectSetting, ", ") + "}\n"); // debug
  // print("  nkPoseStackInitMirrorSetting:{" + intArrayToString($nkPoseStackInitMirrorSetting, ", ") + "}\n"); // debug

  global int $nkPoseStackEditorPoseIndex;
  global string $nkPoseStackEditorPoseName;
  global string $nkPoseStackEditorNodes[];
  global string $nkPoseStackEditorPoseSettings[];
  initializeEditorParameters();

  string $nodes[] = getSelectedNodes();
  // print("  nodes:{\n    " + (stringArrayToString($nodes, ",\n    ")) + "\n  }\n"); // debug
  int $numNodes = `size $nodes`;
  if (!$numNodes) return;

  $nkPoseStackEditorPoseIndex = -1;
  $nkPoseStackEditorPoseName = makePoseName($nodes[0]);
  $nkPoseStackEditorNodes = $nodes;
  for ($i = 0; $i < $numNodes; $i++) {
    $nkPoseStackEditorPoseSettings[$i] = makePoseSetting(
      $nkPoseStackInitPasteSetting,
      $nkPoseStackInitSelectSetting,
      $nkPoseStackInitMirrorSetting
    );
  }
  // print("  nkPoseStackEditorPoseName    :" + $nkPoseStackEditorPoseName + "\n"); // debug
  // print("  nkPoseStackEditorNodes       :{\n    " + stringArrayToString($nkPoseStackEditorNodes, ",\n    ") + "\n  }\n"); // debug
  // print("  nkPoseStackEditorPoseSettings:{\n    " + stringArrayToString($nkPoseStackEditorPoseSettings, ",\n    ") + "\n  }\n"); // debug

  nkPoseStackEventController("nkPoseStackWindow", "postc", "addPoseButton");
}

/*-
@returns <>
*/
proc editPoseButtonPressed() {
  // print("editPoseButtonPressed\n"); // debug
  global int $nkPoseStackInitPasteSetting[];
  global string $nkPoseStackInitSelectSetting[];
  global int $nkPoseStackInitMirrorSetting[];
  // print("  nkPoseStackInitPasteSetting :{" + intArrayToString($nkPoseStackInitPasteSetting, ", ") + "}\n"); // debug
  // print("  nkPoseStackInitSelectSetting:{" + stringArrayToString($nkPoseStackInitSelectSetting, ", ") + "}\n"); // debug
  // print("  nkPoseStackInitMirrorSetting:{" + intArrayToString($nkPoseStackInitMirrorSetting, ", ") + "}\n"); // debug

  global int $nkPoseStackEditorPoseIndex;
  global string $nkPoseStackEditorPoseName;
  global string $nkPoseStackEditorNodes[];
  global string $nkPoseStackEditorPoseSettings[];
  initializeEditorParameters();

  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  int $poseIndex = qFirstIndex("textScrollList", "-sii", $poseList);
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  string $pose = getPose($poseIndex);
  if (!`size $pose`) return;

  $nkPoseStackEditorPoseIndex = $poseIndex;
  $nkPoseStackEditorPoseName = extractPoseName($pose);

  string $poseTransforms[] = extractPoseTransforms($pose);
  // print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poseTransforms`) return;

  for ($i = 0; $i < `size $poseTransforms`; $i++) {
    string $poseTransform = $poseTransforms[$i];
    // print("  poseTransform:" + $poseTransform + "\n"); // debug
    string $node = extractTransformNode($poseTransform);
    // print("    node       :" + $node + "\n"); // debug
    string $poseSetting = extractPoseSetting($poseTransform);
    // print("    poseSetting:" + $poseSetting + "\n"); // debug
    $nkPoseStackEditorNodes[$i] = $node;
    $nkPoseStackEditorPoseSettings[$i] = $poseSetting;
  }
  // print("  nkPoseStackEditorPoseName    :" + $nkPoseStackEditorPoseName + "\n"); // debug
  // print("  nkPoseStackEditorNodes       :{\n    " + stringArrayToString($nkPoseStackEditorNodes, ",\n    ") + "\n  }\n"); // debug
  // print("  nkPoseStackEditorPoseSettings:{\n    " + stringArrayToString($nkPoseStackEditorPoseSettings, ",\n    ") + "\n  }\n"); // debug

  nkPoseStackEventController("nkPoseStackWindow", "postc", "editPoseButton");
}

/*-
@returns <>
*/
proc duplicatePoseButtonPressed() {
  // print("duplicatePoseButtonPressed\n"); // debug
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  int $poseIndex = qFirstIndex("textScrollList", "-sii", $poseList);
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  if ($poseIndex == -1) return;
  duplicatePose($poseIndex);
}

/*-
@returns <>
*/
proc updatePoseButtonPressed() {
  // print("updatePoseButtonPressed\n"); // debug
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  int $poseIndex = qFirstIndex("textScrollList", "-sii", $poseList);
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  if ($poseIndex == -1) return;
  updatePose($poseIndex);
}

/*-
@param $isOpposite <boolean>
@returns <>
*/
proc selectButtonPressed(int $isOpposite) {
  // print("selectButtonPressed\n"); // debug
  // print("  isOpposite:" + $isOpposite + "\n"); // debug
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  int $poseIndex = qFirstIndex("textScrollList", "-sii", $poseList);
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  if ($poseIndex == -1) return;
  selectNodes($poseIndex, $isOpposite);
}

/*-
@param $isOpposite <boolean>
@returns <>
*/
proc pasteButtonPressed(int $isOpposite) {
  // print("pasteButtonPressed\n"); // debug
  // print("  isOpposite:" + $isOpposite + "\n"); // debug
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  int $poseIndex = qFirstIndex("textScrollList", "-sii", $poseList);
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  if ($poseIndex == -1) return;
  string $nodes[] = getSelectedNodes();
  // print("  nodes:{\n    " + (stringArrayToString($nodes, ",\n    ")) + "\n  }\n"); // debug
  if (!`size $nodes`) return;
  pastePose($poseIndex, $isOpposite, $nodes);
}

/*-
@returns <>
*/
proc poseListDoubleClicked() {
  // print("poseListDoubleClicked\n"); // debug
  editPoseButtonPressed();
}

/*-
@returns <>
*/
proc deletePoseButtonPressed() {
  // print("deletePoseButtonPressed\n"); // debug
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  int $poseIndex = qFirstIndex("textScrollList", "-sii", $poseList);
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  if ($poseIndex == -1) return;
  deletePose($poseIndex);
}

/*-
@returns <>
*/
proc moveUpPoseButtonPressed() {
  // print("moveUpPoseButtonPressed\n"); // debug
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  int $poseIndex = qFirstIndex("textScrollList", "-sii", $poseList);
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  if ($poseIndex == -1) return;
  moveUpPose($poseIndex);
}

/*-
@returns <>
*/
proc moveDownPoseButtonPressed() {
  // print("moveDownPoseButtonPressed\n"); // debug
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  int $poseIndex = qFirstIndex("textScrollList", "-sii", $poseList);
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  if ($poseIndex == -1) return;
  moveDownPose($poseIndex);
}

// -----------------------------------------------------------------------------
// ウィンドウ定義
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc buildEditorWindow() {
  // print("buildEditorWindow\n"); // debug
  global int $nkPoseStackEditorPoseIndex;
  global string $nkPoseStackEditorPoseName;
  windowClose("nkPoseStackEditorWindow");

  string $modeLabel = ($nkPoseStackEditorPoseIndex < 0) ? "Add" : "Edit";
  // print("  modeLabel:" + $modeLabel + "\n"); // debug

  string $nkPoseStackEditorWindow = `window
      -mxb false
      -mnb false
      -p (getUIControl("nkPoseStackWindow", "nkPoseStackWindow"))
      -s true
      -t ($modeLabel + " - nkPoseStack")
      "nkPoseStackEditorWindow"`;
    string $outerForm = `formLayout "outerForm"`;
      string $poseNameText = `textFieldGrp
          -adj 2
          -cat 2 "right" -5
          -cw2 60 10
          -l "Pose Name:"
          -tx $nkPoseStackEditorPoseName
          "poseNameText"`;

      string $nodeList = `textScrollList
          -ams true
          -ekf false
          -h 44
          "nodeList"`;

      string $poseSettingColumn = `columnLayout
          -adj true
          -rs 3
          "poseSettingColumn"`;
        string $pasteFrame = `frameLayout
            -l "Paste"
            -bgs true
            -cll false
            -mh 7
            -mw 7
            "pasteFrame"`;
          string $pasteColumn = `columnLayout
              -adj true
              -rs 3
              "pasteColumn"`;
            string $pasteAttributesCheckBoxGrp = `checkBoxGrp
                -cw4 80 60 60 60
                -en false
                -l "Attributes:"
                -la3 "T" "R" "S"
                -ncb 3
                "pasteAttributesCheckBoxGrp"`;
          setParent ..;
        setParent ..;

        string $selectFrame = `frameLayout
            -l "Select"
            -bgs true
            -cll false
            -mh 7
            -mw 7
            "selectFrame"`;
          string $selectColumn = `columnLayout
              -adj true
              -rs 3
              "selectColumn"`;
            string $selectTextForm = `formLayout "selectTextForm"`;
              string $selectPatternAText = `textFieldGrp
                  -adj 2
                  -cat 2 "right" -5
                  -cw2 16 10
                  -en false
                  -l "A:"
                  "selectPatternAText"`;
              string $selectPatternBText = `textFieldGrp
                  -adj 2
                  -cat 2 "right" -5
                  -cw2 16 10
                  -en false
                  -l "B:"
                  "selectPatternBText"`;
            setParent ..;
          setParent ..;
        setParent ..;

        string $mirrorFrame = `frameLayout
            -l "Mirror"
            -bgs true
            -cll false
            -mh 7
            -mw 7
            "mirrorFrame"`;
          string $mirrorColumn = `columnLayout
              -adj true
              -rs 3
              "mirrorColumn"`;
            string $mirrorAxisRadioButton = `radioButtonGrp
                // -bgc 0.25 0.25 0.5
                -cw4 80 60 60 60
                -en false
                -l "Mirror Axis:"
                -la3 "X" "Y" "Z"
                -nrb 3
                "mirrorAxisRadioButton"`;
            string $primaryAxisRadioButton = `radioButtonGrp
                // -bgc 0.25 0.25 0.5
                -cw4 80 60 60 60
                -en false
                -l "Primary Axis:"
                -la3 "X" "Y" "Z"
                -nrb 3
                "primaryAxisRadioButton"`;
            string $secondaryAxisRadioButton = `radioButtonGrp
                // -bgc 0.25 0.25 0.5
                -cw4 80 60 60 60
                -en false
                -l "Secondary Axis:"
                -la3 "X" "Y" "Z"
                -nrb 3
                "secondaryAxisRadioButton"`;
            string $invertAxisCheckBoxGrp = `checkBoxGrp
                -cw3 80 60 60
                -en false
                -l "Invert Axis:"
                -la2 "Primary" "Secondary"
                -ncb 2
                "invertAxisCheckBoxGrp"`;
          setParent ..;
        setParent ..;
      setParent ..;

      string $buttonsForm = `formLayout "buttonsForm"`;
        string $okButton = `button -h 26 -l $modeLabel "okButton"`;
        string $applyButton = `button -h 26 -l "Apply" "applyButton"`;
        string $cancelButton = `button -h 26 -l "Cancel" "cancelButton"`;
      setParent ..;
    setParent ..;

  formLayout -e
      -af $poseNameText "top" 5
      -af $poseNameText "left" 5
      -af $poseNameText "right" 5
      -ac $nodeList "top" 3 $poseNameText
      -af $nodeList "left" 3
      -af $nodeList "right" 3
      -ac $nodeList "bottom" 3 $poseSettingColumn
      -af $poseSettingColumn "left" 3
      -af $poseSettingColumn "right" 3
      -ac $poseSettingColumn "bottom" 3 $buttonsForm
      -af $buttonsForm "left" 5
      -af $buttonsForm "right" 5
      -af $buttonsForm "bottom" 5
      $outerForm;

  formLayout -e
      -af $selectPatternAText "top" 0
      -af $selectPatternAText "left" 0
      -ap $selectPatternAText "right" 0 50
      -af $selectPatternBText "top" 0
      -ap $selectPatternBText "left" 0 50
      -af $selectPatternBText "right" 0
      $selectTextForm;

  formLayout -e
      -af $okButton "top" 2
      -af $okButton "left" 0
      -ap $okButton "right" 2 33
      -af $okButton "bottom" 0
      -af $applyButton "top" 2
      -ap $applyButton "left" 2 33
      -ap $applyButton "right" 2 66
      -af $applyButton "bottom" 0
      -af $cancelButton "top" 2
      -ap $cancelButton "left" 2 66
      -af $cancelButton "right" 0
      -af $cancelButton "bottom" 0
      $buttonsForm;

  window -e -cc "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"cc\", \"nkPoseStackEditorWindow\");" $nkPoseStackEditorWindow;
  textFieldGrp -e -tcc "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"tcc\", \"poseNameText\");" $poseNameText;
  textScrollList -e -sc "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"sc\", \"nodeList\");" $nodeList;
  checkBoxGrp -e -cc1 "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"cc1\", \"pasteAttributesCheckBoxGrp\");" $pasteAttributesCheckBoxGrp;
  checkBoxGrp -e -cc2 "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"cc2\", \"pasteAttributesCheckBoxGrp\");" $pasteAttributesCheckBoxGrp;
  checkBoxGrp -e -cc3 "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"cc3\", \"pasteAttributesCheckBoxGrp\");" $pasteAttributesCheckBoxGrp;
  textFieldGrp -e -tcc "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"tcc\", \"selectPatternAText\");" $selectPatternAText;
  textFieldGrp -e -tcc "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"tcc\", \"selectPatternBText\");" $selectPatternBText;
  radioButtonGrp -e -onc "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"onc\", \"mirrorAxisRadioButton\");" $mirrorAxisRadioButton;
  radioButtonGrp -e -onc "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"onc\", \"primaryAxisRadioButton\");" $primaryAxisRadioButton;
  radioButtonGrp -e -onc "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"onc\", \"secondaryAxisRadioButton\");" $secondaryAxisRadioButton;
  checkBoxGrp -e -cc1 "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"cc1\", \"invertAxisCheckBoxGrp\");" $invertAxisCheckBoxGrp;
  checkBoxGrp -e -cc2 "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"cc2\", \"invertAxisCheckBoxGrp\");" $invertAxisCheckBoxGrp;
  button -e -c "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"c\", \"okButton\");" $okButton;
  button -e -c "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"c\", \"applyButton\");" $applyButton;
  button -e -c "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"c\", \"cancelButton\");" $cancelButton;

  // print("  " + $nkPoseStackEditorWindow + "\n"); // debug
  // print("  " + $outerForm + "\n"); // debug
  // print("  " + $poseNameText + "\n"); // debug
  // print("  " + $nodeList + "\n"); // debug
  // print("  " + $poseSettingColumn + "\n"); // debug
  // print("  " + $pasteFrame + "\n"); // debug
  // print("  " + $pasteColumn + "\n"); // debug
  // print("  " + $pasteAttributesCheckBoxGrp + "\n"); // debug
  // print("  " + $selectFrame + "\n"); // debug
  // print("  " + $selectColumn + "\n"); // debug
  // print("  " + $selectTextForm + "\n"); // debug
  // print("  " + $selectPatternAText + "\n"); // debug
  // print("  " + $selectPatternBText + "\n"); // debug
  // print("  " + $mirrorFrame + "\n"); // debug
  // print("  " + $mirrorColumn + "\n"); // debug
  // print("  " + $mirrorAxisRadioButton + "\n"); // debug
  // print("  " + $primaryAxisRadioButton + "\n"); // debug
  // print("  " + $secondaryAxisRadioButton + "\n"); // debug
  // print("  " + $invertAxisCheckBoxGrp + "\n"); // debug
  // print("  " + $buttonsForm + "\n"); // debug
  // print("  " + $okButton + "\n"); // debug
  // print("  " + $applyButton + "\n"); // debug
  // print("  " + $cancelButton + "\n"); // debug

  appendUIControls({
    $nkPoseStackEditorWindow,
    $poseNameText,
    $nodeList,
    $pasteAttributesCheckBoxGrp,
    $selectPatternAText,
    $selectPatternBText,
    $mirrorAxisRadioButton,
    $primaryAxisRadioButton,
    $secondaryAxisRadioButton,
    $invertAxisCheckBoxGrp
  });

  updateNodeList(false);
  showWindow $nkPoseStackEditorWindow;
}

/*-
@returns <>
*/
proc buildMainWindow() {
  // print("buildMainWindow\n"); // debug
  windowClose("nkPoseStackWindow");

  string $sourceDirname = getSourceDirname("nkPoseStack");
  string $iconDir;
  if (`size $sourceDirname`) $iconDir = $sourceDirname + "/nkPoseStackIcons/";
  string $addIcon = $iconDir + "addPose.png";
  string $deleteIcon = $iconDir + "deletePose.png";
  string $editIcon = $iconDir + "editPose.png";
  string $duplicateIcon = $iconDir + "duplicatePose.png";
  string $moveUpIcon = $iconDir + "moveUpPose.png";
  string $moveDownIcon = $iconDir + "moveDownPose.png";
  string $selectSourceIcon = $iconDir + "selectSource.png";
  string $selectOppositeIcon = $iconDir + "selectOpposite.png";
  string $pasteSourceIcon = $iconDir + "pasteSource.png";
  string $pasteOppositeIcon = $iconDir + "pasteOpposite.png";
  string $updateIcon = $iconDir + "updatePose.png";
  // print("  addIcon           :" + $addIcon + "\n"); // debug
  // print("  deleteIcon        :" + $deleteIcon + "\n"); // debug
  // print("  editIcon          :" + $editIcon + "\n"); // debug
  // print("  duplicateIcon     :" + $duplicateIcon + "\n"); // debug
  // print("  moveUpIcon        :" + $moveUpIcon + "\n"); // debug
  // print("  moveDownIcon      :" + $moveDownIcon + "\n"); // debug
  // print("  selectSourceIcon  :" + $selectSourceIcon + "\n"); // debug
  // print("  selectOppositeIcon:" + $selectOppositeIcon + "\n"); // debug
  // print("  pasteSourceIcon   :" + $pasteSourceIcon + "\n"); // debug
  // print("  pasteOppositeIcon :" + $pasteOppositeIcon + "\n"); // debug
  // print("  updateIcon        :" + $updateIcon + "\n"); // debug

  string $nkPoseStackWindow = `window
      -mxb false
      -mnb false
      -s true
      -t "nkPoseStack"
      "nkPoseStackWindow"`;
    string $outerForm = `formLayout "outerForm"`;
      string $menuBar = `menuBarLayout
          // -bgc 0.25 0.5 0.25
          "menuBar"`;
        string $fileMenu = `menu
            -l "File"
            "fileMenu"`;
          string $clearListMenuItem = `menuItem
              -l "Clear List"
              "clearListMenuItem"`;
          menuItem -d true;
          string $openListMenuItem = `menuItem
              -l "Open List"
              "openListMenuItem"`;
          string $importListMenuItem = `menuItem
              -l "Import List"
              "importListMenuItem"`;
          menuItem -d true;
          string $saveListAsMenuItem = `menuItem
              -l "Save List As..."
              "saveListAsMenuItem"`;
          menuItem -d true;
          string $resetWindowMenuItem = `menuItem
              -l "Reset Window"
              "resetWindowMenuItem"`;
          menuItem -d true;
          string $quitMenuItem = `menuItem
              -l "Quit"
              "quitMenuItem"`;
        string $helpMenu = `menu
            -hm true
            -l "Help"
            "helpMenu"`;
          string $aboutMenuItem = `menuItem
              -l "About nkPoseStack"
              "aboutMenuItem"`;
      setParent ..;

      string $topToolRow = `rowLayout
          -adj 12
          // -bgc 0.5 0.25 0.25
          -h 26
          -nc 12
          -rat 1 "bottom" 0
          -rat 2 "bottom" 0
          -rat 3 "bottom" 0
          -rat 4 "bottom" 0
          -rat 5 "bottom" 0
          -rat 6 "bottom" 0
          -rat 7 "bottom" 0
          -rat 8 "bottom" 0
          -rat 9 "bottom" 0
          -rat 10 "bottom" 0
          -rat 11 "bottom" 0
          -rat 12 "bottom" 0
          "topToolRow"`;
        string $addPoseButton = `iconTextButton
            -ann "Add"
            // -bgc 0.25 0.5 0.5
            -i $addIcon
            -w 23
            "addPoseButton"`;
        string $editPoseButton = `iconTextButton
            -ann "Edit"
            // -bgc 0.25 0.5 0.5
            -i $editIcon
            -w 23
            "editPoseButton"`;
        string $duplicatePoseButton = `iconTextButton
            -ann "Duplicate"
            // -bgc 0.25 0.5 0.5
            -i $duplicateIcon
            -w 23
            "duplicatePoseButton"`;
        separator -h 24 -st "single" -vis true;
        string $updatePoseButton = `iconTextButton
            -ann "Update"
            // -bgc 0.25 0.5 0.5
            -i $updateIcon
            -w 23
            "updatePoseButton"`;
        separator -h 24 -st "single" -vis true;
        string $selectSourceButton = `iconTextButton
            -ann "Select Source"
            // -bgc 0.25 0.5 0.5
            -i $selectSourceIcon
            -w 23
            "selectSourceButton"`;
        string $selectOppositeButton = `iconTextButton
            -ann "Select Opposite"
            // -bgc 0.25 0.5 0.5
            -i $selectOppositeIcon
            -w 23
            "selectOppositeButton"`;
        separator -h 24 -st "single" -vis true;
        string $pasteSourceButton = `iconTextButton
            -ann "As Is Paste"
            // -bgc 0.25 0.5 0.5
            -i $pasteSourceIcon
            -w 23
            "pasteSourceButton"`;
        string $pasteOppositeButton = `iconTextButton
            -ann "Mirror Paste"
            // -bgc 0.25 0.5 0.5
            -i $pasteOppositeIcon
            -w 23
            "pasteOppositeButton"`;
        separator -st "none" -vis false;
      setParent ..;

      string $poseList = `textScrollList
          -ams false
          -ekf false
          -h 44
          "poseList"`;

      string $bottomToolRow = `rowLayout
          -adj 1
          // -bgc 0.5 0.25 0.25
          -nc 4
          "bottomToolRow"`;
        separator -st "none" -vis false;
        string $deletePoseButton = `iconTextButton
            -ann "Delete"
            // -bgc 0.25 0.5 0.5
            -i $deleteIcon
            -w 23
            "deletePoseButton"`;
        string $moveUpPoseButton = `iconTextButton
            -ann "Move Up"
            // -bgc 0.25 0.5 0.5
            -i $moveUpIcon
            -w 23
            "moveUpPoseButton"`;
        string $moveDownPoseButton = `iconTextButton
            -ann "Move Down"
            // -bgc 0.25 0.5 0.5
            -i $moveDownIcon
            -w 23
            "moveDownPoseButton"`;
      setParent ..;
    setParent ..;

  formLayout -e
      -af $menuBar "top" 0
      -af $menuBar "left" 0
      -af $menuBar "right" 0
      -ac $topToolRow "top" 0 $menuBar
      -af $topToolRow "left" 5
      -af $topToolRow "right" 5
      -ac $poseList "top" 5 $topToolRow
      -af $poseList "left" 5
      -af $poseList "right" 5
      -ac $poseList "bottom" 5 $bottomToolRow
      -af $bottomToolRow "left" 5
      -af $bottomToolRow "right" 5
      -af $bottomToolRow "bottom" 5
      $outerForm;

  window -e -cc "nkPoseStackEventController(\"nkPoseStackWindow\", \"cc\", \"nkPoseStackWindow\");" $nkPoseStackWindow;
  menuItem -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"clearListMenuItem\");" $clearListMenuItem;
  menuItem -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"openListMenuItem\");" $openListMenuItem;
  menuItem -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"importListMenuItem\");" $importListMenuItem;
  menuItem -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"saveListAsMenuItem\");" $saveListAsMenuItem;
  menuItem -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"resetWindowMenuItem\");" $resetWindowMenuItem;
  menuItem -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"quitMenuItem\");" $quitMenuItem;
  menuItem -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"aboutMenuItem\");" $aboutMenuItem;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"addPoseButton\");" $addPoseButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"editPoseButton\");" $editPoseButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"duplicatePoseButton\");" $duplicatePoseButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"updatePoseButton\");" $updatePoseButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"selectSourceButton\");" $selectSourceButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"selectOppositeButton\");" $selectOppositeButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"pasteSourceButton\");" $pasteSourceButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"pasteOppositeButton\");" $pasteOppositeButton;
  textScrollList -e -dcc "nkPoseStackEventController(\"nkPoseStackWindow\", \"dcc\", \"poseList\");" $poseList;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"deletePoseButton\");" $deletePoseButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"moveUpPoseButton\");" $moveUpPoseButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"moveDownPoseButton\");" $moveDownPoseButton;

  // print("  " + $nkPoseStackWindow + "\n"); // debug
  // print("  " + $outerForm + "\n"); // debug
  // print("  " + $menuBar + "\n"); // debug
  // print("  " + $fileMenu + "\n"); // debug
  // print("  " + $clearListMenuItem + "\n"); // debug
  // print("  " + $openListMenuItem + "\n"); // debug
  // print("  " + $importListMenuItem + "\n"); // debug
  // print("  " + $saveListAsMenuItem + "\n"); // debug
  // print("  " + $resetWindowMenuItem + "\n"); // debug
  // print("  " + $quitMenuItem + "\n"); // debug
  // print("  " + $helpMenu + "\n"); // debug
  // print("  " + $aboutMenuItem + "\n"); // debug
  // print("  " + $topToolRow + "\n"); // debug
  // print("  " + $bottomToolRow + "\n"); // debug
  // print("  " + $addPoseButton + "\n"); // debug
  // print("  " + $editPoseButton + "\n"); // debug
  // print("  " + $duplicatePoseButton + "\n"); // debug
  // print("  " + $updatePoseButton + "\n"); // debug
  // print("  " + $selectSourceButton + "\n"); // debug
  // print("  " + $selectOppositeButton + "\n"); // debug
  // print("  " + $pasteSourceButton + "\n"); // debug
  // print("  " + $pasteOppositeButton + "\n"); // debug
  // print("  " + $poseList + "\n"); // debug
  // print("  " + $deletePoseButton + "\n"); // debug
  // print("  " + $moveUpPoseButton + "\n"); // debug
  // print("  " + $moveDownPoseButton + "\n"); // debug

  appendUIControls({
    $nkPoseStackWindow,
    $poseList
  });

  subscribePosesObservers();
  updatePoseList(-1);
  showWindow $nkPoseStackWindow;
}

// -----------------------------------------------------------------------------
// イベントコントローラ
// -----------------------------------------------------------------------------
/*-
@param $window <string>
@param $event <string>
@param $control <string>
@returns <>
*/
global proc nkPoseStackEventController(
  string $window,
  string $event,
  string $control
) {
  // print("nkPoseStackEventController\n"); // debug
  // print("  window :" + $window + "\n"); // debug
  // print("  event  :" + $event + "\n"); // debug
  // print("  control:" + $control + "\n"); // debug
  switch ($window) {
    case "nkPoseStackEditorWindow":
      switch ($event) {
        case "c":
          switch ($control) {
            case "okButton": okButtonPressed(); break;
            case "applyButton": applyButtonPressed(); break;
            case "cancelButton": cancelButtonPressed(); break;
            default: break;
          }
          break;
        case "cc":
          switch ($control) {
            case "nkPoseStackEditorWindow": nkPoseStackEditorWindowClosed(); break;
            default: break;
          }
          break;
        case "cc1":
          switch ($control) {
            case "pasteAttributesCheckBoxGrp": pasteAttributesCheckBoxGrp1Changed(); break;
            case "invertAxisCheckBoxGrp": invertAxisCheckBoxGrp1Changed(); break;
            default: break;
          }
          break;
        case "cc2":
          switch ($control) {
            case "pasteAttributesCheckBoxGrp": pasteAttributesCheckBoxGrp2Changed(); break;
            case "invertAxisCheckBoxGrp": invertAxisCheckBoxGrp2Changed(); break;
            default: break;
          }
          break;
        case "cc3":
          switch ($control) {
            case "pasteAttributesCheckBoxGrp": pasteAttributesCheckBoxGrp3Changed(); break;
            default: break;
          }
          break;
        case "onc":
          switch ($control) {
            case "mirrorAxisRadioButton": mirrorAxisRadioButtonOn(); break;
            case "primaryAxisRadioButton": primaryAxisRadioButtonOn(); break;
            case "secondaryAxisRadioButton": secondaryAxisRadioButtonOn(); break;
            default: break;
          }
          break;
        case "sc":
          switch ($control) {
            case "nodeList": nodeListSelected(); break;
            default: break;
          }
          break;
        case "tcc":
          switch ($control) {
            case "poseNameText": poseNameTextChanged(); break;
            case "selectPatternAText": selectPatternATextChanged(); break;
            case "selectPatternBText": selectPatternBTextChanged(); break;
            default: break;
          }
          break;
        default: break;
      }
      break;
    case "nkPoseStackWindow":
      switch ($event) {
        case "c":
          switch ($control) {
            case "clearListMenuItem": clearListMenuItemSelected(); break;
            case "openListMenuItem": openListMenuItemSelected(); break;
            case "importListMenuItem": importListMenuItemSelected(); break;
            case "saveListAsMenuItem": saveListAsMenuItemSelected(); break;
            case "resetWindowMenuItem": resetWindowMenuItemSelected(); break;
            case "quitMenuItem": quitMenuItemSelected(); break;
            case "aboutMenuItem": aboutMenuItemSelected(); break;
            case "addPoseButton": addPoseButtonPressed(); break;
            case "editPoseButton": editPoseButtonPressed(); break;
            case "duplicatePoseButton": duplicatePoseButtonPressed(); break;
            case "updatePoseButton": updatePoseButtonPressed(); break;
            case "selectSourceButton": selectButtonPressed(false); break;
            case "selectOppositeButton": selectButtonPressed(true); break;
            case "pasteSourceButton": pasteButtonPressed(false); break;
            case "pasteOppositeButton": pasteButtonPressed(true); break;
            case "deletePoseButton": deletePoseButtonPressed(); break;
            case "moveUpPoseButton": moveUpPoseButtonPressed(); break;
            case "moveDownPoseButton": moveDownPoseButtonPressed(); break;
            default: break;
          }
          break;
        case "cc":
          switch ($control) {
            case "nkPoseStackWindow": nkPoseStackWindowClosed(); break;
            default: break;
          }
          break;
        case "dcc":
          switch ($control) {
            case "poseList": poseListDoubleClicked(); break;
            default: break;
          }
          break;
        case "postc":
          switch ($control) {
            case "addPoseButton": buildEditorWindow(); break;
            case "editPoseButton": buildEditorWindow(); break;
            default: break;
          }
          break;
        default: break;
      }
      break;
    default: break;
  }
}

// -----------------------------------------------------------------------------
// ドメインイベントハンドラ
// -----------------------------------------------------------------------------
/*-
@param $poseIndex <int>
@returns <>
*/
global proc nkPoseStackPosesChanged(int $poseIndex) {
  // print("nkPoseStackPosesChanged\n"); // debug
  // print("  poseIndex:" + $poseIndex + "\n"); // debug
  updatePoseList($poseIndex);
}

// -----------------------------------------------------------------------------
// システムイベントハンドラ
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// メイン
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
// proc registerScriptJob() {
// }

/*-
@returns <>
*/
proc initialize() {
  initializeInitParameters();
  buildMainWindow();
  // registerScriptJob();
}

/*-
@returns <string>
*/
global proc string nkPoseStackVersion() {
  return "3.7.0";
}

/*-
@returns <>
*/
global proc nkPoseStack() {
  initialize();
}

/*
eval ("source \"" + `getenv "MAYA_APP_DIR"` + "/dev/nkPoseStack/nkPoseStack.mel\"");
nkPoseStack;
*/
