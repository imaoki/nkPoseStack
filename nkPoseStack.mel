/*! © 2023 imaoki | MIT License | https://github.com/imaoki */

// /////////////////////////////////////////////////////////////////////////////
// ボイラープレート
// /////////////////////////////////////////////////////////////////////////////
/*1.0.0:配列*/proc int minFloatArrayCount(float $a[], float $b[]) {int $numA = `size $a`;int $numB = `size $b`;return `min $numA $numB`;}proc int minIntArrayCount(int $a[], int $b[]) {int $numA = `size $a`;int $numB = `size $b`;return `min $numA $numB`;}proc int minStringArrayCount(string $a[], string $b[]) {int $numA = `size $a`;int $numB = `size $b`;return `min $numA $numB`;}
/*1.1.0:アサーション*/proc string assertTrue(int $a) {return ($a == true) ? "" : ("Assert: expected 1, got " + $a);}proc string assertFalse(int $a) {return ($a == false) ? "" : ("Assert: expected 0, got " + $a);}proc string assertFloatEqual(float $e, float $a, float $t) {return (`abs ($e - $a)` <= $t) ? "" : ("Assert: expected " + $e + ", got " + $a);}proc string assertFloatNotEqual(float $e, float $a, float $t) {return (`abs ($e - $a)` > $t) ? "" : ("Assert: expected " + $e + ", got " + $a);}proc string assertIntEqual(int $e, int $a) {return ($a == $e) ? "" : ("Assert: expected " + $e + ", got " + $a);}proc string assertIntNotEqual(int $e, int $a) {return ($a != $e) ? "" : ("Assert: expected " + $e + ", got " + $a);}proc string assertStringEqual(string $e, string $a) {return ($a == $e) ? "" : ("Assert: expected " + $e + ", got " + $a);}proc string assertStringNotEqual(string $e, string $a) {return ($a != $e) ? "" : ("Assert: expected " + $e + ", got " + $a);}proc string assertFloatArrayEqual(float $es[], float $as[], float $t) {int $numAs = `size $as`;int $isEqual = $numAs == `size $es`;if ($isEqual) {for ($i = 0; $i < $numAs; $i++) {$isEqual = `abs ($es[$i] - $as[$i])` <= $t;if (!$isEqual) break;}}return ($isEqual) ? "" : ("Assert: expected {" + floatArrayToString($es, ", ") + "}, got {" + floatArrayToString($as, ", ") + "}");}proc string assertIntArrayEqual(int $es[], int $as[]) {int $numAs = `size $as`;int $isEqual = $numAs == `size $es`;if ($isEqual) {for ($i = 0; $i < $numAs; $i++) {$isEqual = $as[$i] == $es[$i];if (!$isEqual) break;}}return ($isEqual) ? "" : ("Assert: expected {" + intArrayToString($es, ", ") + "}, got {" + intArrayToString($as, ", ") + "}");}proc string assertStringArrayEqual(string $es[], string $as[]) {int $numAs = `size $as`;int $isEqual = $numAs == `size $es`;if ($isEqual) {for ($i = 0; $i < $numAs; $i++) {$isEqual = $as[$i] == $es[$i];if (!$isEqual) break;}}return ($isEqual) ? "" : ("Assert: expected {" + stringArrayToString($es, ", ") + "}, got {" + stringArrayToString($as, ", ") + "}");}proc testNewScene() {file -f -new;}proc testOpenScene(string $filename) {file -f -op "v=0;"  -iv  -typ "mayaAscii" -pmt false -o $filename;}
/*1.5.2:ファイル*/proc string escapeStringForPythonAtFile(string $input) {string $escapedText;int $size = `size $input`;for ($i = 1; $i <= $size; $i++) {string $c = `substring $input $i $i`;switch ($c) {case "\\": $escapedText += "\\\\"; break;case "'": $escapedText += "\\'"; break;case "\n": $escapedText += "\\n"; break;case "\r": $escapedText += "\\r"; break;default: $escapedText += $c; break;}}return $escapedText;}proc int isValidFilename(string $input) {return (`match "[:\?\"\*/\\<>\|\n\r\t]" $input` == "");}proc string escapeInvalidFileNameChars(string $input, string $replacement) {string $pattern = escapeStringForPythonAtFile("[:\?\"\*/\\<>\|\n\r\t]");$input = escapeStringForPythonAtFile($input);$replacement = escapeStringForPythonAtFile($replacement);python("import re");string $result = `python("re.sub(r'" + $pattern + "', '" + $replacement + "', '" + $input + "')")`;return $result;}proc string getSourceFilename(string $procName) {string $filename;string $thisIs = `whatIs $procName`;string $pattern1 = "^Mel procedure found in: *";string $pattern2 = "^Script found in: *";if (`match $pattern1 $thisIs` != "") {$filename = `substitute $pattern1 $thisIs ""`;}else if (`match $pattern2 $thisIs` != "") {$filename = `substitute $pattern2 $thisIs ""`;}return $filename;}proc string getSourceDirname(string $procName) {return dirname(getSourceFilename($procName));}proc int existsDirname(string $dirname) {return `filetest -d $dirname`;}proc int existsFilename(string $filename) {return `filetest -f $filename`;}proc string[] getDirnames(string $dirname) {string $subDirnames[];string $filenames[] = `getFileList -fld $dirname`;for ($i = 0; $i < `size $filenames`; $i++) {string $subDirname = $dirname + "/" + $filenames[$i];if (existsDirname($subDirname)) {$subDirnames[`size $subDirnames`] = $subDirname;}}$subDirnames = `sortCaseInsensitive $subDirnames`;return $subDirnames;}proc string[] getFilenames(string $dirname, string $filenamePattern) {string $filenames[] = `getFileList -fs $filenamePattern -fld $dirname`;for ($i = 0; $i < `size $filenames`; $i++) {$filenames[$i] = $dirname + "/" + $filenames[$i];}$filenames = `sortCaseInsensitive $filenames`;return $filenames;}proc string getOpenFilename(string $caption, string $fileFilter) {string $filename;string $filenames[] = `fileDialog2 -cap $caption -ds 2 -ff $fileFilter -fm 1`;if (`size $filenames`) $filename = $filenames[0];return $filename;}proc string getSaveFilename(string $caption, string $fileFilter) {string $filename;string $filenames[] = `fileDialog2 -cap $caption -ds 2 -ff $fileFilter -fm 0`;if (`size $filenames`) $filename = $filenames[0];return $filename;}proc string[] readAllLines(string $filename, string $encoding) {if (!`size $encoding`) $encoding = "utf-8";string $lines[];if (!existsFilename($filename)) return $lines;python("with open('" + $filename + "', 'r', encoding='" + $encoding + "') as f:" + " lines = tuple(s.rstrip('\\r\\n') for s in f.readlines())");$lines = `python("lines")`;return $lines;}proc string readAllText(string $filename, string $encoding) {if (!`size $encoding`) $encoding = "utf-8";string $text;if (!existsFilename($filename)) return $text;python("with open('" + $filename + "', 'r', encoding='" + $encoding + "') as f: text = f.read()");$text = `python("text")`;return $text;}proc int writeAllText(string $filename, string $encoding, string $input) {string $dirname = dirname($filename);if (!existsDirname($dirname)) return false;$input = escapeStringForPythonAtFile($input);if (!`size $encoding`) $encoding = "utf-8";python("with open('" + $filename + "', 'w', encoding='" + $encoding + "') as f:" + " num = f.write('" + $input + "')");return (existsFilename($filename));}proc int writeAllLines(string $filename, string $encoding, string $lines[]) {string $text = stringArrayToString($lines, "\n");if (`size $lines`) $text += "\n";return (writeAllText($filename, $encoding, $text));}proc int makeDirs(string $dirname) {if (existsDirname($dirname)) return true;if (existsFilename($dirname)) return false;python("import os");python("os.makedirs('" + $dirname + "')");return (existsDirname($dirname));}proc int moveDir(string $sourceDirname, string $destDirname) {if (!existsDirname($sourceDirname)) return false;if (existsDirname($destDirname) || existsFilename($destDirname)) return false;python("import os");python("os.rename('" + $sourceDirname + "', '" + $destDirname +"')");return (!existsDirname($sourceDirname) && existsDirname($destDirname));}proc int moveFile(string $sourceFilename, string $destFilename) {if (!existsFilename($sourceFilename)) return false;if (existsDirname($destFilename) || existsFilename($destFilename)) return false;python("import os");python("os.rename('" + $sourceFilename + "', '" + $destFilename +"')");return (!existsFilename($sourceFilename) && existsFilename($destFilename));}proc int deleteDir(string $dirname) {if (!existsDirname($dirname)) return false;python("import os");python("if len(os.listdir('" + $dirname + "')) == 0:" + " os.rmdir('" + $dirname + "')");return (!existsDirname($dirname));}proc int deleteFile(string $filename) {if (!existsFilename($filename)) return false;python("import os");python("os.remove('" + $filename + "')");return (!existsFilename($filename));}
/*1.9.3:ノード*/proc int existsNodes(string $nodes[]) {int $numNodes = `size $nodes`;if (!$numNodes) return false;int $count;for ($n in $nodes) {if (`objExists $n`) $count += 1;}return ($count == $numNodes);}proc int isType(string $n, string $types[], int $exactType) {if (!`objExists $n`) return false;if (!`size $types`) return true;string $nodeType = `nodeType $n`;string $nodeTypes[] = `nodeType -i $n`;int $isMatch;if ($exactType) {$isMatch = stringArrayContains($nodeType, $types);}else {for ($type in $types) {$isMatch = stringArrayContains($type, $nodeTypes);if ($isMatch) break;}}return $isMatch;}proc int isSelected(string $n) {if (!`objExists $n`) return false;string $nodes[] = `ls -l -sl $n`;return (`size $nodes` > 0);}proc int isUUID(string $input) {string $hex = "[A-F0-9]";string $digit4 = $hex + $hex + $hex + $hex;string $digit8 = $digit4 + $digit4;string $digit12 = $digit8 + $digit4;return (isValidString($input,$digit8 + "-" + $digit4 + "-" + $digit4 + "-" + $digit4 + "-" + $digit12));}proc string toShortName(string $path) {string $shortName;if (!`size $path`) return $shortName;string $buffer1[];int $numBuffer1 = `tokenize $path "|" $buffer1`;if ($numBuffer1 > 0) {string $buffer2[];int $numBuffer2 = `tokenize $buffer1[$numBuffer1 - 1] ":" $buffer2`;if ($numBuffer2 > 0) {$shortName = $buffer2[$numBuffer2 - 1];}}return $shortName;}proc string toUUID(string $n) {string $uuid;if (!`objExists $n`) return $uuid;string $uuids[] = `ls -uid $n`;if (`size $uuids` == 1) $uuid = $uuids[0];return $uuid;}proc string uuidToLongName(string $uuid) {string $longName;if (!isUUID($uuid)) return $longName;string $longNames[] = `ls -l $uuid`;if (`size $longNames` == 1) $longName = $longNames[0];return $longName;}proc string getParentNode(string $n) {if (!`objExists $n`) return "";string $parents[] = `listRelatives -f -p $n`;if (!`size $parents`) return "";return $parents[0];}proc string getRootNode(string $n) {string $rootNode;if (!`objExists $n`) return $rootNode;$rootNode = $n;string $parentNode = getParentNode($rootNode);while (`objExists $parentNode`) {$rootNode = $parentNode;$parentNode = getParentNode($rootNode);}return $rootNode;}proc string[] collectRootNodes(string $nodes[]) {string $rootNodes[];if (!`size $nodes`) return $rootNodes;for ($n in $nodes) {string $rootNode = getRootNode($n);if (`objExists $rootNode`) {$rootNodes[`size $rootNodes`] = $rootNode;}}$rootNodes = stringArrayRemoveDuplicates($rootNodes);return $rootNodes;}proc string[] collectChildNodes(string $n) {string $childNodes[];if (!`objExists $n`) return $childNodes;$childNodes = `listRelatives -f -c $n`;$childNodes = `sort $childNodes`;return $childNodes;}proc string[] collectDescendantNodes(string $n,string $parentNode,string $types[],int $exactType,string $script) {string $descendantNodes[];if (!`objExists $n`) return $descendantNodes;$n = longNameOf($n);$parentNode = longNameOf($parentNode);string $sourceNode = $n;string $nextNode = $sourceNode;if (`exists $script` && isType($sourceNode, $types, $exactType)) {string $arg1 = "\"" + toUUID($sourceNode) + "\"";string $arg2 = "\"" + toUUID($parentNode) + "\"";string $result[] = `eval $script $arg1 $arg2`;if (`size $result` == 2 && (!`size $result[0]` || isUUID($result[0])) && (!`size $result[1]` || isUUID($result[1]))) {$sourceNode = uuidToLongName($result[0]);$nextNode = uuidToLongName($result[1]);}}if (`objExists $sourceNode`) {$descendantNodes[`size $descendantNodes`] = $sourceNode;}string $childNodes[] = collectChildNodes($nextNode);for ($c in $childNodes) {$descendantNodes = stringArrayCatenate($descendantNodes,collectDescendantNodes($c, $sourceNode, $types, $exactType, $script));}if (`size $types`) {for ($i = `size $descendantNodes` - 1; $i >= 0; $i--) {if (!isType($descendantNodes[$i], $types, $exactType)) {stringArrayRemoveAtIndex($i, $descendantNodes);}}}return $descendantNodes;}proc string[] collectHierarchyNodes(string $nodes[],string $parentNode,string $types[],int $exactType,string $script) {string $hierarchyNodes[];if (!`size $nodes`) return $hierarchyNodes;string $rootNodes[] = collectRootNodes($nodes);for ($n in $rootNodes) {$hierarchyNodes = stringArrayCatenate($hierarchyNodes,collectDescendantNodes($n, $parentNode, $types, $exactType, $script));}$hierarchyNodes = stringArrayRemoveDuplicates($hierarchyNodes);return $hierarchyNodes;}proc string[] gatherNodes(string $types[],int $exactType,int $selectedOnly,string $pattern) {if (!`size $pattern`) $pattern = "*";string $nodes[];if (`size $types`) {for ($type in $types) {if ($selectedOnly) {if ($exactType) {$nodes = stringArrayCatenate($nodes, `ls -l -sl -et $type $pattern`);}else {$nodes = stringArrayCatenate($nodes, `ls -l -sl -typ $type $pattern`);}}else {if ($exactType) {$nodes = stringArrayCatenate($nodes, `ls -l -et $type $pattern`);}else {$nodes = stringArrayCatenate($nodes, `ls -l -typ $type $pattern`);}}}}else {if ($selectedOnly) {$nodes = `ls -l -sl $pattern`;}else {$nodes = `ls -l $pattern`;}}$nodes = stringArrayRemoveDuplicates($nodes);return $nodes;}proc string[] getSourceConnectionNodes(string $nodes[],string $types[],int $exactType) {string $tmpNodes[];for ($n in $nodes) {if (!`objExists $n`) continue;$tmpNodes = stringArrayCatenate($tmpNodes,`listConnections -d false -p false -s true $n`);}$tmpNodes = stringArrayRemoveDuplicates($tmpNodes);string $sourceNodes[];for ($i = 0; $i < `size $tmpNodes`; $i++) {string $tmpNode = longNameOf($tmpNodes[$i]);if (isType($tmpNode, $types, $exactType)) {$sourceNodes[`size $sourceNodes`] = $tmpNode;}}$sourceNodes = `sort $sourceNodes`;return $sourceNodes;}proc string[] getDestConnectionNodes(string $nodes[],string $types[],int $exactType) {string $tmpNodes[];for ($n in $nodes) {if (!`objExists $n`) continue;$tmpNodes = stringArrayCatenate($tmpNodes,`listConnections -d true -p false -s false $n`);}$tmpNodes = stringArrayRemoveDuplicates($tmpNodes);string $destNodes[];for ($i = 0; $i < `size $tmpNodes`; $i++) {string $tmpNode = longNameOf($tmpNodes[$i]);if (isType($tmpNode, $types, $exactType)) {$destNodes[`size $destNodes`] = $tmpNode;}}$destNodes = `sort $destNodes`;return $destNodes;}
/*1.0.0:数値*/proc int isInRangeFloat(float $value, float $min, float $max) {return ($min <= $value && $value <= $max);}proc int isInRangeInt(int $value, int $min, int $max) {return ($min <= $value && $value <= $max);}
/*1.0.0:オブザーバ*/global string $nkObservers[];proc string escapeStringParam(string $input) {string $escapedText;int $size = `size $input`;for ($i = 1; $i <= $size; $i++) {string $c = `substring $input $i $i`;switch ($c) {case "\\": $escapedText += "\\\\"; break;case "\"": $escapedText += "\\\""; break;case "\n": $escapedText += "\\n"; break;case "\r": $escapedText += "\\r"; break;case "\t": $escapedText += "\\t"; break;default: $escapedText += $c; break;}}return $escapedText;}proc string[] escapeStringParams(string $input[]) {string $escapedArray[];for ($s in $input) {$escapedArray[`size $escapedArray`] = escapeStringParam($s);}return $escapedArray;}proc string floatParamsToString(float $params[]) {string $param = "{";int $numParams = `size $params`;for ($i = 0; $i < $numParams; $i++) {string $floatString = (string) $params[$i];if (!`gmatch $floatString "*.*"`) $floatString += ".0";$param += $floatString + (($i < $numParams - 1) ? ", " : "");}$param += "}";return $param;}proc string intParamsToString(int $params[]) {string $param = "{}";if (`size $param`) {$param = "{" + intArrayToString($params, ", ") + "}";}return $param;}proc string stringParamsToString(string $params[]) {string $param = "{}";if (`size $param`) {$param = "{\"" + stringArrayToString(escapeStringParams($params), "\", \"") + "\"}";}return $param;}proc clearObservers() {global string $nkObservers[];clear $nkObservers;}proc int isValidEvent(string $event) {return (isValidString($event, "^[^;]+$"));}proc int isValidProc(string $proc) {return (isValidString($proc, "^[a-zA-Z\|:\._][a-zA-Z0-9\|:\._]*$"));}proc int isValidObserver(string $observer) {return (isValidString($observer, "^[^;]+;[a-zA-Z\|:\._][a-zA-Z0-9\|:\._]*$"));}proc string makeObserver(string $event, string $proc) {string $observer;if (isValidEvent($event) && isValidProc($proc)) {$observer = $event + ";" + $proc;}return $observer;}proc string extractEvent(string $observer) {string $event;string $buffer[];if (`tokenize $observer ";" $buffer` == 2) {$event = $buffer[0];}return $event;}proc string extractProc(string $observer) {string $proc;string $buffer[];if (`tokenize $observer ";" $buffer` == 2) {$proc = $buffer[1];}return $proc;}proc int findObserver(string $observer) {global string $nkObservers[];int $index = -1;for ($i = 0; $i < `size $nkObservers`; $i++) {if ($observer == $nkObservers[$i]) {$index = $i;break;}}return $index;}proc int existsObserver(string $observer) {return (findObserver($observer) >= 0);}proc string[] getObserverProcs(string $event) {global string $nkObservers[];string $procs[];if (!isValidEvent($event)) return $procs;for ($observer in $nkObservers) {if (extractEvent($observer) == $event) {$procs[`size $procs`] = extractProc($observer);}}return $procs;}proc int subscribe(string $event, string $proc) {global string $nkObservers[];string $observer = makeObserver($event, $proc);if (!isValidObserver($observer)) return false;if (existsObserver($observer)) return false;$nkObservers[`size $nkObservers`] = $observer;return true;}proc int unsubscribe(string $event, string $proc) {global string $nkObservers[];string $observer = makeObserver($event, $proc);if (!isValidObserver($observer)) return false;int $index = findObserver($observer);if ($index < 0) return false;stringArrayRemoveAtIndex($index, $nkObservers);return true;}proc notify(string $event) {string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval $proc;}}}proc notifyFloat(string $event, float $param) {string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval $proc $param;}}}proc notifyInt(string $event, int $param) {string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval $proc $param;}}}proc notifyString(string $event, string $param) {string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval $proc $param;}}}proc notifyFloatArray(string $event, float $params[]) {string $param = floatParamsToString($params);string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval ($proc + "(" + $param + ")");}}}proc notifyIntArray(string $event, int $params[]) {string $param = intParamsToString($params);string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval ($proc + "(" + $param + ")");}}}proc notifyStringArray(string $event, string $params[]) {string $param = stringParamsToString($params);string $procs[] = getObserverProcs($event);for ($proc in $procs) {if (`exists $proc`) {eval ($proc + "(" + $param + ")");}}}
/*1.0.0:クォータニオン*/proc int reverseRotateOrder(int $order) {int $reverseOrder[] = {5, 3, 4, 1, 2, 0};return $reverseOrder[$order];}proc float[] eulerToQuat(float $r[], int $order) {float $qx = 0.0;float $qy = 0.0;float $qz = 0.0;float $qw = 1.0;float $rx = `deg_to_rad $r[0]`;float $ry = `deg_to_rad $r[1]`;float $rz = `deg_to_rad $r[2]`;float $cx = cos(0.5 * $rx);float $cy = cos(0.5 * $ry);float $cz = cos(0.5 * $rz);float $sx = sin(0.5 * $rx);float $sy = sin(0.5 * $ry);float $sz = sin(0.5 * $rz);switch ($order) {case 0: $qx = $sx * $cy * $cz + $cx * $sy * $sz;$qy = $cx * $sy * $cz - $sx * $cy * $sz;$qz = $cx * $cy * $sz + $sx * $sy * $cz;$qw = $cx * $cy * $cz - $sx * $sy * $sz;break;case 1: $qx = $sx * $cy * $cz + $cx * $sy * $sz;$qy = $cx * $sy * $cz + $sx * $cy * $sz;$qz = $cx * $cy * $sz - $sx * $sy * $cz;$qw = $cx * $cy * $cz - $sx * $sy * $sz;break;case 2: $qx = $sx * $cy * $cz - $cx * $sy * $sz;$qy = $cx * $sy * $cz + $sx * $cy * $sz;$qz = $cx * $cy * $sz + $sx * $sy * $cz;$qw = $cx * $cy * $cz - $sx * $sy * $sz;break;case 3: $qx = $sx * $cy * $cz - $cx * $sy * $sz;$qy = $cx * $sy * $cz - $sx * $cy * $sz;$qz = $cx * $cy * $sz + $sx * $sy * $cz;$qw = $cx * $cy * $cz + $sx * $sy * $sz;break;case 4: $qx = $sx * $cy * $cz + $cx * $sy * $sz;$qy = $cx * $sy * $cz - $sx * $cy * $sz;$qz = $cx * $cy * $sz - $sx * $sy * $cz;$qw = $cx * $cy * $cz + $sx * $sy * $sz;break;case 5: $qx = $sx * $cy * $cz - $cx * $sy * $sz;$qy = $cx * $sy * $cz + $sx * $cy * $sz;$qz = $cx * $cy * $sz - $sx * $sy * $cz;$qw = $cx * $cy * $cz + $sx * $sy * $sz;break;default: break;}return {$qx, $qy, $qz, $qw};}proc float[] quatToEuler(float $q[], int $order) {float $rx = 0.0;float $ry = 0.0;float $rz = 0.0;float $qx = $q[0];float $qy = $q[1];float $qz = $q[2];float $qw = $q[3];float $sx;float $sy;float $sz;int $unlocked;switch ($order) {case 0: $sy = 2 * $qx * $qz + 2 * $qy * $qw;$unlocked = abs($sy) < 0.9999999;$rx = $unlocked ? atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1) : atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1);$ry = asin($sy);$rz = $unlocked ? atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1) : 0;break;case 1: $sz = 2 * $qx * $qy + 2 * $qz * $qw;$unlocked = abs($sz) < 0.9999999;$rx = $unlocked ? atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1) : 0;$ry = $unlocked ? atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1) : atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1);$rz = asin($sz);break;case 2: $sx = 2 * $qy * $qz + 2 * $qx * $qw;$unlocked = abs($sx) < 0.9999999;$rx = asin($sx);$ry = $unlocked ? atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1) : 0;$rz = $unlocked ? atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1) : atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1);break;case 3: $sz = -(2 * $qx * $qy - 2 * $qz * $qw);$unlocked = abs($sz) < 0.9999999;$rx = $unlocked ? atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1) : atan2(-(2 * $qy * $qz - 2 * $qx * $qw), 2 * $qw * $qw + 2 * $qz * $qz - 1);$ry = $unlocked ? atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1) : 0;$rz = asin($sz);break;case 4: $sx = -(2 * $qy * $qz - 2 * $qx * $qw);$unlocked = abs($sx) < 0.9999999;$rx = asin($sx);$ry = $unlocked ? atan2(2 * $qx * $qz + 2 * $qy * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1) : atan2(-(2 * $qx * $qz - 2 * $qy * $qw), 2 * $qw * $qw + 2 * $qx * $qx - 1);$rz = $unlocked ? atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qy * $qy - 1) : 0;break;case 5: $sy = -(2 * $qx * $qz - 2 * $qy * $qw);$unlocked = abs($sy) < 0.9999999;$rx = $unlocked ? atan2(2 * $qy * $qz + 2 * $qx * $qw, 2 * $qw * $qw + 2 * $qz * $qz - 1) : 0;$ry = asin($sy);$rz = $unlocked ? atan2(2 * $qx * $qy + 2 * $qz * $qw, 2 * $qw * $qw + 2 * $qx * $qx - 1) : atan2(-(2 * $qx * $qy - 2 * $qz * $qw), 2 * $qw * $qw + 2 * $qy * $qy - 1);break;default: break;}$rx = `rad_to_deg $rx`;$ry = `rad_to_deg $ry`;$rz = `rad_to_deg $rz`;return {$rx, $ry, $rz};}proc float[] angleAxisToQuat(float $degree, float $axis[]) {float $ha = `deg_to_rad $degree` * 0.5;float $s = sin($ha);float $qx = $axis[0] * $s;float $qy = $axis[1] * $s;float $qz = $axis[2] * $s;float $qw = cos($ha);return {$qx, $qy, $qz, $qw};}proc float[] quatAdd(float $q1[], float $q2[]) {float $q1x = $q1[0];float $q1y = $q1[1];float $q1z = $q1[2];float $q1w = $q1[3];float $q2x = $q2[0];float $q2y = $q2[1];float $q2z = $q2[2];float $q2w = $q2[3];float $qx = $q1x + $q2x;float $qy = $q1y + $q2y;float $qz = $q1z + $q2z;float $qw = $q1w + $q2w;return {$qx, $qy, $qz, $qw};}proc float[] quatSubtract(float $q1[], float $q2[]) {float $q1x = $q1[0];float $q1y = $q1[1];float $q1z = $q1[2];float $q1w = $q1[3];float $q2x = $q2[0];float $q2y = $q2[1];float $q2z = $q2[2];float $q2w = $q2[3];float $qx = $q1x - $q2x;float $qy = $q1y - $q2y;float $qz = $q1z - $q2z;float $qw = $q1w - $q2w;return {$qx, $qy, $qz, $qw};}proc float[] quatMultiply(float $q1[], float $q2[]) {float $q1x = $q1[0];float $q1y = $q1[1];float $q1z = $q1[2];float $q1w = $q1[3];float $q2x = $q2[0];float $q2y = $q2[1];float $q2z = $q2[2];float $q2w = $q2[3];float $qx = $q1x * $q2w + $q1w * $q2x + $q1y * $q2z - $q1z * $q2y;float $qy = $q1y * $q2w + $q1w * $q2y + $q1z * $q2x - $q1x * $q2z;float $qz = $q1z * $q2w + $q1w * $q2z + $q1x * $q2y - $q1y * $q2x;float $qw = $q1w * $q2w - $q1x * $q2x - $q1y * $q2y - $q1z * $q2z;return {$qx, $qy, $qz, $qw};}proc float[] quatInverse(float $q[]) {return {$q[0] * -1, $q[1] * -1, $q[2] * -1, $q[3]};}proc float[] rotateVectorByQuat(float $v[], float $q[]) {float $iq[] = quatInverse($q);float $vq[] = {$v[0], $v[1], $v[2], 0};$vq = quatMultiply(quatMultiply($q, $vq), $iq);return {$vq[0], $vq[1], $vq[2]};}proc float[] quatFlip(float $q[], float $axis[]) {float $flipQ[] = angleAxisToQuat(180.0, $axis);return quatMultiply($flipQ, $q);}
/*1.3.1:文字列*/proc string escapeStringForLiteral(string $input) {string $escapedText;int $size = `size $input`;for ($i = 1; $i <= $size; $i++) {string $c = `substring $input $i $i`;switch ($c) {case "\"": $escapedText += "\\\""; break;case "\\": $escapedText += "\\\\"; break;case "\n": $escapedText += "\\n"; break;case "\r": $escapedText += "\\r"; break;case "\t": $escapedText += "\\t"; break;default: $escapedText += $c; break;}}return $escapedText;}proc string escapeStringForPythonAtString(string $input) {string $escapedText;int $size = `size $input`;for ($i = 1; $i <= $size; $i++) {string $c = `substring $input $i $i`;switch ($c) {case "\\": $escapedText += "\\\\"; break;case "'": $escapedText += "\\'"; break;case "\n": $escapedText += "\\n"; break;case "\r": $escapedText += "\\r"; break;default: $escapedText += $c; break;}}return $escapedText;}proc string booleanAsStringLiteral(int $value) {return (($value == 0) ? "false" : "true");}proc string floatAsStringLiteral(float $value) {string $literal = (string) $value;if (!`gmatch $literal "*e*"` && !`gmatch $literal "*.*"`) $literal += ".0";return $literal;}proc string intAsStringLiteral(int $value) {return ((string) $value);}proc string stringAsStringLiteral(string $value) {return ("\"" + escapeStringForLiteral($value) + "\"");}proc string booleanArrayAsStringLiteral(int $values[]) {string $stringValues[];for ($i = 0; $i < `size $values`; $i++) {$stringValues[$i] = booleanAsStringLiteral($values[$i]);}return ("{" + stringArrayToString($stringValues, ", ") + "}");}proc string floatArrayAsStringLiteral(float $values[]) {string $stringValues[];for ($i = 0; $i < `size $values`; $i++) {$stringValues[$i] = floatAsStringLiteral($values[$i]);}return ("{" + stringArrayToString($stringValues, ", ") + "}");}proc string intArrayAsStringLiteral(int $values[]) {return ("{" + intArrayToString($values, ", ") + "}");}proc string stringArrayAsStringLiteral(string $values[]) {string $stringValues[];for ($i = 0; $i < `size $values`; $i++) {$stringValues[$i] = stringAsStringLiteral($values[$i]);}return ("{" + stringArrayToString($stringValues, ", ") + "}");}proc string strip(string $input) {return `python("'" + escapeStringForPythonAtString($input) + "'.strip()")`;}proc string regexSearchGroup(string $pattern, string $input, string $flags) {$flags = (`size $flags`) ? "(?" + $flags + ")" : "";$pattern = "'" + $flags + escapeStringForPythonAtString($pattern) + "'";$input = "'" + escapeStringForPythonAtString($input) + "'";python("import re");string $result = `python("(lambda m: m.group() if m else None)(re.search(" + $pattern + ", " + $input + "))")`;return $result;}proc int[] regexSearchSpan(string $pattern, string $input, string $flags) {$flags = (`size $flags`) ? "(?" + $flags + ")" : "";$pattern = "'" + $flags + escapeStringForPythonAtString($pattern) + "'";$input = "'" + escapeStringForPythonAtString($input) + "'";python("import re");int $result[] = `python("(lambda m: m.span() if m else None)(re.search(" + $pattern + ", " + $input + "))")`;return $result;}proc string[] regexMatchGroups(string $pattern, string $input, string $flags) {$flags = (`size $flags`) ? "(?" + $flags + ")" : "";$pattern = "'" + $flags + escapeStringForPythonAtString($pattern) + "'";$input = "'" + escapeStringForPythonAtString($input) + "'";python("import re");string $result[] = `python("tuple([m.group() for m in re.finditer(" + $pattern + ", " + $input + ")])")`;return $result;}proc string[] regexMatchSubGroups(string $pattern, string $input, string $flags) {$flags = (`size $flags`) ? "(?" + $flags + ")" : "";$pattern = "'" + $flags + escapeStringForPythonAtString($pattern) + "'";$input = "'" + escapeStringForPythonAtString($input) + "'";python("import re");string $result[] = `python("sum([m.groups() for m in re.finditer(" + $pattern + ", " + $input + ")], ())")`;return $result;}proc int[] regexMatchSpans(string $pattern, string $input, string $flags) {$flags = (`size $flags`) ? "(?" + $flags + ")" : "";$pattern = "'" + $flags + escapeStringForPythonAtString($pattern) + "'";$input = "'" + escapeStringForPythonAtString($input) + "'";python("import re");int $result[] = `python("sum([m.span() for m in re.finditer(" + $pattern + ", " + $input + ")], ())")`;return $result;}proc string[] regexSplit(string $pattern, string $input, string $flags) {$flags = (`size $flags`) ? "(?" + $flags + ")" : "";$pattern = "'" + $flags + escapeStringForPythonAtString($pattern) + "'";$input = "'" + escapeStringForPythonAtString($input) + "'";python("import re");string $result[] = `python("tuple(re.split(" + $pattern + ", " + $input + "))")`;return $result;}proc string regexReplace(string $pattern,string $replacement,string $input,string $flags) {$flags = (`size $flags`) ? "(?" + $flags + ")" : "";$pattern = "'" + $flags + escapeStringForPythonAtString($pattern) + "'";$replacement = "'" + escapeStringForPythonAtString($replacement) + "'";$input = "'" + escapeStringForPythonAtString($input) + "'";python("import re");string $result = `python("re.sub(" + $pattern + ", " + $replacement + ", " + $input + ")")`;return $result;}proc string getClipboardText() {python("from PySide2 import QtGui");python("cb = QtGui.QClipboard()");return python("cb.text()");}proc setClipboardText(string $text) {python("from PySide2 import QtGui");python("cb = QtGui.QClipboard()");python("cb.setText('" + escapeStringForPythonAtString($text) + "')");}
/*2.1.0:UIコントロール*/global string $nkUIControls[];proc appendUIControls(string $controls[]) {global string $nkUIControls[];for ($control in $controls) {$nkUIControls[`size $nkUIControls`] = $control;}}proc string getUIControl(string $root, string $end) {global string $nkUIControls[];string $path;for ($control in $nkUIControls) {string $buffer[];int $depth = `tokenize $control "|" $buffer`;string $first = ($depth > 0) ? $buffer[0] : "";string $last = ($depth > 0) ? $buffer[$depth - 1] : "";if ($first == $root && $last == $end) {$path = $control;break;}}return $path;}proc removeUIControls(string $root, string $end) {global string $nkUIControls[];string $paths[];for ($control in $nkUIControls) {string $buffer[];int $depth = `tokenize $control "|" $buffer`;string $first = ($depth > 0) ? $buffer[0] : "";string $last = ($depth > 0) ? $buffer[$depth - 1] : "";int $shouldRemove = (!`size $end`) ? $first == $root : $first == $root && $last == $end;if ($shouldRemove) $paths[`size $paths`] = $control;}if (`size $paths` > 0) {$nkUIControls = stringArrayRemove($paths, $nkUIControls);}}proc string uiControlTypeOf(string $control) {string $type = `objectTypeUI $control`;if ($type == "floatingWindow") $type = "window";return $type;}proc int qEnable(string $control) {string $type = uiControlTypeOf($control);if ($type == "window" || $type == "workspaceControl") return true;return `control -q -en $control`;}proc eEnable(int $bValue, string $control) {string $type = uiControlTypeOf($control);if ($type == "window" || $type == "workspaceControl") return;control -e -en $bValue $control;}proc int qExists(string $control) {return `control -q -ex $control`;}proc int qVisible(string $control) {return `control -q -vis $control`;}proc eVisible(int $bValue, string $control) {control -e -vis $bValue $control;}proc float qFloat(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc eFloat(string $type, string $flag, float $fValue, string $control) {eval $type "-e" $flag $fValue $control;}proc int qInt(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc eInt(string $type, string $flag, int $iValue, string $control) {eval $type "-e" $flag $iValue $control;}proc string qString(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc eString(string $type, string $flag, string $sValue, string $control) {eval $type "-e" $flag ("\"" + $sValue + "\"") $control;}proc float[] qFloatArray(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc int[] qIntArray(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc string[] qStringArray(string $type, string $flag, string $control) {return `eval $type "-q" $flag $control`;}proc eStringArray(string $type, string $flag, string $sValues[], string $control) {for ($sValue in $sValues) {eString($type, $flag, $sValue, $control);}}proc eOrderedFloat(string $type, string $flag, float $fValues[], string $control) {for ($i = 0; $i < `size $fValues`; $i++) {eFloat($type, ($flag + ($i + 1)), $fValues[$i], $control);}}proc eOrderedInt(string $type, string $flag, int $iValues[], string $control) {for ($i = 0; $i < `size $iValues`; $i++) {eInt($type, ($flag + ($i + 1)), $iValues[$i], $control);}}proc eOrderedString(string $type, string $flag, string $sValues[], string $control) {for ($i = 0; $i < `size $sValues`; $i++) {eString($type, ($flag + ($i + 1)), $sValues[$i], $control);}}proc int qIndex(string $type, string $flag, string $control) {return (qInt($type, $flag, $control) - 1);}proc eIndex(string $type, string $flag, int $index, string $control) {eInt($type, $flag, ($index + 1), $control);}proc int[] qIndexArray(string $type, string $flag, string $control) {int $indices[] = qIntArray($type, $flag, $control);for ($i = 0; $i < `size $indices`; $i++) $indices[$i] -= 1;return $indices;}proc eIndexArray(string $type, string $flag, int $indices[], string $control) {for ($i in $indices) {eInt($type, $flag, $i + 1, $control);}}proc int qFirstIndex(string $type, string $flag, string $control) {int $indices[] = qIndexArray($type, $flag, $control);return  ((`size $indices`) ? $indices[0] : -1);}proc string qFirstString(string $type, string $flag, string $control) {string $sValues[] = qStringArray($type, $flag, $control);return  ((`size $sValues`) ? $sValues[0] : "");}proc eIntString(string $type, string $flag, int $iValue, string $sValue, string $control) {eval $type "-e" $flag $iValue ("\"" + $sValue + "\"") $control;}proc eIndexString(string $type, string $flag, int $index, string $sValue, string $control) {eIntString($type, $flag, $index + 1, $sValue, $control);}proc eStringInt(string $type, string $flag, string $sValue, int $iValue, string $control) {eval $type "-e" $flag ("\"" + $sValue + "\"") $iValue $control;}proc executeUIControl(string $type, string $flag, string $control) {eval $type "-e" $flag $control;}proc string getParentableWindow(string $control) {if (uiControlTypeOf($control) == "workspaceControl" && !qInt("workspaceControl", "-fl", $control)) {return "MayaWindow";}else {return $control;}}proc windowClose(string $control) {if (qExists($control)) {string $type = uiControlTypeOf($control);switch ($type) {case "window": deleteUI $control; break;case "workspaceControl": executeUIControl("workspaceControl", "-cl", $control);break;default: break;}}}proc windowPrefRemove(string $type, string $control) {if (qExists($control)) windowClose($control);switch ($type) {case "window": if (qInt("windowPref", "-ex", $control)) {windowPref -r $control;}break;case "workspaceControl": if (qInt("workspaceControlState", "-ex", $control)) {workspaceControlState -r $control;}break;default: break;}}proc string buildWorkspaceControl(string $workspaceControlName,string $label,string $buildProcName,string $buildProcFilename) {string $control = $workspaceControlName;if (!qExists($workspaceControlName)) {string $uiScript = "if (!`exists " + $buildProcName + "`)" + " source \"" + $buildProcFilename + "\"; " + $buildProcName + "();";$control = `workspaceControl -dup false -fl true -l $label -rt false -ui $uiScript$workspaceControlName`;}return $control;}

// /////////////////////////////////////////////////////////////////////////////
// ドメイン
// /////////////////////////////////////////////////////////////////////////////
/*-
@returns <string>
*/
proc string getPoseVersion() {
  return "1";
}

/*-
@var <boolean[3]>
*/
global int $nkPoseStackInitPasteSetting[];

/*-
@var <string[2]>
*/
global string $nkPoseStackInitSelectSetting[];

/*-
@var <int[5]>
*/
global int $nkPoseStackInitMirrorSetting[];

/*-
@returns <>
*/
proc initializeInitParameters() {
  // print("initializeInitParameters\n"); // debug
  global int $nkPoseStackInitPasteSetting[];
  global string $nkPoseStackInitSelectSetting[];
  global int $nkPoseStackInitMirrorSetting[];
  if (!`size $nkPoseStackInitPasteSetting`) {
    $nkPoseStackInitPasteSetting = {true, true, false};
    // print("  nkPoseStackInitPasteSetting :{" + intArrayToString($nkPoseStackInitPasteSetting, ", ") + "}\n"); // debug
  }
  if (!`size $nkPoseStackInitSelectSetting`) {
    $nkPoseStackInitSelectSetting = {"_L", "_R"};
    // print("  nkPoseStackInitSelectSetting:{" + stringArrayToString($nkPoseStackInitSelectSetting, ", ") + "}\n"); // debug
  }
  if (!`size $nkPoseStackInitMirrorSetting`) {
    $nkPoseStackInitMirrorSetting = {0, 0, 1, false, false};
    // print("  nkPoseStackInitMirrorSetting:{" + intArrayToString($nkPoseStackInitMirrorSetting, ", ") + "}\n"); // debug
  }
}

// -----------------------------------------------------------------------------
// データ変換
// -----------------------------------------------------------------------------
/*-
@param $values <string[]>
@returns <string>
*/
proc string serialize(string $values[]) {
  string $lines[];
  for ($value in $values) {
    if (!`size $value`) continue;
    $lines[`size $lines`] = $value;
  }
  string $text = stringArrayToString($lines, "\n");
  if (`size $lines`) {
    $text = getPoseVersion() + "\n" + $text + "\n";
  }
  return $text;
}

/*-
@param $input <string>
@returns <string[]>
*/
proc string[] deserialize(string $input) {
  string $buffer[];
  tokenize $input "\n" $buffer;
  string $lines[];
  for ($line in $buffer) {
    if (!`size $line`) continue;
    $lines[`size $lines`] = $line;
  }
  return $lines;
}

/*-
@param $pasteSetting <boolean[3]>
@param $selectSetting <string[2]>
@param $mirrorSetting <int[5]>
@returns <string>
*/
proc string makePoseSetting(
  int $pasteSetting[],
  string $selectSetting[],
  int $mirrorSetting[]
) {
  string $poseSetting = intArrayToString($pasteSetting, ",");
  $poseSetting += "/" + stringArrayToString($selectSetting, ",");
  $poseSetting += "/" + intArrayToString($mirrorSetting, ",");
  return $poseSetting;
}

/*-
@param $n <string>
@param $poseSetting <string>
@returns <string>
*/
proc string makeTransformHeader(string $n, string $poseSetting) {
  return ($n + "[" + $poseSetting + "]");
}

/*-
@param $header <string>
@param $values <float[]>
@returns <string>
*/
proc string makePoseTransform(string $header, float $values[]) {
  return ($header + floatArrayToString($values, ","));
}

/*-
@param $poseName <string>
@param $poseTransforms <string[]>
@returns <string>
*/
proc string makePose(string $poseName, string $poseTransforms[]) {
  string $pose;
  if (!`size $poseName` || !`size $poseTransforms`) return $pose;
  $pose += $poseName + "=";
  $pose += stringArrayToString($poseTransforms, ";") + ";";
  return $pose;
}

/*-
@param $pose <string>
@returns <string>
*/
proc string extractPoseName(string $pose) {
  string $poseName;
  string $buffer[];
  if (`tokenize $pose "=" $buffer` == 2) {
    $poseName = $buffer[0];
  }
  return $poseName;
}

/*-
@param $pose <string>
@returns <string[]>
*/
proc string[] extractPoseTransforms(string $pose) {
  string $poseTransforms[];
  string $buffer1[];
  if (`tokenize $pose "=" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[1] ";" $buffer2` > 0) {
      $poseTransforms = $buffer2;
    }
  }
  return $poseTransforms;
}

/*-
@param $poseTransform <string>
@returns <string[2]>
*/
proc string[] extractTransformHeader(string $poseTransform) {
  string $header[];
  string $buffer1[];
  if (`tokenize $poseTransform "]" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[0] "[" $buffer2` == 2) {
      $header = $buffer2;
    }
  }
  return $header;
}

/*-
@param $poseTransform <string>
@returns <string>
*/
proc string extractTransformNode(string $poseTransform) {
  string $node;
  string $header[] = extractTransformHeader($poseTransform);
  if (`size $header` == 2) $node = $header[0];
  return $node;
}

/*-
@param $poseTransform <string>
@returns <string>
*/
proc string extractPoseSetting(string $poseTransform) {
  string $poseSetting;
  string $header[] = extractTransformHeader($poseTransform);
  if (`size $header` == 2) $poseSetting = $header[1];
  return $poseSetting;
}

/*-
@param $poseSetting <string>
@returns <string[3]>
*/
proc string[] extractPoseSettings(string $poseSetting) {
  string $poseSettings[];
  string $buffer[];
  if (`tokenize $poseSetting "/" $buffer` == 3) {
    $poseSettings = $buffer;
  }
  return $poseSettings;
}

/*-
@param $poseSetting <string>
@returns <boolean[3]>
*/
proc int[] extractPasteSetting(string $poseSetting) {
  int $pasteSetting[] = {1, 1, 0};
  string $poseSettings[] = extractPoseSettings($poseSetting);
  string $buffer[];
  if (`tokenize $poseSettings[0] "," $buffer` == 3) {
    for ($i = 0; $i < 3; $i++) {
      $pasteSetting[$i] = (int) $buffer[$i];
    }
  }
  return $pasteSetting;
}

/*-
@param $poseSetting <string>
@returns <string[2]>
*/
proc string[] extractSelectSetting(string $poseSetting) {
  string $selectSetting[] = {"_L", "_R"};
  string $poseSettings[] = extractPoseSettings($poseSetting);
  string $buffer[];
  if (`tokenize $poseSettings[1] "," $buffer` == 2) {
    for ($i = 0; $i < 2; $i++) {
      $selectSetting[$i] = $buffer[$i];
    }
  }
  return $selectSetting;
}

/*-
@param $poseSetting <string>
@returns <int[5]>
*/
proc int[] extractMirrorSetting(string $poseSetting) {
  int $mirrorSetting[] = {0, 0, 1, 0, 0};
  string $poseSettings[] = extractPoseSettings($poseSetting);
  string $buffer[];
  if (`tokenize $poseSettings[2] "," $buffer` == 5) {
    for ($i = 0; $i < 5; $i++) {
      $mirrorSetting[$i] = (int) $buffer[$i];
    }
  }
  return $mirrorSetting;
}

/*-
@param $poseTransform <string>
@returns <float[13]>
*/
proc float[] extractTransformValues(string $poseTransform) {
  float $values[] = {
    0, 0, 0,
    0, 0, 0, 1,
    1, 1, 1,
    0, 0, 0
  };
  string $buffer1[];
  if (`tokenize $poseTransform "]" $buffer1` == 2) {
    string $buffer2[];
    if (`tokenize $buffer1[1] "," $buffer2` == 13) {
      for ($i = 0; $i < 13; $i++) {
        $values[$i] = (float) $buffer2[$i];
      }
    }
  }
  return $values;
}

/*-
@param $value <string>
@returns <string>
@remarks 戻り値にポーズバージョンは含まれない。
*/
proc string convertDataVersion(string $value) {
  // print("convertDataVersion\n"); // debug
  // print("  value:" + $value + "\n"); // debug
  string $newValue;
  if (!`size $value`) return $newValue;

  string $lines[] = deserialize($value);
  if (`size $lines` < 2) return $newValue;

  string $poseVersion = getPoseVersion();
  int $valueVersion = (int) $lines[0];
  int $currentVersion = (int) $poseVersion;
  // print("  valueVersion  :" + $valueVersion + "\n"); // debug
  // print("  currentVersion:" + $currentVersion + "\n"); // debug
  if (!stringArrayRemoveAtIndex(0, $lines)) return $newValue;

  switch ($valueVersion) {
    case 0: // テスト用
      switch ($currentVersion) {
        case 1: for ($line in $lines) $newValue += "x" + $line + "\n"; break;
        default: break;
      }
      break;
    case 1:
      switch ($currentVersion) {
        case 1: $newValue = stringArrayToString($lines, "\n") + "\n"; break;
        default: break;
      }
      break;
    default: break;
  }
  return $newValue;
}

/*-
@param $n <string>
@param $poses <string[]>
@returns <string[]>
*/
proc string[] resolveNamespace(string $n, string $poses[]) {
  // print("resolveNamespace\n"); // debug
  // print("  n    :" + $n + "\n"); // debug
  // print("  poses:{\n    " + stringArrayToString($poses, ",\n    ") + "\n  }\n"); // debug
  if (!`objExists $n` || !`size $poses`) return $poses;

  string $names[] = `ls -l -sns $n`;
  if (`size $names` != 2) return $poses;

  string $namespace = $names[1];
  // print("  namespace:" + $namespace + "\n"); // debug
  if ($namespace == ":") return $poses;

  string $replacement = "|" + $namespace + ":";
  for ($i = 0; $i < `size $poses`; $i++) {
    string $pose = $poses[$i];
    string $poseName = extractPoseName($pose);
    string $poseTransforms[] = extractPoseTransforms($pose);
    // print("  pose:" + $pose + "\n"); // debug
    // print("    poseName      :" + $poseName + "\n"); // debug
    // print("    poseTransforms:{\n      " + stringArrayToString($poseTransforms, ",\n      ") + "\n    }\n"); // debug
    for ($j = 0; $j < `size $poseTransforms`; $j++) {
      string $poseTransform = $poseTransforms[$j];
      string $transformNode = extractTransformNode($poseTransform);
      string $poseSetting = extractPoseSetting($poseTransform);
      float $transformValues[] = extractTransformValues($poseTransform);
      // print("    poseTransform:" + $poseTransform + "\n"); // debug
      // print("      transformNode  :" + $transformNode + "\n"); // debug
      // print("      poseSetting    :" + $poseSetting + "\n"); // debug
      // print("      transformValues:{" + floatArrayToString($transformValues, ", ") + "}\n"); // debug
      $transformNode = regexReplace("\\|", $replacement, $transformNode, "");
      string $header = makeTransformHeader($transformNode, $poseSetting);
      $poseTransforms[$j] = makePoseTransform($header, $transformValues);
    }
    $poses[$i] = makePose($poseName, $poseTransforms);
  }
  return $poses;
}

// -----------------------------------------------------------------------------
// トランスフォーム
// -----------------------------------------------------------------------------
/*-
@param $n <string>
@returns <float[13]>
*/
proc float[] getTransformAttributeValues(string $n) {
  // print("getTransformAttributeValues\n"); // debug
  // print("  n:" + $n + "\n"); // debug
  float $values[] = {
    0, 0, 0,
    0, 0, 0, 1,
    1, 1, 1,
    0, 0, 0
  };

  string $type = `nodeType $n`;
  if (!($type == "transform" || $type == "joint")) return $values;

  float $t[] = `getAttr ($n + ".translate")`;
  float $r[] = `getAttr ($n + ".rotate")`;
  float $s[] = `getAttr ($n + ".scale")`;
  float $h[] = `getAttr ($n + ".shear")`;
  // print("  t :{" + floatArrayToString($t, ", ") + "}\n"); // debug
  // print("  r :{" + floatArrayToString($r, ", ") + "}\n"); // debug
  // print("  s :{" + floatArrayToString($s, ", ") + "}\n"); // debug
  // print("  h :{" + floatArrayToString($h, ", ") + "}\n"); // debug

  int $o = `getAttr ($n + ".rotateOrder")`;
  $o = reverseRotateOrder($o);
  // `rotateAxis`と`jointOrient`の回転順序は常にXYZ
  int $oXYZ = reverseRotateOrder(0);

  float $rq[] = eulerToQuat($r, $o);
  float $ra[] = `getAttr ($n + ".rotateAxis")`;
  $ra = eulerToQuat($ra, $oXYZ);
  float $jo[] = {0, 0, 0, 1};
  if (`attributeQuery -n $n -ex "jointOrient"`) {
    $jo = `getAttr ($n + ".jointOrient")`;
    $jo = eulerToQuat($jo, $oXYZ);
  }
  float $q[] = quatMultiply($jo, quatMultiply($ra, $rq));

  // print("  o :" + $o + "\n"); // debug
  // print("  rq:{" + floatArrayToString($rq, ", ") + "}\n"); // debug
  // print("  ra:{" + floatArrayToString($ra, ", ") + "}\n"); // debug
  // print("  jo:{" + floatArrayToString($jo, ", ") + "}\n"); // debug
  // print("  q :{" + floatArrayToString($q, ", ") + "}\n"); // debug

  $values = {
    $t[0], $t[1], $t[2],
    $q[0], $q[1], $q[2], $q[3],
    $s[0], $s[1], $s[2],
    $h[0], $h[1], $h[2]
  };
  return $values;
}

/*-
@param $nodes <string[]>
@param $poseSettings <string[]>
@returns <string[]>
*/
proc string[] makePoseTransforms(string $nodes[], string $poseSettings[]) {
  // print("makePoseTransforms\n"); // debug
  // print("  nodes       :{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  // print("  poseSettings:{\n    " + stringArrayToString($poseSettings, ",\n    ") + "\n  }\n"); // debug
  string $poseTransforms[];
  int $numTransforms = minStringArrayCount($nodes, $poseSettings);
  for ($i = 0; $i < $numTransforms; $i++) {
    string $n = $nodes[$i];
    // print("  n:" + $n + "\n"); // debug
    if (`objExists $n`) {
      string $header = makeTransformHeader($n, $poseSettings[$i]);
      float $values[] = getTransformAttributeValues($n);
      string $poseTransform = makePoseTransform($header, $values);
      $poseTransforms[$i] = $poseTransform;
    }
    else {
      $poseTransforms[$i] = "";
    }
    // print("    poseTransform:" + $poseTransforms[$i] + "\n"); // debug
  }
  return $poseTransforms;
}

/*-
@param $n <string>
@param $m <float[12]>
@param $shouldSetT <boolean>
@param $shouldSetR <boolean>
@param $shouldSetS <boolean>
@returns <>
*/
proc setTransformAttributes(
  string $n,
  float $m[],
  int $shouldApplyT,
  int $shouldApplyR,
  int $shouldApplyS
) {
  // print("setTransformAttributes\n"); // debug
  // print("  n           :" + $n + "\n"); // debug
  // print("  m           :{" + floatArrayToString($m, ", ") + "}\n"); // debug
  // print("  shouldApplyT:" + $shouldApplyT + "\n"); // debug
  // print("  shouldApplyR:" + $shouldApplyR + "\n"); // debug
  // print("  shouldApplyS:" + $shouldApplyS + "\n"); // debug
  if (!(`objExists $n` && `size $m` == 12)) return;

  float $t[] = {$m[0], $m[1], $m[2]};
  float $r[] = {$m[3], $m[4], $m[5]};
  float $s[] = {$m[6], $m[7], $m[8]};
  float $h[] = {$m[9], $m[10], $m[11]};
  // print("  t:{" + floatArrayToString($t, ", ") + "}\n"); // debug
  // print("  r:{" + floatArrayToString($r, ", ") + "}\n"); // debug
  // print("  s:{" + floatArrayToString($s, ", ") + "}\n"); // debug
  // print("  h:{" + floatArrayToString($h, ", ") + "}\n"); // debug

  string $tx = $n + ".tx";
  string $ty = $n + ".ty";
  string $tz = $n + ".tz";
  string $rx = $n + ".rx";
  string $ry = $n + ".ry";
  string $rz = $n + ".rz";
  string $sx = $n + ".sx";
  string $sy = $n + ".sy";
  string $sz = $n + ".sz";

  if ($shouldApplyT) {
    if (!`getAttr -l $tx`) setAttr $tx $t[0];
    if (!`getAttr -l $ty`) setAttr $ty $t[1];
    if (!`getAttr -l $tz`) setAttr $tz $t[2];
  }
  if ($shouldApplyR) {
    if (!`getAttr -l $rx`) setAttr $rx $r[0];
    if (!`getAttr -l $ry`) setAttr $ry $r[1];
    if (!`getAttr -l $rz`) setAttr $rz $r[2];
  }
  if ($shouldApplyS) {
    if (!`getAttr -l $sx`) setAttr $sx $s[0];
    if (!`getAttr -l $sy`) setAttr $sy $s[1];
    if (!`getAttr -l $sz`) setAttr $sz $s[2];
  }
}

/*-
@param $n <string>
@param $m <float[13]>
@returns <float[12]>
*/
proc float[] asIsTransform(string $n, float $m[]) {
  // print("asIsTransform\n"); // debug
  // print("  n :" + $n + "\n"); // debug
  // print("  m :{" + floatArrayToString($m, ", ") + "}\n"); // debug
  float $t[] = {$m[0], $m[1], $m[2]};
  float $q[] = {$m[3], $m[4], $m[5], $m[6]};
  float $s[] = {$m[7], $m[8], $m[9]};
  float $h[] = {$m[10], $m[11], $m[12]};
  // print("  t :{" + floatArrayToString($t, ", ") + "}\n"); // debug
  // print("  q :{" + floatArrayToString($q, ", ") + "}\n"); // debug
  // print("  s :{" + floatArrayToString($s, ", ") + "}\n"); // debug
  // print("  h :{" + floatArrayToString($h, ", ") + "}\n"); // debug

  int $o = `getAttr ($n + ".rotateOrder")`;
  $o = reverseRotateOrder($o);
  // `rotateAxis`と`jointOrient`の回転順序は常にXYZ
  int $oXYZ = reverseRotateOrder(0);

  float $ra[] = `getAttr ($n + ".rotateAxis")`;
  $ra = quatInverse(eulerToQuat($ra, $oXYZ));
  float $jo[] = {0, 0, 0, 1};
  if (`attributeQuery -n $n -ex "jointOrient"`) {
    $jo = `getAttr ($n + ".jointOrient")`;
    $jo = quatInverse(eulerToQuat($jo, $oXYZ));
  }
  float $rq[] = quatMultiply($jo, quatMultiply($ra, $q));
  float $r[] = quatToEuler($rq, $o);

  // print("  o :" + $o + "\n"); // debug
  // print("  q :{" + floatArrayToString($q, ", ") + "}\n"); // debug
  // print("  ra:{" + floatArrayToString($ra, ", ") + "}\n"); // debug
  // print("  jo:{" + floatArrayToString($jo, ", ") + "}\n"); // debug
  // print("  rq:{" + floatArrayToString($rq, ", ") + "}\n"); // debug
  // print("  r :{" + floatArrayToString($r, ", ") + "}\n"); // debug

  float $values[] = {
    $t[0], $t[1], $t[2],
    $r[0], $r[1], $r[2],
    $s[0], $s[1], $s[2],
    $h[0], $h[1], $h[2]
  };
  // print("  values:{" + floatArrayToString($values, ", ") + "}\n"); // debug
  return $values;
}

/*-
@param $n <string>
@param $m <float[13]>
@param $hasCommonParent <boolean>
@param $mirrorAxis <int>
@param $primaryAxis <int>
@param $secondaryAxis <int>
@param $invertPrimaryAxis <boolean>
@param $invertSecondaryAxis <boolean>
@returns <float[12]>
*/
proc float[] mirrorTransform(
  string $n,
  float $m[],
  int $hasCommonParent,
  int $mirrorAxis,
  int $primaryAxis,
  int $secondaryAxis,
  int $invertPrimaryAxis,
  int $invertSecondaryAxis
) {
  // print("mirrorTransform\n"); // debug
  // print("  n                  :" + $n + "\n"); // debug
  // print("  m                  :{" + floatArrayToString($m, ", ") + "}\n"); // debug
  // print("  hasCommonParent    :" + $hasCommonParent + "\n"); // debug
  // print("  mirrorAxis         :" + $mirrorAxis + "\n"); // debug
  // print("  primaryAxis        :" + $primaryAxis + "\n"); // debug
  // print("  secondaryAxis      :" + $secondaryAxis + "\n"); // debug
  // print("  invertPrimaryAxis  :" + $invertPrimaryAxis + "\n"); // debug
  // print("  invertSecondaryAxis:" + $invertSecondaryAxis + "\n"); // debug
  float $t[] = {$m[0], $m[1], $m[2]};
  float $q[] = {$m[3], $m[4], $m[5], $m[6]};
  float $s[] = {$m[7], $m[8], $m[9]};
  float $h[] = {$m[10], $m[11], $m[12]};
  // print("  t :{" + floatArrayToString($t, ", ") + "}\n"); // debug
  // print("  q :{" + floatArrayToString($q, ", ") + "}\n"); // debug
  // print("  s :{" + floatArrayToString($s, ", ") + "}\n"); // debug
  // print("  h :{" + floatArrayToString($h, ", ") + "}\n"); // debug

  // 位置のミラーリング
  if ($hasCommonParent) {
    $t[$mirrorAxis] *= -1;
  }
  else {
    if ($invertPrimaryAxis) $t[$primaryAxis] *= -1;
    if ($invertSecondaryAxis) $t[$secondaryAxis] *= -1;
    if ($invertPrimaryAxis == $invertSecondaryAxis) {
      // 第三の軸を反転
      int $usedAxis[];
      $usedAxis[$primaryAxis] = 1;
      $usedAxis[$secondaryAxis] = 1;
      int $i;
      for ($i = 0; $i < 3; $i++) if (!$usedAxis[$i]) break;
      $t[$i] *= -1;
    }
  }

  // 回転のミラーリング
  int $o = `getAttr ($n + ".rotateOrder")`;
  $o = reverseRotateOrder($o);
  // `rotateAxis`と`jointOrient`の回転順序は常にXYZ
  int $oXYZ = reverseRotateOrder(0);

  float $ra[] = `getAttr ($n + ".rotateAxis")`;
  $ra = quatInverse(eulerToQuat($ra, $oXYZ));
  float $jo[] = {0, 0, 0, 1};
  if (`attributeQuery -n $n -ex "jointOrient"`) {
    $jo = `getAttr ($n + ".jointOrient")`;
    $jo = quatInverse(eulerToQuat($jo, $oXYZ));
  }

  float $mq[] = $q;
  $mq[$mirrorAxis] *= -1;
  $mq[3] *= -1;
  float $cq[] = quatMultiply($jo, quatMultiply($ra, $mq));

  // print("  o :" + $o + "\n"); // debug
  // print("  q :{" + floatArrayToString($q, ", ") + "}\n"); // debug
  // print("  ra:{" + floatArrayToString($ra, ", ") + "}\n"); // debug
  // print("  jo:{" + floatArrayToString($jo, ", ") + "}\n"); // debug
  // print("  mq:{" + floatArrayToString($mq, ", ") + "}\n"); // debug

  // ソースとターゲットの親が異なる場合は親ノードの反転をリセットしておく
  if (!$hasCommonParent) {
    if ($mirrorAxis == $primaryAxis || $mirrorAxis == $secondaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      if ($mirrorAxis == $primaryAxis) {
        $flipAxis[$secondaryAxis] = 1;
      }
      else if ($mirrorAxis == $secondaryAxis) {
        $flipAxis[$primaryAxis] = 1;
      }
      $cq = quatFlip($cq, $flipAxis);
    }
    if ($invertPrimaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      $flipAxis[$secondaryAxis] = 1;
      $cq = quatFlip($cq, $flipAxis);
    }
    if ($invertSecondaryAxis) {
      float $flipAxis[] = {0, 0, 0};
      $flipAxis[$primaryAxis] = 1;
      $cq = quatFlip($cq, $flipAxis);
    }
  }

  // プライマリとセカンダリを対称化するための反転
  if ($mirrorAxis == $primaryAxis || $mirrorAxis == $secondaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    if ($mirrorAxis == $primaryAxis) {
      $flipAxis[$secondaryAxis] = 1;
    }
    else if ($mirrorAxis == $secondaryAxis) {
      $flipAxis[$primaryAxis] = 1;
    }
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }

  // 任意の反転
  if ($invertPrimaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    $flipAxis[$secondaryAxis] = 1;
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }
  if ($invertSecondaryAxis) {
    float $flipAxis[] = {0, 0, 0};
    $flipAxis[$primaryAxis] = 1;
    $flipAxis = rotateVectorByQuat($flipAxis, $cq);
    $cq = quatFlip($cq, $flipAxis);
  }

  float $r[] = quatToEuler($cq, $o);
  // print("  cq:{" + floatArrayToString($cq, ", ") + "}\n"); // debug
  // print("  r :{" + floatArrayToString($r, ", ") + "}\n"); // debug

  float $values[] = {
    $t[0], $t[1], $t[2],
    $r[0], $r[1], $r[2],
    $s[0], $s[1], $s[2],
    $h[0], $h[1], $h[2]
  };
  // print("  values:{" + floatArrayToString($values, ", ") + "}\n"); // debug
  return $values;
}

// -----------------------------------------------------------------------------
// スクリプトノード
// -----------------------------------------------------------------------------
/*-
@param $n <string>
@returns <int>
*/
proc int isValidScriptNode(string $n) {
  return (
    `objExists $n`
        && `nodeType $n` == "script"
        && `attributeQuery -n $n -ex "psd"`
  );
}

/*-
@param $n <string>
@returns <int>
*/
proc int isNodeReferenced(string $n) {
  return (`objExists $n` && `referenceQuery -inr $n`);
}

/*-
@returns <string>
*/
proc string createScriptNode() {
  // print("createScriptNode\n"); // debug
  string $n = `scriptNode -n "nkPoseStackData"`;
  addAttr -dt "string" -ln "nkPoseStackData" -nn "PoseStack Data" -sn "psd" $n;
  return $n;
}

/*-
@param $n <string>
@returns <string>
*/
proc string getPoseStackDataAttr(string $n) {
  // print("getPoseStackDataAttr\n"); // debug
  string $value;
  if (isValidScriptNode($n)) {
    $value = `getAttr ($n + ".psd")`;
  }
  return $value;
}

/*-
@param $n <string>
@param $value <string>
@returns <>
*/
proc setPoseStackDataAttr(string $n, string $value) {
  // print("setPoseStackDataAttr\n"); // debug
  if (isValidScriptNode($n)) {
    setAttr ($n + ".psd") -typ "string" $value;
  }
}

/*-
@param $nodes <string[]>
@returns <string>
@remarks 全てのデータが空の場合はマージを行わずにノードを削除する。
*/
proc string mergeScriptNodes(string $nodes[]) {
  // print("mergeScriptNodes\n"); // debug
  // print("  nodes:{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  string $mergedNode;
  int $numNodes = `size $nodes`;
  if (!$numNodes) return $mergedNode;

  string $value;
  for ($n in $nodes) {
    if (isValidScriptNode($n) && !isNodeReferenced($n)) {
      // データバージョンの確認とコンバート
      $value += convertDataVersion(getPoseStackDataAttr($n));
    }
  }
  // print("  value:" + $value + "\n"); // debug

  if (`size $value`) {
    $mergedNode = ($numNodes == 1) ? $nodes[0] : createScriptNode();
    if (isValidScriptNode($mergedNode) && !isNodeReferenced($mergedNode)) {
      setPoseStackDataAttr($mergedNode, getPoseVersion() + "\n" + $value);
    }
  }

  for ($n in $nodes) {
    if ($n == $mergedNode) continue;
    if (isValidScriptNode($n) && !isNodeReferenced($n)) delete $n;
  }
  return $mergedNode;
}

/*-
@returns <string[]>
*/
proc string[] getScriptNodes() {
  // print("getScriptNodes\n"); // debug
  string $nodes[];
  string $sceneNodes[];
  string $allNodes[] = `ls -l "::nkPoseStackData*"`;
  $allNodes = `sort $allNodes`;
  for ($n in $allNodes) {
    if (!isValidScriptNode($n)) continue;
    if (isNodeReferenced($n)) {
      $nodes[`size $nodes`] = $n;
    }
    else {
      $sceneNodes[`size $sceneNodes`] = $n;
    }
  }
  // print("  referencedNodes:{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  // print("       sceneNodes:{\n    " + stringArrayToString($sceneNodes, ",\n    ") + "\n  }\n"); // debug
  if (`size $sceneNodes`) {
    string $mergeNode = mergeScriptNodes($sceneNodes);
    if (isValidScriptNode($mergeNode)) {
      $nodes[`size $nodes`] = $mergeNode;
    }
  }
  // print("            nodes:{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  notifyStringArray("nkPoseStackScriptNodesRetrieved", $nodes);
  return $nodes;
}

/*-
@param $nodes <string[]> 空配列の場合は`getScriptNodes`の結果を使用する。
@returns <string>
*/
proc string getEditableScriptNode(string $nodes[]) {
  // print("getEditableScriptNode\n"); // debug
  // print("  nodes:{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  if (!`size $nodes`) $nodes = getScriptNodes();
  string $scriptNodes[];
  for ($n in $nodes) {
    if (isValidScriptNode($n) && !isNodeReferenced($n)) {
      $scriptNodes[`size $scriptNodes`] = $n;
    }
  }
  // print("  scriptNodes:{\n    " + stringArrayToString($scriptNodes, ",\n    ") + "\n  }\n"); // debug
  int $numScriptNodes = `size $scriptNodes`;
  if ($numScriptNodes > 1) {
    warning -n "nkPoseStack: Multiple editable nodes exist.";
  }
  return (($numScriptNodes == 1) ? $scriptNodes[0] : "");
}

/*-
@returns <>
*/
proc deleteScriptNodes() {
  // print("deleteScriptNodes\n"); // debug
  string $nodes[] = getScriptNodes();
  for ($n in $nodes) {
    if (isValidScriptNode($n) && !isNodeReferenced($n)) delete $n;
  }
}

// -----------------------------------------------------------------------------
// スクリプトノードアトリビュート
// -----------------------------------------------------------------------------
/*-
@param $pose <string>
@returns <boolean>
*/
proc int isPoseReferenced(string $pose) {
  return `gmatch $pose "!?*"`;
}

/*-
@param $nodes <string[]> 空配列の場合は`getScriptNodes`の結果を使用する。
@returns <string[]>
*/
proc string[] readAttrPoses(string $nodes[]) {
  // print("readAttrPoses\n"); // debug
  // print("  nodes:{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  string $poses[];
  if (!`size $nodes`) $nodes = getScriptNodes();
  for ($n in $nodes) {
    if (!isValidScriptNode($n)) continue;
    // データバージョンの確認とコンバート
    string $beforeData = getPoseStackDataAttr($n);
    string $afterData = convertDataVersion($beforeData);
    string $nPoses[] = deserialize($afterData);

    if (isNodeReferenced($n)) {
      // リファレンスネームスペースの解決
      resolveNamespace($n, $nPoses);
      stringArrayAddPrefix($nPoses, "!");
    }
    else {
      // バージョンが異なる場合は保存
      if ($afterData != $beforeData) {
        setPoseStackDataAttr($n, getPoseVersion() + "\n" + $afterData);
      }
    }
    // print("  n:" + $n + "\n"); // debug
    // print("    nPoses:{\n      " + stringArrayToString($nPoses, ",\n      ") + "\n    }\n"); // debug
    $poses = stringArrayCatenate($poses, $nPoses);
  }
  return $poses;
}

/*-
@param $poses <string[]>
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
*/
proc int appendAttrPoses(string $poses[]) {
  // print("appendAttrPoses\n"); // debug
  // print("  poses:{\n    " + stringArrayToString($poses, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poses`) return false;

  string $editableNode = getEditableScriptNode({});
  if (!isValidScriptNode($editableNode)) $editableNode = createScriptNode();
  if (!isValidScriptNode($editableNode)) return false;

  // データバージョンの確認とコンバート
  string $newPoses[] = deserialize(
    convertDataVersion(getPoseStackDataAttr($editableNode))
  );
  $newPoses = stringArrayCatenate($newPoses, $poses);
  // print("  newPoses:{\n    " + stringArrayToString($newPoses, ",\n    ") + "\n  }\n"); // debug
  setPoseStackDataAttr($editableNode, serialize($newPoses));
  return true;
}

/*-
@param $poses <string[]>
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
@remarks 空配列を渡した場合はスクリプトノードを削除して成功とする。
*/
proc int writeAttrPoses(string $poses[]) {
  // print("writeAttrPoses\n"); // debug
  // print("  poses:{\n    " + stringArrayToString($poses, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poses`) {
    deleteScriptNodes();
    return true;
  }

  string $editableNode = getEditableScriptNode({});
  if (!isValidScriptNode($editableNode)) $editableNode = createScriptNode();
  if (!isValidScriptNode($editableNode)) return false;

  setPoseStackDataAttr($editableNode, serialize($poses));
  return true;
}

/*-
@param $nodes <string[]>
@param $poses <string[]> 編集可能なポーズを格納する配列。
@returns <int> 編集可能なポーズの開始インデックス。基数は`0`。
*/
proc int makeEditablePoses(string $nodes[], string $poses[]) {
  // print("makeEditablePoses\n"); // debug
  // print("  nodes:{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  clear $poses;
  string $allPoses[] = readAttrPoses($nodes);
  int $indexOffset;
  for ($i = 0; $i < `size $allPoses`; $i++) {
    if (!isPoseReferenced($allPoses[$i])) {
      int $numPoses = `size $poses`;
      if (!$numPoses) $indexOffset = $i;
      $poses[$numPoses] = $allPoses[$i];
    }
  }
  return $indexOffset;
}

/*-
@param $index <int> 基数`0`の整数。
@param $pose <string>
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
*/
proc int insertPose(int $index, string $pose) {
  // print("insertPose\n"); // debug
  // print("  index:" + $index + "\n"); // debug
  // print("  pose :" + $pose + "\n"); // debug
  if (!`size $pose`) return false;

  string $nodes[] = getScriptNodes();
  string $editableNode = getEditableScriptNode($nodes);
  if (!isValidScriptNode($editableNode)) $editableNode = createScriptNode();
  if (!isValidScriptNode($editableNode)) return false;
  // print("  editableNode:" + $editableNode + "\n"); // debug

  if (!`size $nodes`) $nodes = {$editableNode};
  string $poses[];
  int $indexOffset = makeEditablePoses($nodes, $poses);
  $index -= $indexOffset;
  // print("  poses:{\n    " + stringArrayToString($poses, ",\n    ") + "\n  }\n"); // debug
  // print("  indexOffset:" + $indexOffset + "\n"); // debug
  // print("  index      :" + $index + "\n"); // debug
  if ($index < 0) $index = 0;
  if (!stringArrayInsertAtIndex($index, $poses, $pose)) return false;

  setPoseStackDataAttr($editableNode, serialize($poses));
  return true;
}

/*-
@param $fromIndex <int> 基数`0`の整数。
@param $destIndex <int> 基数`0`の整数。
@param $pose <string>
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
*/
proc int movePose(int $fromIndex, int $destIndex) {
  // print("movePose\n"); // debug
  // print("  fromIndex:" + $fromIndex + "\n"); // debug
  // print("  destIndex:" + $destIndex + "\n"); // debug
  if ($fromIndex == $destIndex) return false;

  string $nodes[] = getScriptNodes();
  string $editableNode = getEditableScriptNode($nodes);
  if (!isValidScriptNode($editableNode)) return false;
  // print("  editableNode:" + $editableNode + "\n"); // debug

  if (!`size $nodes`) $nodes = {$editableNode};
  string $poses[];
  int $indexOffset = makeEditablePoses($nodes, $poses);
  // print("  poses:{\n    " + stringArrayToString($poses, ",\n    ") + "\n  }\n"); // debug

  $fromIndex -= $indexOffset;
  $destIndex -= $indexOffset;
  // print("  indexOffset:" + $indexOffset + "\n"); // debug
  // print("  fromIndex  :" + $fromIndex + "\n"); // debug
  // print("  destIndex  :" + $destIndex + "\n"); // debug

  int $numPoses = `size $poses`;
  int $fromRangeMin = ($fromIndex > $destIndex) ? 1 : 0;
  int $fromRangeMax = $numPoses - (($fromIndex > $destIndex) ? 1 : 2);
  int $destRangeMin = ($fromIndex > $destIndex) ? 0 : 1;
  int $destRangeMax = $numPoses - (($fromIndex > $destIndex) ? 2 : 1);
  // print("  numPoses    :" + $numPoses + "\n"); // debug
  // print("  fromRangeMin:" + $fromRangeMin + "\n"); // debug
  // print("  fromRangeMax:" + $fromRangeMax + "\n"); // debug
  // print("  destRangeMin:" + $destRangeMin + "\n"); // debug
  // print("  destRangeMax:" + $destRangeMax + "\n"); // debug
  if (!isInRangeInt($fromIndex, $fromRangeMin, $fromRangeMax)) return false;
  if (!isInRangeInt($destIndex, $destRangeMin, $destRangeMax)) return false;

  string $pose = $poses[$fromIndex];
  if (!`size $pose`) return false;

  if (!stringArrayRemoveAtIndex($fromIndex, $poses)) return false;
  if (!stringArrayInsertAtIndex($destIndex, $poses, $pose)) return false;
  setPoseStackDataAttr($editableNode, serialize($poses));
  return true;
}

/*-
@param $index <int> 基数`0`の整数。
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
*/
proc int removePose(int $index) {
  // print("removePose\n"); // debug
  // print("  index:" + $index + "\n"); // debug

  string $nodes[] = getScriptNodes();
  string $editableNode = getEditableScriptNode($nodes);
  if (!isValidScriptNode($editableNode)) return false;
  // print("  editableNode:" + $editableNode + "\n"); // debug

  if (!`size $nodes`) $nodes = {$editableNode};
  string $poses[];
  int $indexOffset = makeEditablePoses($nodes, $poses);
  // print("  poses:{\n    " + stringArrayToString($poses, ",\n    ") + "\n  }\n"); // debug

  $index -= $indexOffset;
  // print("  indexOffset:" + $indexOffset + "\n"); // debug
  // print("  index      :" + $index + "\n"); // debug
  if (!isInRangeInt($index, 0, `size $poses` - 1)) return false;

  if (!stringArrayRemoveAtIndex($index, $poses)) return false;
  if (!`size $poses`) {
    deleteScriptNodes();
    return true;
  }

  setPoseStackDataAttr($editableNode, serialize($poses));
  return true;
}

/*-
@param $index <int> 基数`0`の整数。
@param $pose <string>
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
*/
proc int replacePose(int $index, string $pose) {
  // print("replacePose\n"); // debug
  // print("  index:" + $index + "\n"); // debug
  // print("  pose :" + $pose + "\n"); // debug
  if (!`size $pose`) return 0;

  string $nodes[] = getScriptNodes();
  string $editableNode = getEditableScriptNode($nodes);
  if (!isValidScriptNode($editableNode)) return false;
  // print("  editableNode:" + $editableNode + "\n"); // debug

  if (!`size $nodes`) $nodes = {$editableNode};
  string $poses[];
  int $indexOffset = makeEditablePoses($nodes, $poses);
  $index -= $indexOffset;
  // print("  poses:{\n    " + stringArrayToString($poses, ",\n    ") + "\n  }\n"); // debug
  // print("  indexOffset:" + $indexOffset + "\n"); // debug
  // print("  index      :" + $index + "\n"); // debug
  if (!isInRangeInt($index, 0, `size $poses` - 1)) return false;

  $poses[$index] = $pose;
  setPoseStackDataAttr($editableNode, serialize($poses));
  return true;
}

// -----------------------------------------------------------------------------
// ポーズ操作
// -----------------------------------------------------------------------------
/*-
@returns <boolean>
*/
proc int clearPoses() {
  // print("clearPoses\n"); // debug
  deleteScriptNodes();
  notifyString("nkPoseStackPosesCleared", "none");
  return true;
}

/*-
@param $filename <string> ファイル選択ダイアログを使用するには空文字列を渡す。
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
*/
proc int openPoses(string $filename) {
  // print("openPoses\n"); // debug
  // print("  filename:" + $filename + "\n"); // debug
  if (!`size $filename`) {
    $filename = getOpenFilename("Open - nkPoseStack", "*.posestack");
  }
  // print("  filename:" + $filename + "\n"); // debug
  if (!existsFilename($filename)) return false;

  // データバージョンの確認とコンバート
  string $poses[] = deserialize(
    convertDataVersion(readAllText($filename, ""))
  );
  // print("  poses:{\n    " + stringArrayToString($poses, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poses`) return false;

  if (!writeAttrPoses($poses)) return false;

  notifyString("nkPoseStackPosesOpened", "none");
  return true;
}

/*-
@param $filename <string> ファイル選択ダイアログを使用するには空文字列を渡す。
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
*/
proc int importPoses(string $filename) {
  // print("importPoses\n"); // debug
  // print("  filename:" + $filename + "\n"); // debug
  if (!`size $filename`) {
    $filename = getOpenFilename("Import - nkPoseStack", "*.posestack");
  }
  // print("  filename:" + $filename + "\n"); // debug
  if (!existsFilename($filename)) return false;

  // データバージョンの確認とコンバート
  string $poses[] = deserialize(
    convertDataVersion(readAllText($filename, ""))
  );
  // print("  poses:{\n    " + stringArrayToString($poses, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poses`) return false;

  if (!appendAttrPoses($poses)) return false;

  notifyString("nkPoseStackPosesImported", "none");
  return true;
}

/*-
@param $filename <string> ファイル選択ダイアログを使用するには空文字列を渡す。
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
*/
proc int savePoses(string $filename) {
  // print("savePoses\n"); // debug
  // print("  filename:" + $filename + "\n"); // debug
  string $editableNode = getEditableScriptNode({});
  if (!isValidScriptNode($editableNode)) return false;

  if (!`size $filename`) {
    $filename = getSaveFilename("Save List As... - nkPoseStack", "*.posestack");
  }
  // print("  filename:" + $filename + "\n"); // debug
  if (!`size $filename`) return false;

  writeAllText($filename, "", getPoseStackDataAttr($editableNode));
  return true;
}

/*-
@returns <string[]>
*/
proc string[] getPoseNames() {
  // print("getPoseNames\n"); // debug
  string $poseNames[];
  string $poses[] = readAttrPoses({});
  for ($pose in $poses) {
    $poseNames[`size $poseNames`] = extractPoseName($pose);
  }
  return $poseNames;
}

/*-
@param $poseName <string>
@param $nodes <string[]>
@param $poseSettings <string[]> `boolean,boolean,boolean/string,string/int,int,int,boolean,boolean`形式の文字列配列。

| 構文    | 意味                 |
| ------- | -------------------- |
| boolean | paste_x              |
| boolean | paste_y              |
| boolean | paste_z              |
| string  | select_a             |
| string  | select_b             |
| int     | mirror_axis          |
| int     | primary_axis         |
| int     | secondary_axis       |
| boolean | invertPrimary_axis   |
| boolean | invertSecondary_axis |
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
*/
proc int addPose(
  string $poseName,
  string $nodes[],
  string $poseSettings[]
) {
  // print("addPose\n"); // debug
  // print("  poseName    :" + $poseName + "\n"); // debug
  // print("  nodes       :{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  // print("  poseSettings:{\n    " + stringArrayToString($poseSettings, ",\n    ") + "\n  }\n"); // debug
  string $poseTransforms[] = makePoseTransforms($nodes, $poseSettings);
  // print("  poseTransforms:{\n    " + (stringArrayToString($poseTransforms, ",\n    ")) + "\n  }\n"); // debug
  if (!`size $poseTransforms`) return false;

  string $pose = makePose($poseName, $poseTransforms);
  // print("  pose:" + $pose + "\n"); // debug
  if (!`size $pose`) return false;

  if (!appendAttrPoses({$pose})) return false;

  notifyString("nkPoseStackPoseAdded", "last");
  return true;
}

/*-
@param $index <int> 基数`0`の整数。
@param $poseName <string>
@param $poseSettings <string[]> `addPose`の`poseSettings`と同様。
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
*/
proc int editPose(int $index, string $poseName, string $poseSettings[]) {
  // print("editPose\n"); // debug
  // print("  index       :" + $index + "\n"); // debug
  // print("  poseName    :" + $poseName + "\n"); // debug
  // print("  poseSettings:{\n    " + stringArrayToString($poseSettings, ",\n    ") + "\n  }\n"); // debug
  string $poses[] = readAttrPoses({});
  if (!isInRangeInt($index, 0, `size $poses` - 1)) return false;

  string $pose = $poses[$index];
  // print("  pose:" + $pose + "\n"); // debug
  if (!`size $pose` || isPoseReferenced($pose)) return false;

  string $poseTransforms[] = extractPoseTransforms($pose);
  // print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poseTransforms`) return false;

  string $newPoseTransforms[];
  int $numTransforms = minStringArrayCount($poseSettings, $poseTransforms);
  for ($i = 0; $i < $numTransforms; $i++) {
    string $poseTransform = $poseTransforms[$i];
    string $n = extractTransformNode($poseTransform);
    string $header = makeTransformHeader($n, $poseSettings[$i]);
    float $values[] = extractTransformValues($poseTransform);
    string $newPoseTransform = makePoseTransform($header, $values);
    $newPoseTransforms[$i] = $newPoseTransform;
    // print("  poseTransform:" + $poseTransform + "\n"); // debug
    // print("    n               :" + $n + "\n"); // debug
    // print("    header          :" + $header + "\n"); // debug
    // print("    values          :{" + floatArrayToString($values, ", ") + "}\n"); // debug
    // print("    newPoseTransform:" + $newPoseTransform + "\n"); // debug
  }
  // print("  newPoseTransforms:{\n    " + (stringArrayToString($newPoseTransforms, ",\n    ")) + "\n  }\n"); // debug

  string $newPose = makePose($poseName, $newPoseTransforms);
  // print("  newPose:" + $newPose + "\n"); // debug
  if (!`size $newPose`) return false;

  if (!replacePose($index, $newPose)) return false;

  notifyString("nkPoseStackPoseEdited", "keepIndex");
  return true;
}

/*-
@param $index <int> 基数`0`の整数。
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
@remarks リファレンスポーズの場合はリストの最後に複製される。
*/
proc int duplicatePose(int $index) {
  // print("duplicatePose\n"); // debug
  // print("  index:" + $index + "\n"); // debug
  string $poses[] = readAttrPoses({});
  int $numPoses = `size $poses`;
  if (!isInRangeInt($index, 0, $numPoses - 1)) return false;

  string $pose = $poses[$index];
  // print("  pose:" + $pose + "\n"); // debug
  if (!`size $pose`) return false;

  int $newIndex = $index + 1;
  // print("  newIndex:" + $newIndex + "\n"); // debug
  string $selectionMode = "next";
  if (isPoseReferenced($pose)) {
    $pose = `substitute "^!" $pose ""`;
    // print("  pose:" + $pose + "\n"); // debug
    $newIndex = $numPoses;
    // print("  newIndex:" + $newIndex + "\n"); // debug
    $selectionMode = "last";
  }
  if (!insertPose($newIndex, $pose)) return false;

  notifyString("nkPoseStackPoseDuplicated", $selectionMode);
  return true;
}

/*-
@param $index <int> 基数`0`の整数。
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
*/
proc int updatePose(int $index) {
  // print("updatePose\n"); // debug
  // print("  index:" + $index + "\n"); // debug
  string $poses[] = readAttrPoses({});
  if (!isInRangeInt($index, 0, `size $poses` - 1)) return false;

  string $pose = $poses[$index];
  // print("  pose:" + $pose + "\n"); // debug
  if (!`size $pose` || isPoseReferenced($pose)) return false;

  string $poseName = extractPoseName($pose);
  // print("  poseName      :" + $poseName + "\n"); // debug
  string $poseTransforms[] = extractPoseTransforms($pose);
  // print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n"); // debug
  int $numPoseTransforms = `size $poseTransforms`;
  if (!$numPoseTransforms) return false;

  string $nodes[];
  string $poseSettings[];
  for ($i = 0; $i < $numPoseTransforms; $i++) {
    string $poseTransform = $poseTransforms[$i];
    string $node = extractTransformNode($poseTransform);
    string $poseSetting = extractPoseSetting($poseTransform);
    // print("  poseTransform:" + $poseTransform + "\n"); // debug
    // print("    node       :" + $node + "\n"); // debug
    // print("    poseSetting:" + $poseSetting + "\n"); // debug
    $nodes[$i] = $node;
    $poseSettings[$i] = $poseSetting;
  }
  string $newPoseTransforms[] = makePoseTransforms($nodes, $poseSettings);
  // print("  newPoseTransforms:{\n    " + (stringArrayToString($newPoseTransforms, ",\n    ")) + "\n  }\n"); // debug
  if (`size $newPoseTransforms` != $numPoseTransforms) return false;

  // ノードが存在しない場合は元のデータを使用する
  for ($i = 0; $i < $numPoseTransforms; $i++) {
    if (!`size $newPoseTransforms[$i]`) {
      $newPoseTransforms[$i] = $poseTransforms[$i];
    }
  }
  // print("  newPoseTransforms:{\n    " + (stringArrayToString($newPoseTransforms, ",\n    ")) + "\n  }\n"); // debug

  string $newPose = makePose($poseName, $newPoseTransforms);
  // print("  newPose:" + $newPose + "\n"); // debug
  if (!`size $newPose`) return false;

  if (!replacePose($index, $newPose)) return false;

  notifyString("nkPoseStackPoseUpdated", "keepIndex");
  return true;
}

/*-
@param $index <int> 基数`0`の整数。
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
*/
proc int deletePose(int $index) {
  // print("deletePose\n"); // debug
  // print("  index:" + $index + "\n"); // debug
  if (!removePose($index)) return false;

  string $poses[] = readAttrPoses({});
  int $numPoses = `size $poses`;
  string $selectionMode = "none";
  if ($numPoses > 0) {
    $selectionMode = ($index > $numPoses - 1) ? "last" : "keepIndex";
  }
  notifyString("nkPoseStackPoseDeleted", $selectionMode);
  return true;
}

/*-
@param $index <int> 基数`0`の整数。
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
*/
proc int movePrevPose(int $index) {
  // print("movePrevPose\n"); // debug
  // print("  index:" + $index + "\n"); // debug
  if (!movePose($index, $index - 1)) return false;

  notifyString("nkPoseStackPoseMovedPrev", "prev");
  return true;
}

/*-
@param $index <int> 基数`0`の整数。
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
*/
proc int moveNextPose(int $index) {
  // print("moveNextPose\n"); // debug
  // print("  index:" + $index + "\n"); // debug
  if (!movePose($index, $index + 1)) return false;

  notifyString("nkPoseStackPoseMovedNext", "next");
  return true;
}

// -----------------------------------------------------------------------------
// ノード操作
// -----------------------------------------------------------------------------
/*-
@param $index <int> 基数`0`の整数。
@param $isOpposite <boolean>
@param $modifier <int> 修飾キーの状態（`getModifiers`）により選択動作を指定する。
リストに無い値を指定した場合は置き換え動作になる。

| 値  | キー         | 動作     |
| --- | ------------ | -------- |
| `0` | Nothing      | 置き換え |
| `1` | Shift        | トグル   |
| `4` | Ctrl         | 選択解除 |
| `5` | Shift + Ctrl | 追加選択 |
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
@remarks 対象ノードが存在しない場合は空のリストで選択動作を行う。
*/
proc int selectNodes(int $index, int $isOpposite, int $modifier) {
  // print("selectNodes\n"); // debug
  // print("  index     :" + $index + "\n"); // debug
  // print("  isOpposite:" + $isOpposite + "\n"); // debug
  // print("  modifier  :" + $modifier + "\n"); // debug
  string $poses[] = readAttrPoses({});
  if (!isInRangeInt($index, 0, `size $poses` - 1)) return false;

  string $pose = $poses[$index];
  // print("  pose:" + $pose + "\n"); // debug
  if (!`size $pose`) return false;

  string $poseTransforms[] = extractPoseTransforms($pose);
  // print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poseTransforms`) return false;

  string $targetNodes[];
  for ($poseTransform in $poseTransforms) {
    string $targetNode = extractTransformNode($poseTransform);
    string $poseSetting = extractPoseSetting($poseTransform);
    string $selectSetting[] = extractSelectSetting($poseSetting);
    string $patternA = $selectSetting[0];
    string $patternB = $selectSetting[1];
    // print("  poseTransform:" + $poseTransform + "\n"); // debug
    // print("    targetNode   :" + $targetNode + "\n"); // debug
    // print("    poseSetting  :" + $poseSetting + "\n"); // debug
    // print("    selectSetting:{" + stringArrayToString($selectSetting, ", ") + "}\n"); // debug
    // print("    patternA     :" + $patternA + "\n"); // debug
    // print("    patternB     :" + $patternB + "\n"); // debug
    if ($isOpposite) {
      if (`gmatch $targetNode ("*" + $patternA + "*")`) {
        $targetNode = substituteAllString($targetNode, $patternA, $patternB);
      }
      else if (`gmatch $targetNode ("*" + $patternB + "*")`) {
        $targetNode = substituteAllString($targetNode, $patternB, $patternA);
      }
    }
    if (`objExists $targetNode`) {
      $targetNodes[`size $targetNodes`] = $targetNode;
    }
  }
  // print("  targetNodes:{\n    " + stringArrayToString($targetNodes, "\n    ") + "\n  }\n"); // debug

  switch ($modifier) {
    // Shift
    case 1: select -tgl $targetNodes; break;
    // Ctrl
    case 4: select -d $targetNodes; break;
    // Shift + Ctrl
    case 5: select -add $targetNodes; break;
    // Nothing
    default: select -r $targetNodes; break;
  }
  return true;
}

/*-
@param $index <int> 基数`0`の整数。
@param $isOpposite <boolean>
@param $targetNodes <string[]>
@returns <boolean> 成功した場合は`true`、失敗した場合は`false`。
*/
proc int pastePose(int $index, int $isOpposite, string $targetNodes[]) {
  // print("pastePose\n"); // debug
  // print("  index      :" + $index + "\n"); // debug
  // print("  isOpposite :" + $isOpposite + "\n"); // debug
  // print("  targetNodes:{\n    " + stringArrayToString($targetNodes, ",\n    ") + "\n  }\n"); // debug
  if (!`size $targetNodes`) return false;

  string $poses[] = readAttrPoses({});
  if (!isInRangeInt($index, 0, `size $poses` - 1)) return false;

  string $pose = $poses[$index];
  // print("  pose:" + $pose + "\n"); // debug
  if (!`size $pose`) return false;

  string $poseTransforms[] = extractPoseTransforms($pose);
  // print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poseTransforms`) return false;

  int $numTargets = minStringArrayCount($targetNodes, $poseTransforms);
  // print("  numTargets:" + $numTargets + "\n"); // debug
  for ($i = 0; $i < $numTargets; $i++) {
    string $poseTransform = $poseTransforms[$i];
    string $sourceNode = extractTransformNode($poseTransform);
    string $targetNode = $targetNodes[$i];
    float $transformValues[] = extractTransformValues($poseTransform);
    string $poseSetting = extractPoseSetting($poseTransform);
    int $pasteSetting[] = extractPasteSetting($poseSetting);
    // print("  poseTransform:" + $poseTransform + "\n"); // debug
    // print("    sourceNode     :" + $sourceNode + "\n"); // debug
    // print("    targetNode     :" + $targetNode + "\n"); // debug
    // print("    transformValues:{" + floatArrayToString($transformValues, ", ") + "}\n"); // debug
    // print("    poseSetting    :" + $poseSetting + "\n"); // debug
    // print("    pasteSetting   :{" + intArrayToString($pasteSetting, ", ") + "}\n"); // debug

    if ($isOpposite) {
      int $mirrorSetting[] = extractMirrorSetting($poseSetting);
      string $sourceParent = getParentNode($sourceNode);
      string $targetParent = getParentNode($targetNode);
      int $hasCommonParent = $sourceParent == $targetParent;
      // print("    mirrorSetting  :{" + intArrayToString($mirrorSetting, ", ") + "}\n"); // debug
      // print("    hasCommonParent:" + $hasCommonParent + "\n"); // debug
      $transformValues = mirrorTransform(
        $targetNode,
        $transformValues,
        $hasCommonParent,
        $mirrorSetting[0],
        $mirrorSetting[1],
        $mirrorSetting[2],
        $mirrorSetting[3],
        $mirrorSetting[4]
      );
    }
    else {
      $transformValues = asIsTransform($targetNode, $transformValues);
    }

    setTransformAttributes(
      $targetNode,
      $transformValues,
      $pasteSetting[0],
      $pasteSetting[1],
      $pasteSetting[2]
    );
  }
  return true;
}

// /////////////////////////////////////////////////////////////////////////////
// スクリプトジョブ
// /////////////////////////////////////////////////////////////////////////////
/*-
@var <string[]>
*/
global string $nkPoseStackScriptNodeIds[];

/*-
@var <int[]>
*/
global int $nkPoseStackScriptJobIds[];

/*-
@returns <>
*/
proc initializeScriptJobParameters() {
  // print("initializeScriptJobParameters\n"); // debug
  global string $nkPoseStackScriptNodeIds[];
  global int $nkPoseStackScriptJobIds[];
  clear $nkPoseStackScriptNodeIds;
  clear $nkPoseStackScriptJobIds;
}

// -----------------------------------------------------------------------------
// イベントジョブ
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc registerEventJob() {
  // print("registerEventJob\n"); // debug
  int $newSceneOpenedId = `scriptJob
      -e "NewSceneOpened" "nkPoseStackNewSceneOpened"
      -p "nkPoseStackWindow"`;
  int $postSceneReadId = `scriptJob
      -e "PostSceneRead" "nkPoseStackPostSceneRead"
      -p "nkPoseStackWindow"`;
  // print("  nkPoseStackNewSceneOpened:" + $newSceneOpenedId + "\n"); // debug
  // print("   nkPoseStackPostSceneRead:" + $postSceneReadId + "\n"); // debug
}

/*-
@returns <>
*/
proc unregisterEventJob() {
  // print("unregisterEventJob\n"); // debug
}

// -----------------------------------------------------------------------------
// ノードジョブ
// -----------------------------------------------------------------------------
/*-
@param $n <string>
@returns <>
*/
proc registerNodeJob(string $n) {
  // print("registerNodeJob\n"); // debug
  // print("  n:" + $n + "\n"); // debug
  global string $nkPoseStackScriptNodeIds[];
  global int $nkPoseStackScriptJobIds[];
  if (!isValidScriptNode($n)) return;

  string $nodeId = toUUID($n);
  // print("  nodeId:" + $nodeId + "\n"); // debug
  int $index = stringArrayFind($nodeId, 0, $nkPoseStackScriptNodeIds);
  // print("   index:" + $index + "\n"); // debug
  if ($index >= 0) return;

  string $script = "nkPoseStackAttributeDeleted(\"" + $nodeId + "\");";
  int $jobId = `scriptJob -ad ($n + ".psd") $script -ro true`;
  // print("   jobId:" + $jobId + "\n"); // debug
  $index = `size $nkPoseStackScriptNodeIds`;
  $nkPoseStackScriptNodeIds[$index] = $nodeId;
  $nkPoseStackScriptJobIds[$index] = $jobId;
  // print("  nkPoseStackScriptNodeIds:{\n    " + stringArrayToString($nkPoseStackScriptNodeIds, ",\n    ") + "\n  }\n"); // debug
  // print("   nkPoseStackScriptJobIds:{\n    " + intArrayToString($nkPoseStackScriptJobIds, ",\n    ") + "\n  }\n"); // debug
}

/*-
@param $nodeId <string>
@returns <>
*/
proc unregisterNodeJob(string $nodeId) {
  // print("unregisterNodeJob\n"); // debug
  // print("  nodeId:" + $nodeId + "\n"); // debug
  global string $nkPoseStackScriptNodeIds[];
  global int $nkPoseStackScriptJobIds[];

  int $index = stringArrayFind($nodeId, 0, $nkPoseStackScriptNodeIds);
  // print("   index:" + $index + "\n"); // debug
  if ($index < 0) return;

  if (!isInRangeInt($index, 0, `size $nkPoseStackScriptJobIds` - 1)) return;

  stringArrayRemoveAtIndex($index, $nkPoseStackScriptNodeIds);
  intArrayRemoveAtIndex($index, $nkPoseStackScriptJobIds);
  // print("  nkPoseStackScriptNodeIds:{\n    " + stringArrayToString($nkPoseStackScriptNodeIds, ",\n    ") + "\n  }\n"); // debug
  // print("   nkPoseStackScriptJobIds:{\n    " + intArrayToString($nkPoseStackScriptJobIds, ",\n    ") + "\n  }\n"); // debug
}

// /////////////////////////////////////////////////////////////////////////////
// プレゼンテーション
// /////////////////////////////////////////////////////////////////////////////
/*-
@var <int> `-1`ならポーズ追加。
*/
global int $nkPoseStackEditorPoseIndex;

/*-
@var <string> 設定UI用の一時変数。
*/
global string $nkPoseStackEditorPoseName;

/*-
@var <string[]> 設定UI用の一時変数。
*/
global string $nkPoseStackEditorNodes[];

/*-
@var <string[]> 設定UI用の一時変数。
*/
global string $nkPoseStackEditorPoseSettings[];

/*-
@var <string> 設定UI用の一時変数。
*/
global string $nkPoseStackEditorSelectPatternA;

/*-
@var <string> 設定UI用の一時変数。
*/
global string $nkPoseStackEditorSelectPatternB;

/*-
@var <boolean> 設定UIが更新中かどうか。
*/
global int $nkPoseStackEditorIsUIUpdating;

/*-
@var <boolean[3]> プロンプトを閉じる際に初期化用の設定値を更新するかどうか。
*/
global int $nkPoseStackNeedUpdateInitParameters[];

/*-
@returns <>
*/
proc initializeEditorParameters() {
  global int $nkPoseStackEditorPoseIndex;
  global string $nkPoseStackEditorPoseName;
  global string $nkPoseStackEditorNodes[];
  global string $nkPoseStackEditorPoseSettings[];
  global string $nkPoseStackEditorSelectPatternA;
  global string $nkPoseStackEditorSelectPatternB;
  global int $nkPoseStackEditorIsUIUpdating;
  global int $nkPoseStackNeedUpdateInitParameters[];
  $nkPoseStackEditorPoseIndex = -1;
  $nkPoseStackEditorPoseName = "";
  clear $nkPoseStackEditorNodes;
  clear $nkPoseStackEditorPoseSettings;
  $nkPoseStackEditorSelectPatternA = "";
  $nkPoseStackEditorSelectPatternB = "";
  $nkPoseStackEditorIsUIUpdating = false;
  $nkPoseStackNeedUpdateInitParameters = {false, false, false};
}

/*-
@param $input <string>
@returns <string>
*/
proc string sanitizeText(string $input) {
  $input = regexReplace("[\\!=;\\[\\]/,]", "_", $input, "");
  return $input;
}

/*-
@param $index <int> 基数`0`の整数。
@returns <string>
*/
proc string makeNodeListLabel(int $index) {
  global string $nkPoseStackEditorNodes[];
  global string $nkPoseStackEditorPoseSettings[];
  string $label = "[" + $nkPoseStackEditorPoseSettings[$index] + "]";
  string $buffer[];
  int $depth = `tokenize $nkPoseStackEditorNodes[$index] "|" $buffer`;
  if ($depth) {
    $label += " |" + $buffer[0];
    if ($depth == 2) $label += "|" + $buffer[1];
    else if ($depth > 2) $label += "...|" + $buffer[$depth - 1];
  }
  return $label;
}

/*-
@param $partial <boolean> 選択した項目のみを更新するかどうか。
@returns <>
*/
proc updateNodeList(int $partial) {
  // print("updateNodeList\n"); // debug
  // print("  partial:" + $partial + "\n"); // debug
  global string $nkPoseStackEditorNodes[];
  global string $nkPoseStackEditorPoseSettings[];
  string $nodeList = getUIControl("nkPoseStackEditorWindow", "nodeList");
  int $nodeIndices[] = qIndexArray("textScrollList", "-sii", $nodeList);
  // print("  nodeIndices:{" + intArrayToString($nodeIndices, ", ") + "}\n"); // debug
  int $numTransforms = minStringArrayCount(
    $nkPoseStackEditorNodes,
    $nkPoseStackEditorPoseSettings
  );
  if ($partial) {
    for ($i = `size $nodeIndices`; $i > 0; $i--) {
      int $index = $nodeIndices[$i - 1];
      $label = makeNodeListLabel($index);
      eIndex("textScrollList", "-rii", $index, $nodeList);
      eIndexString("textScrollList", "-ap", $index, $label, $nodeList);
    }
  }
  else {
    executeUIControl("textScrollList", "-ra", $nodeList);
    for ($i = 0; $i < $numTransforms; $i++) {
      $label = makeNodeListLabel($i);
      eString("textScrollList", "-a", $label, $nodeList);
    }
  }
  eIndexArray("textScrollList", "-sii", $nodeIndices, $nodeList);
}

/*-
@param $id <int>
@returns <>
*/
proc updatePoseSettings(int $id) {
  // print("updatePoseSettings\n"); // debug
  // print("  id:" + $id + "\n"); // debug
  global string $nkPoseStackEditorNodes[];
  global string $nkPoseStackEditorPoseSettings[];
  global int $nkPoseStackEditorIsUIUpdating;
  // print("  nkPoseStackEditorIsUIUpdating:" + $nkPoseStackEditorIsUIUpdating + "\n"); // debug

  // 設定UIの更新中はポーズ設定を更新しない
  if ($nkPoseStackEditorIsUIUpdating) return;

  string $nodeList = getUIControl("nkPoseStackEditorWindow", "nodeList");
  string $pasteAttributesCheckBoxGrp = getUIControl("nkPoseStackEditorWindow", "pasteAttributesCheckBoxGrp");
  string $selectPatternAText = getUIControl("nkPoseStackEditorWindow", "selectPatternAText");
  string $selectPatternBText = getUIControl("nkPoseStackEditorWindow", "selectPatternBText");
  string $mirrorAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "mirrorAxisRadioButton");
  string $primaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "primaryAxisRadioButton");
  string $secondaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "secondaryAxisRadioButton");
  string $invertAxisCheckBoxGrp = getUIControl("nkPoseStackEditorWindow", "invertAxisCheckBoxGrp");

  int $pasteSetting[] = qIntArray("checkBoxGrp", "-va3", $pasteAttributesCheckBoxGrp);
  string $selectSetting[] = {
    sanitizeText(qString("textFieldGrp", "-tx", $selectPatternAText)),
    sanitizeText(qString("textFieldGrp", "-tx", $selectPatternBText))
  };
  int $invertAxisValues[] = qIntArray("checkBoxGrp", "-va2", $invertAxisCheckBoxGrp);
  int $mirrorSetting[] = {
    qIndex("radioButtonGrp", "-sl", $mirrorAxisRadioButton),
    qIndex("radioButtonGrp", "-sl", $primaryAxisRadioButton),
    qIndex("radioButtonGrp", "-sl", $secondaryAxisRadioButton),
    $invertAxisValues[0],
    $invertAxisValues[1]
  };
  // print("  pasteSetting :{" + intArrayToString($pasteSetting, ", ") + "}\n"); // debug
  // print("  selectSetting:{" + stringArrayToString($selectSetting, ", ") + "}\n"); // debug
  // print("  mirrorSetting:{" + intArrayToString($mirrorSetting, ", ") + "}\n"); // debug

  int $nodeIndices[] = qIndexArray("textScrollList", "-sii", $nodeList);
  // print("  nodeIndices:{" + intArrayToString($nodeIndices, ", ") + "}\n"); // debug
  for ($nodeIndex in $nodeIndices) {
    string $newPoseSetting = $nkPoseStackEditorPoseSettings[$nodeIndex];
    // print("    newPoseSetting:" + $newPoseSetting + "\n"); // debug
    int $newPasteSetting[] = extractPasteSetting($newPoseSetting);
    string $newSelectSetting[] = extractSelectSetting($newPoseSetting);
    int $newMirrorSetting[] = extractMirrorSetting($newPoseSetting);
    // print("  newPasteSetting :{" + intArrayToString($newPasteSetting, ", ") + "}\n"); // debug
    // print("  newSelectSetting:{" + stringArrayToString($newSelectSetting, ", ") + "}\n"); // debug
    // print("  newMirrorSetting:{" + intArrayToString($newMirrorSetting, ", ") + "}\n"); // debug

    switch ($id) {
      case 0: $newPasteSetting[0] = $pasteSetting[0]; break;
      case 1: $newPasteSetting[1] = $pasteSetting[1]; break;
      case 2: $newPasteSetting[2] = $pasteSetting[2]; break;
      case 3: $newSelectSetting[0] = $selectSetting[0]; break;
      case 4: $newSelectSetting[1] = $selectSetting[1]; break;
      case 5: $newMirrorSetting[0] = $mirrorSetting[0]; break;
      case 6: $newMirrorSetting[1] = $mirrorSetting[1]; break;
      case 7: $newMirrorSetting[2] = $mirrorSetting[2]; break;
      case 8: $newMirrorSetting[3] = $mirrorSetting[3]; break;
      case 9: $newMirrorSetting[4] = $mirrorSetting[4]; break;
      default: break;
    }

    $nkPoseStackEditorPoseSettings[$nodeIndex] = makePoseSetting(
      $newPasteSetting, $newSelectSetting, $newMirrorSetting
    );
  }
  updateNodeList(true);
}

/*-
@param $pasteSetting <boolean[0|3]>
@returns <>
*/
proc updatePasteSettingUI(int $pasteSetting[]) {
  // print("updatePasteSettingUI\n"); // debug
  // print("  pasteSetting:{" + intArrayToString($pasteSetting, ", ") + "}\n"); // debug
  global int $nkPoseStackNeedUpdateInitParameters[];
  string $pasteAttributesCheckBoxGrp = getUIControl("nkPoseStackEditorWindow", "pasteAttributesCheckBoxGrp");
  int $isSelected = `size $pasteSetting` > 0;
  eEnable($isSelected, $pasteAttributesCheckBoxGrp);
  if ($isSelected) {
    eOrderedInt("checkBoxGrp", "-v", $pasteSetting, $pasteAttributesCheckBoxGrp);
  }
  if (!$nkPoseStackNeedUpdateInitParameters[0] && $isSelected) {
    $nkPoseStackNeedUpdateInitParameters[0] = true;
  }
}

/*-
@param $selectSetting <string[0|2]>
@returns <>
*/
proc updateSelectSettingUI(string $selectSetting[]) {
  // print("updateSelectSettingUI\n"); // debug
  // print("  selectSetting:{" + stringArrayToString($selectSetting, ", ") + "}\n"); // debug
  global int $nkPoseStackNeedUpdateInitParameters[];
  global string $nkPoseStackEditorSelectPatternA;
  global string $nkPoseStackEditorSelectPatternB;
  string $selectPatternAText = getUIControl("nkPoseStackEditorWindow", "selectPatternAText");
  string $selectPatternBText = getUIControl("nkPoseStackEditorWindow", "selectPatternBText");
  int $isSelected = `size $selectSetting` > 0;
  eEnable($isSelected, $selectPatternAText);
  eEnable($isSelected, $selectPatternBText);
  if ($isSelected) {
    $nkPoseStackEditorSelectPatternA = $selectSetting[0];
    $nkPoseStackEditorSelectPatternB = $selectSetting[1];
    // print("  nkPoseStackEditorSelectPatternA:" + $nkPoseStackEditorSelectPatternA + "\n"); // debug
    // print("  nkPoseStackEditorSelectPatternB:" + $nkPoseStackEditorSelectPatternB + "\n"); // debug
    eString(
      "textFieldGrp",
      "-tx",
      $nkPoseStackEditorSelectPatternA,
      $selectPatternAText
    );
    eString(
      "textFieldGrp",
      "-tx",
      $nkPoseStackEditorSelectPatternB,
      $selectPatternBText
    );
  }
  if (!$nkPoseStackNeedUpdateInitParameters[1] && $isSelected) {
    $nkPoseStackNeedUpdateInitParameters[1] = true;
  }
}

/*-
@param $mirrorSetting <int[0|5]>
@returns <>
*/
proc updateMirrorSettingUI(int $mirrorSetting[]) {
  // print("updateMirrorSettingUI\n"); // debug
  // print("  mirrorSetting:{" + intArrayToString($mirrorSetting, ", ") + "}\n"); // debug
  global int $nkPoseStackNeedUpdateInitParameters[];
  string $mirrorAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "mirrorAxisRadioButton");
  string $primaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "primaryAxisRadioButton");
  string $secondaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "secondaryAxisRadioButton");
  string $invertAxisCheckBoxGrp = getUIControl("nkPoseStackEditorWindow", "invertAxisCheckBoxGrp");
  int $isSelected = `size $mirrorSetting` > 0;
  eEnable($isSelected, $mirrorAxisRadioButton);
  eEnable($isSelected, $primaryAxisRadioButton);
  eEnable($isSelected, $secondaryAxisRadioButton);
  eEnable($isSelected, $invertAxisCheckBoxGrp);
  if ($isSelected) {
    eIndex("radioButtonGrp", "-sl", $mirrorSetting[0], $mirrorAxisRadioButton);
    eIndex("radioButtonGrp", "-sl", $mirrorSetting[1], $primaryAxisRadioButton);
    eIndex("radioButtonGrp", "-sl", $mirrorSetting[2], $secondaryAxisRadioButton);
    eOrderedInt(
      "checkBoxGrp",
      "-v",
      {$mirrorSetting[3], $mirrorSetting[4]},
      $invertAxisCheckBoxGrp
    );
  }
  if (!$nkPoseStackNeedUpdateInitParameters[2] && $isSelected) {
    $nkPoseStackNeedUpdateInitParameters[2] = true;
  }
}

/*-
@returns <int>
*/
proc int getPoseListSelectedIndex() {
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  return (qFirstIndex("textScrollList", "-sii", $poseList));
}

/*-
@returns <string>
*/
proc string getPoseListSelectedItem() {
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  return (qFirstString("textScrollList", "-si", $poseList));
}

/*-
@param $index <int>
@returns <>
*/
proc selectPoseListByIndex(int $index) {
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  executeUIControl("textScrollList", "-da", $poseList);
  int $numItems = qInt("textScrollList", "-ni", $poseList);
  if (!isInRangeInt($index, 0, $numItems - 1)) return;
  eIndex("textScrollList", "-sii", $index, $poseList);
}

/*-
@param $item <string>
@returns <>
*/
proc selectPoseListByItem(string $item) {
  if (!`size $item`) return;
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  executeUIControl("textScrollList", "-da", $poseList);
  int $numItems = qInt("textScrollList", "-ni", $poseList);
  if (!$numItems) return;
  eStringArray("textScrollList", "-si", {$item}, $poseList);
}

/*-
@param $selectionMode <string> 更新後の選択状態。
| 値          | 説明                             |
| ----------- | -------------------------------- |
| `none`      | 選択無し                         |
| `keepIndex` | 前回の選択インデックスを引き継ぐ |
| `keepItem`  | 前回の選択アイテムを引き継ぐ     |
| `last`      | 末尾のアイテムを選択             |
| `prev`      | 前に一つずらす                   |
| `next`      | 後に一つずらす                   |
@returns <>
*/
proc updatePoseList(string $selectionMode) {
  // print("updatePoseList\n"); // debug
  // print("  selectionMode:" + $selectionMode + "\n"); // debug

  int $lastIndex = getPoseListSelectedIndex();
  string $lastItem = getPoseListSelectedItem();
  // print("  lastIndex:" + $lastIndex + "\n"); // debug
  // print("  lastItem :" + $lastItem + "\n"); // debug

  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  executeUIControl("textScrollList", "-ra", $poseList);

  string $poseNames[] = getPoseNames();
  for ($poseName in $poseNames) {
    eString("textScrollList", "-a", $poseName, $poseList);
  }

  switch ($selectionMode) {
    case "none": selectPoseListByIndex(-1); break;
    case "keepIndex": selectPoseListByIndex($lastIndex); break;
    case "keepItem": selectPoseListByItem($lastItem); break;
    case "last": selectPoseListByIndex(`size $poseNames` - 1); break;
    case "prev": selectPoseListByIndex($lastIndex - 1); break;
    case "next": selectPoseListByIndex($lastIndex + 1); break;
    default: break;
  }
}

/*-
@returns <>
*/
proc updateInitParameters() {
  // print("updateInitParameters\n"); // debug
  global int $nkPoseStackInitPasteSetting[];
  global string $nkPoseStackInitSelectSetting[];
  global int $nkPoseStackInitMirrorSetting[];
  global int $nkPoseStackNeedUpdateInitParameters[];
  // print("  nkPoseStackNeedUpdateInitParameters:{" + intArrayToString($nkPoseStackNeedUpdateInitParameters, ", ") + "}\n"); // debug

  if ($nkPoseStackNeedUpdateInitParameters[0]) {
    string $pasteAttributesCheckBoxGrp = getUIControl("nkPoseStackEditorWindow", "pasteAttributesCheckBoxGrp");
    $nkPoseStackInitPasteSetting = qIntArray(
      "checkBoxGrp",
      "-va3",
      $pasteAttributesCheckBoxGrp
    );
  }
  if ($nkPoseStackNeedUpdateInitParameters[1]) {
    string $selectPatternAText = getUIControl("nkPoseStackEditorWindow", "selectPatternAText");
    string $selectPatternBText = getUIControl("nkPoseStackEditorWindow", "selectPatternBText");
    $nkPoseStackInitSelectSetting = {
      sanitizeText(qString("textFieldGrp", "-tx", $selectPatternAText)),
      sanitizeText(qString("textFieldGrp", "-tx", $selectPatternBText))
    };
  }
  if ($nkPoseStackNeedUpdateInitParameters[2]) {
    string $mirrorAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "mirrorAxisRadioButton");
    string $primaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "primaryAxisRadioButton");
    string $secondaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "secondaryAxisRadioButton");
    string $invertAxisCheckBoxGrp = getUIControl("nkPoseStackEditorWindow", "invertAxisCheckBoxGrp");
    int $invertAxisValues[] = qIntArray(
      "checkBoxGrp",
      "-va2",
      $invertAxisCheckBoxGrp
    );
    $nkPoseStackInitMirrorSetting = {
      qIndex("radioButtonGrp", "-sl", $mirrorAxisRadioButton),
      qIndex("radioButtonGrp", "-sl", $primaryAxisRadioButton),
      qIndex("radioButtonGrp", "-sl", $secondaryAxisRadioButton),
      $invertAxisValues[0],
      $invertAxisValues[1]
    };
  }
  // print("  nkPoseStackInitPasteSetting :{" + intArrayToString($nkPoseStackInitPasteSetting, ", ") + "}\n"); // debug
  // print("  nkPoseStackInitSelectSetting:{" + stringArrayToString($nkPoseStackInitSelectSetting, ", ") + "}\n"); // debug
  // print("  nkPoseStackInitMirrorSetting:{" + intArrayToString($nkPoseStackInitMirrorSetting, ", ") + "}\n"); // debug
}

/*-
@returns <>
*/
proc applyPose() {
  // print("applyPose\n"); // debug
  global int $nkPoseStackEditorPoseIndex;
  global string $nkPoseStackEditorPoseName;
  global string $nkPoseStackEditorNodes[];
  global string $nkPoseStackEditorPoseSettings[];
  // print("  nkPoseStackEditorPoseIndex   :" + $nkPoseStackEditorPoseIndex + "\n"); // debug
  // print("  nkPoseStackEditorPoseName    :" + $nkPoseStackEditorPoseName + "\n"); // debug
  // print("  nkPoseStackEditorNodes       :{\n    " + stringArrayToString($nkPoseStackEditorNodes, ",\n    ") + "\n  }\n"); // debug
  // print("  nkPoseStackEditorPoseSettings:{\n    " + stringArrayToString($nkPoseStackEditorPoseSettings, ",\n    ") + "\n  }\n"); // debug

  if ($nkPoseStackEditorPoseIndex < 0) {
    int $numPoses = addPose(
      $nkPoseStackEditorPoseName,
      $nkPoseStackEditorNodes,
      $nkPoseStackEditorPoseSettings
    );
  }
  else {
    editPose(
      $nkPoseStackEditorPoseIndex,
      $nkPoseStackEditorPoseName,
      $nkPoseStackEditorPoseSettings
    );
  }
}

/*-
@param $n <string>
@returns <string>
*/
proc string makePoseName(string $n) {
  string $poseName = $n;
  string $buffer[];
  int $depth = `tokenize $n "|" $buffer`;
  if ($depth > 0) {
    $poseName = (($depth > 1) ? $buffer[0] + "-" : "") + $buffer[$depth - 1];
  }
  return $poseName;
}

/*-
@returns <>
*/
proc subscribePosesObservers() {
  // print("subscribePosesObservers\n"); // debug
  subscribe("nkPoseStackScriptNodesRetrieved", "nkPoseStackScriptNodesRetrieved");
  subscribe("nkPoseStackPosesCleared", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPosesOpened", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPosesImported", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPoseAdded", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPoseEdited", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPoseDuplicated", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPoseUpdated", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPoseDeleted", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPoseMovedPrev", "nkPoseStackPosesChanged");
  subscribe("nkPoseStackPoseMovedNext", "nkPoseStackPosesChanged");
}

/*-
@returns <>
*/
proc unsubscribePosesObservers() {
  // print("unsubscribePosesObservers\n"); // debug
  unsubscribe("nkPoseStackScriptNodesRetrieved", "nkPoseStackScriptNodesRetrieved");
  unsubscribe("nkPoseStackPosesCleared", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPosesOpened", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPosesImported", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPoseAdded", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPoseEdited", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPoseDuplicated", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPoseUpdated", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPoseDeleted", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPoseMovedPrev", "nkPoseStackPosesChanged");
  unsubscribe("nkPoseStackPoseMovedNext", "nkPoseStackPosesChanged");
}

/*-
@returns <>
*/
proc closeEditorWindow() {
  // print("closeEditorWindow\n"); // debug
  string $nkPoseStackEditorWindow = getUIControl("nkPoseStackEditorWindow", "nkPoseStackEditorWindow");
  // print("  nkPoseStackEditorWindow:" + $nkPoseStackEditorWindow + "\n"); // debug
  windowClose($nkPoseStackEditorWindow);
}

// -----------------------------------------------------------------------------
// UIコントロールイベントハンドラ
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc nkPoseStackEditorWindowClosed() {
  // print("nkPoseStackEditorWindowClosed\n"); // debug
  removeUIControls("nkPoseStackEditorWindow", "");
}

/*-
@returns <>
*/
proc poseNameTextEntered() {
  // print("poseNameTextEntered\n"); // debug
  global string $nkPoseStackEditorPoseName;
  string $poseNameText = getUIControl("nkPoseStackEditorWindow", "poseNameText");
  if (!qExists($poseNameText)) return;

  string $currentValue = qString("textFieldGrp", "-tx", $poseNameText);
  string $newValue = sanitizeText($currentValue);
  // print("  currentValue:" + $currentValue + "\n"); // debug
  // print("  newValue    :" + $newValue + "\n"); // debug
  int $newValueLength = `size $newValue`;
  if (!$newValueLength) $newValue = $nkPoseStackEditorPoseName;
  $nkPoseStackEditorPoseName = $newValue;

  int $position = qIndex("textFieldGrp", "-ip", $poseNameText);
  // print("  position:" + $position + "\n"); // debug
  eString("textFieldGrp", "-tx", $newValue, $poseNameText);
  eIndex("textFieldGrp", "-ip", $position, $poseNameText);
}

/*-
@returns <>
*/
proc nodeListSelected() {
  // print("nodeListSelected\n"); // debug
  global string $nkPoseStackEditorPoseSettings[];
  global int $nkPoseStackEditorIsUIUpdating;

  string $nodeList = getUIControl("nkPoseStackEditorWindow", "nodeList");
  int $nodeIndices[] = qIndexArray("textScrollList", "-sii", $nodeList);
  // print("  nodeIndices:{" + intArrayToString($nodeIndices, ", ") + "}\n"); // debug
  int $pasteSetting[];
  string $selectSetting[];
  int $mirrorSetting[];
  if (`size $nodeIndices`) {
    string $poseSetting = $nkPoseStackEditorPoseSettings[$nodeIndices[0]];
    $pasteSetting = extractPasteSetting($poseSetting);
    $selectSetting = extractSelectSetting($poseSetting);
    $mirrorSetting = extractMirrorSetting($poseSetting);
  }
  // print("  pasteSetting :{" + intArrayToString($pasteSetting, ", ") + "}\n"); // debug
  // print("  selectSetting:{" + stringArrayToString($selectSetting, ", ") + "}\n"); // debug
  // print("  mirrorSetting:{" + intArrayToString($mirrorSetting, ", ") + "}\n"); // debug

  $nkPoseStackEditorIsUIUpdating = true;
  updatePasteSettingUI($pasteSetting);
  updateSelectSettingUI($selectSetting);
  updateMirrorSettingUI($mirrorSetting);
  $nkPoseStackEditorIsUIUpdating = false;
}

/*-
@returns <>
*/
proc pasteAttributesCheckBoxGrp1Changed() {
  // print("pasteAttributesCheckBoxGrp1Changed\n"); // debug
  updatePoseSettings(0);
}

/*-
@returns <>
*/
proc pasteAttributesCheckBoxGrp2Changed() {
  // print("pasteAttributesCheckBoxGrp2Changed\n"); // debug
  updatePoseSettings(1);
}

/*-
@returns <>
*/
proc pasteAttributesCheckBoxGrp3Changed() {
  // print("pasteAttributesCheckBoxGrp3Changed\n"); // debug
  updatePoseSettings(2);
}

/*-
@returns <>
*/
proc selectPatternATextEntered() {
  // print("selectPatternATextEntered\n"); // debug
  global string $nkPoseStackEditorSelectPatternA;
  string $selectPatternAText = getUIControl("nkPoseStackEditorWindow", "selectPatternAText");
  if (!qExists($selectPatternAText)) return;

  string $currentValue = qString("textFieldGrp", "-tx", $selectPatternAText);
  string $newValue = sanitizeText($currentValue);
  // print("  currentValue:" + $currentValue + "\n"); // debug
  // print("  newValue    :" + $newValue + "\n"); // debug
  int $newValueLength = `size $newValue`;
  if (!$newValueLength) $newValue = $nkPoseStackEditorSelectPatternA;
  $nkPoseStackEditorSelectPatternA = $newValue;

  int $position = qIndex("textFieldGrp", "-ip", $selectPatternAText);
  // print("  position:" + $position + "\n"); // debug
  eString("textFieldGrp", "-tx", $newValue, $selectPatternAText);
  eIndex("textFieldGrp", "-ip", $position, $selectPatternAText);

  if ($newValueLength) updatePoseSettings(3);
}

/*-
@returns <>
*/
proc selectPatternBTextEntered() {
  // print("selectPatternBTextEntered\n"); // debug
  global string $nkPoseStackEditorSelectPatternB;
  string $selectPatternBText = getUIControl("nkPoseStackEditorWindow", "selectPatternBText");
  if (!qExists($selectPatternBText)) return;

  string $currentValue = qString("textFieldGrp", "-tx", $selectPatternBText);
  string $newValue = sanitizeText($currentValue);
  // print("  currentValue:" + $currentValue + "\n"); // debug
  // print("  newValue    :" + $newValue + "\n"); // debug
  int $newValueLength = `size $newValue`;
  if (!$newValueLength) $newValue = $nkPoseStackEditorSelectPatternB;
  $nkPoseStackEditorSelectPatternB = $newValue;

  int $position = qIndex("textFieldGrp", "-ip", $selectPatternBText);
  // print("  position:" + $position + "\n"); // debug
  eString("textFieldGrp", "-tx", $newValue, $selectPatternBText);
  eIndex("textFieldGrp", "-ip", $position, $selectPatternBText);

  if ($newValueLength) updatePoseSettings(4);
}

/*-
@returns <>
*/
proc mirrorAxisRadioButtonOn() {
  // print("mirrorAxisRadioButtonOn\n"); // debug
  updatePoseSettings(5);
}

/*-
@returns <>
*/
proc primaryAxisRadioButtonOn() {
  // print("primaryAxisRadioButtonOn\n"); // debug
  string $primaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "primaryAxisRadioButton");
  string $secondaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "secondaryAxisRadioButton");
  int $primaryAxisSelect = qIndex("radioButtonGrp", "-sl", $primaryAxisRadioButton);
  int $secondaryAxisSelect = qIndex("radioButtonGrp", "-sl", $secondaryAxisRadioButton);
  updatePoseSettings(6);
  if ($primaryAxisSelect == $secondaryAxisSelect) {
    $secondaryAxisSelect = $primaryAxisSelect + 1;
    if ($secondaryAxisSelect > 2) {
      $secondaryAxisSelect = 0;
    }
    eIndex("radioButtonGrp", "-sl", $secondaryAxisSelect, $secondaryAxisRadioButton);
    // ラジオボタンはコマンド操作でイベントが発生しないのでこちら側で更新する
    updatePoseSettings(7);
  }
}

/*-
@returns <>
*/
proc secondaryAxisRadioButtonOn() {
  // print("secondaryAxisRadioButtonOn\n"); // debug
  string $primaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "primaryAxisRadioButton");
  string $secondaryAxisRadioButton = getUIControl("nkPoseStackEditorWindow", "secondaryAxisRadioButton");
  int $primaryAxisSelect = qIndex("radioButtonGrp", "-sl", $primaryAxisRadioButton);
  int $secondaryAxisSelect = qIndex("radioButtonGrp", "-sl", $secondaryAxisRadioButton);
  updatePoseSettings(7);
  if ($primaryAxisSelect == $secondaryAxisSelect) {
    $primaryAxisSelect = $secondaryAxisSelect - 1;
    if ($primaryAxisSelect < 0) {
      $primaryAxisSelect = 2;
    }
    eIndex("radioButtonGrp", "-sl", $primaryAxisSelect, $primaryAxisRadioButton);
    // ラジオボタンはコマンド操作でイベントが発生しないのでこちら側で更新する
    updatePoseSettings(6);
  }
}

/*-
@returns <>
*/
proc invertAxisCheckBoxGrp1Changed() {
  // print("invertAxisCheckBoxGrp1Changed\n"); // debug
  updatePoseSettings(8);
}

/*-
@returns <>
*/
proc invertAxisCheckBoxGrp2Changed() {
  // print("invertAxisCheckBoxGrp2Changed\n"); // debug
  updatePoseSettings(9);
}

/*-
@returns <>
*/
proc okButtonPressed() {
  // print("okButtonPressed\n"); // debug
  updateInitParameters();
  applyPose();
  closeEditorWindow();
}

/*-
@returns <>
*/
proc applyButtonPressed() {
  // print("applyButtonPressed\n"); // debug
  updateInitParameters();
  applyPose();
}

/*-
@returns <>
*/
proc cancelButtonPressed() {
  // print("cancelButtonPressed\n"); // debug
  closeEditorWindow();
}

/*-
@returns <>
*/
proc nkPoseStackWindowClosed() {
  // print("nkPoseStackWindowClosed\n"); // debug
  unregisterEventJob();
  unsubscribePosesObservers();
  removeUIControls("nkPoseStackWindow", "");
  removeUIControls("nkPoseStackEditorWindow", "");
}

/*-
@returns <>
*/
proc clearListMenuItemSelected() {
  // print("clearListMenuItemSelected\n"); // debug
  string $result = `confirmDialog
      -b "OK" -b "Cancel"
      -db "OK" -cb "Cancel"
      -m "Are you sure?"
      -p (getParentableWindow("nkPoseStackWindow"))
      -t "Clear List - nkPoseStack"`;
  if ($result != "OK") return;
  clearPoses();
}

/*-
@returns <>
*/
proc openListMenuItemSelected() {
  // print("openListMenuItemSelected\n"); // debug
  openPoses("");
}

/*-
@returns <>
*/
proc importListMenuItemSelected() {
  // print("importListMenuItemSelected\n"); // debug
  importPoses("");
}

/*-
@returns <>
*/
proc saveListAsMenuItemSelected() {
  // print("saveListAsMenuItemSelected\n"); // debug
  savePoses("");
}

/*-
@returns <>
*/
proc resetWindowMenuItemSelected() {
  // print("resetWindowMenuItemSelected\n"); // debug
  windowPrefRemove("window", "nkPoseStackEditorWindow");
  windowPrefRemove("window", "nkPoseStackWindow");
  nkPoseStack();
}

/*-
@returns <>
*/
proc quitMenuItemSelected() {
  // print("quitMenuItemSelected\n"); // debug
  string $nkPoseStackWindow = getUIControl("nkPoseStackWindow", "nkPoseStackWindow");
  // print("  nkPoseStackWindow:" + $nkPoseStackWindow + "\n"); // debug
  windowClose($nkPoseStackWindow);
}

/*-
@returns <>
*/
proc aboutMenuItemSelected() {
  // print("aboutMenuItemSelected\n"); // debug
  confirmDialog
      -b "OK"
      -db "OK"
      -m (
        "nkPoseStack " + (nkPoseStackVersion())
            + "\n\nMIT License\nhttps://github.com/imaoki/nkPoseStack"
      )
      -p (getParentableWindow("nkPoseStackWindow"))
      -t "About - nkPoseStack";
}

/*-
@returns <>
*/
proc addPoseButtonPressed() {
  // print("addPoseButtonPressed\n"); // debug
  global int $nkPoseStackInitPasteSetting[];
  global string $nkPoseStackInitSelectSetting[];
  global int $nkPoseStackInitMirrorSetting[];
  // print("  nkPoseStackInitPasteSetting :{" + intArrayToString($nkPoseStackInitPasteSetting, ", ") + "}\n"); // debug
  // print("  nkPoseStackInitSelectSetting:{" + stringArrayToString($nkPoseStackInitSelectSetting, ", ") + "}\n"); // debug
  // print("  nkPoseStackInitMirrorSetting:{" + intArrayToString($nkPoseStackInitMirrorSetting, ", ") + "}\n"); // debug

  global int $nkPoseStackEditorPoseIndex;
  global string $nkPoseStackEditorPoseName;
  global string $nkPoseStackEditorNodes[];
  global string $nkPoseStackEditorPoseSettings[];
  initializeEditorParameters();

  string $nodes[] = `ls -l -sl -tr`;
  // print("  nodes:{\n    " + (stringArrayToString($nodes, ",\n    ")) + "\n  }\n"); // debug
  int $numNodes = `size $nodes`;
  if (!$numNodes) return;

  $nkPoseStackEditorPoseIndex = -1;
  $nkPoseStackEditorPoseName = makePoseName($nodes[0]);
  $nkPoseStackEditorNodes = $nodes;
  for ($i = 0; $i < $numNodes; $i++) {
    $nkPoseStackEditorPoseSettings[$i] = makePoseSetting(
      $nkPoseStackInitPasteSetting,
      $nkPoseStackInitSelectSetting,
      $nkPoseStackInitMirrorSetting
    );
  }
  // print("  nkPoseStackEditorPoseName    :" + $nkPoseStackEditorPoseName + "\n"); // debug
  // print("  nkPoseStackEditorNodes       :{\n    " + stringArrayToString($nkPoseStackEditorNodes, ",\n    ") + "\n  }\n"); // debug
  // print("  nkPoseStackEditorPoseSettings:{\n    " + stringArrayToString($nkPoseStackEditorPoseSettings, ",\n    ") + "\n  }\n"); // debug

  nkPoseStackEventController("nkPoseStackWindow", "postc", "addPoseButton");
}

/*-
@returns <>
*/
proc editPoseButtonPressed() {
  // print("editPoseButtonPressed\n"); // debug
  global int $nkPoseStackInitPasteSetting[];
  global string $nkPoseStackInitSelectSetting[];
  global int $nkPoseStackInitMirrorSetting[];
  // print("  nkPoseStackInitPasteSetting :{" + intArrayToString($nkPoseStackInitPasteSetting, ", ") + "}\n"); // debug
  // print("  nkPoseStackInitSelectSetting:{" + stringArrayToString($nkPoseStackInitSelectSetting, ", ") + "}\n"); // debug
  // print("  nkPoseStackInitMirrorSetting:{" + intArrayToString($nkPoseStackInitMirrorSetting, ", ") + "}\n"); // debug

  global int $nkPoseStackEditorPoseIndex;
  global string $nkPoseStackEditorPoseName;
  global string $nkPoseStackEditorNodes[];
  global string $nkPoseStackEditorPoseSettings[];
  initializeEditorParameters();

  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  int $index = qFirstIndex("textScrollList", "-sii", $poseList);
  // print("  index:" + $index + "\n"); // debug

  string $poses[] = readAttrPoses({});
  if (!isInRangeInt($index, 0, `size $poses` - 1)) return;

  string $pose = $poses[$index];
  if (!`size $pose` || isPoseReferenced($pose)) return;

  $nkPoseStackEditorPoseIndex = $index;
  $nkPoseStackEditorPoseName = extractPoseName($pose);

  string $poseTransforms[] = extractPoseTransforms($pose);
  // print("  poseTransforms:{\n    " + stringArrayToString($poseTransforms, ",\n    ") + "\n  }\n"); // debug
  if (!`size $poseTransforms`) return;

  for ($i = 0; $i < `size $poseTransforms`; $i++) {
    string $poseTransform = $poseTransforms[$i];
    // print("  poseTransform:" + $poseTransform + "\n"); // debug
    string $node = extractTransformNode($poseTransform);
    // print("    node       :" + $node + "\n"); // debug
    string $poseSetting = extractPoseSetting($poseTransform);
    // print("    poseSetting:" + $poseSetting + "\n"); // debug
    $nkPoseStackEditorNodes[$i] = $node;
    $nkPoseStackEditorPoseSettings[$i] = $poseSetting;
  }
  // print("  nkPoseStackEditorPoseName    :" + $nkPoseStackEditorPoseName + "\n"); // debug
  // print("  nkPoseStackEditorNodes       :{\n    " + stringArrayToString($nkPoseStackEditorNodes, ",\n    ") + "\n  }\n"); // debug
  // print("  nkPoseStackEditorPoseSettings:{\n    " + stringArrayToString($nkPoseStackEditorPoseSettings, ",\n    ") + "\n  }\n"); // debug

  nkPoseStackEventController("nkPoseStackWindow", "postc", "editPoseButton");
}

/*-
@returns <>
*/
proc duplicatePoseButtonPressed() {
  // print("duplicatePoseButtonPressed\n"); // debug
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  int $index = qFirstIndex("textScrollList", "-sii", $poseList);
  // print("  index:" + $index + "\n"); // debug
  if ($index == -1) return;
  duplicatePose($index);
}

/*-
@returns <>
*/
proc updatePoseButtonPressed() {
  // print("updatePoseButtonPressed\n"); // debug
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  int $index = qFirstIndex("textScrollList", "-sii", $poseList);
  // print("  index:" + $index + "\n"); // debug
  if ($index == -1) return;
  updatePose($index);
}

/*-
@param $isOpposite <boolean>
@returns <>
*/
proc selectButtonPressed(int $isOpposite) {
  // print("selectButtonPressed\n"); // debug
  // print("  isOpposite:" + $isOpposite + "\n"); // debug
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  int $index = qFirstIndex("textScrollList", "-sii", $poseList);
  // print("  index:" + $index + "\n"); // debug
  if ($index == -1) return;
  selectNodes($index, $isOpposite, `getModifiers`);
}

/*-
@param $isOpposite <boolean>
@returns <>
*/
proc pasteButtonPressed(int $isOpposite) {
  // print("pasteButtonPressed\n"); // debug
  // print("  isOpposite:" + $isOpposite + "\n"); // debug
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  int $index = qFirstIndex("textScrollList", "-sii", $poseList);
  // print("  index:" + $index + "\n"); // debug
  if ($index == -1) return;
  string $nodes[] = `ls -l -sl -tr`;
  // print("  nodes:{\n    " + (stringArrayToString($nodes, ",\n    ")) + "\n  }\n"); // debug
  if (!`size $nodes`) return;
  pastePose($index, $isOpposite, $nodes);
}

/*-
@returns <>
*/
proc poseListDoubleClicked() {
  // print("poseListDoubleClicked\n"); // debug
  editPoseButtonPressed();
}

/*-
@returns <>
*/
proc deletePoseButtonPressed() {
  // print("deletePoseButtonPressed\n"); // debug
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  int $index = qFirstIndex("textScrollList", "-sii", $poseList);
  // print("  index:" + $index + "\n"); // debug
  if ($index == -1) return;
  deletePose($index);
}

/*-
@returns <>
*/
proc moveUpPoseButtonPressed() {
  // print("moveUpPoseButtonPressed\n"); // debug
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  int $index = qFirstIndex("textScrollList", "-sii", $poseList);
  // print("  index:" + $index + "\n"); // debug
  if ($index == -1) return;
  movePrevPose($index);
}

/*-
@returns <>
*/
proc moveDownPoseButtonPressed() {
  // print("moveDownPoseButtonPressed\n"); // debug
  string $poseList = getUIControl("nkPoseStackWindow", "poseList");
  int $index = qFirstIndex("textScrollList", "-sii", $poseList);
  // print("  index:" + $index + "\n"); // debug
  if ($index == -1) return;
  moveNextPose($index);
}

// -----------------------------------------------------------------------------
// ウィンドウ定義
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc buildEditorWindow() {
  // print("buildEditorWindow\n"); // debug
  global int $nkPoseStackEditorPoseIndex;
  global string $nkPoseStackEditorPoseName;
  windowClose("nkPoseStackEditorWindow");

  string $modeLabel = ($nkPoseStackEditorPoseIndex < 0) ? "Add" : "Edit";
  // print("  modeLabel:" + $modeLabel + "\n"); // debug

  string $nkPoseStackEditorWindow = `window
      -mxb false
      -mnb false
      -p (getUIControl("nkPoseStackWindow", "nkPoseStackWindow"))
      -s true
      -t ($modeLabel + " - nkPoseStack")
      "nkPoseStackEditorWindow"`;
    string $outerForm = `formLayout "outerForm"`;
      string $poseNameText = `textFieldGrp
          -adj 2
          -ann "Illegal Character:\n! = ; [ ] / ,"
          -cat 2 "right" -5
          -cw2 60 10
          -l "Pose Name:"
          -tx $nkPoseStackEditorPoseName
          "poseNameText"`;

      string $nodeList = `textScrollList
          -ams true
          -ekf false
          -h 44
          "nodeList"`;

      string $poseSettingColumn = `columnLayout
          -adj true
          -rs 3
          "poseSettingColumn"`;
        string $pasteFrame = `frameLayout
            -l "Paste"
            -bgs true
            -cll false
            -mh 4
            -mw 4
            "pasteFrame"`;
          string $pasteColumn = `columnLayout
              -adj true
              -rs 3
              "pasteColumn"`;
            string $pasteAttributesCheckBoxGrp = `checkBoxGrp
                -cw4 80 60 60 60
                -en false
                -l "Attributes:"
                -la3 "T" "R" "S"
                -ncb 3
                "pasteAttributesCheckBoxGrp"`;
          setParent ..;
        setParent ..;

        string $selectFrame = `frameLayout
            -l "Select"
            -bgs true
            -cll false
            -mh 4
            -mw 4
            "selectFrame"`;
          string $selectColumn = `columnLayout
              -adj true
              -rs 3
              "selectColumn"`;
            string $selectTextForm = `formLayout "selectTextForm"`;
              string $selectPatternAText = `textFieldGrp
                  -adj 2
                  -ann "Illegal Character:\n! = ; [ ] / ,"
                  -cat 2 "right" -5
                  -cw2 16 10
                  -en false
                  -l "A:"
                  "selectPatternAText"`;
              string $selectPatternBText = `textFieldGrp
                  -adj 2
                  -ann "Illegal Character:\n! = ; [ ] / ,"
                  -cat 2 "right" -5
                  -cw2 16 10
                  -en false
                  -l "B:"
                  "selectPatternBText"`;
            setParent ..;
          setParent ..;
        setParent ..;

        string $mirrorFrame = `frameLayout
            -l "Mirror"
            -bgs true
            -cll false
            -mh 4
            -mw 4
            "mirrorFrame"`;
          string $mirrorColumn = `columnLayout
              -adj true
              -rs 3
              "mirrorColumn"`;
            string $mirrorAxisRadioButton = `radioButtonGrp
                // -bgc 0.25 0.25 0.5
                -cw4 80 60 60 60
                -en false
                -l "Mirror Axis:"
                -la3 "X" "Y" "Z"
                -nrb 3
                "mirrorAxisRadioButton"`;
            string $primaryAxisRadioButton = `radioButtonGrp
                // -bgc 0.25 0.25 0.5
                -cw4 80 60 60 60
                -en false
                -l "Primary Axis:"
                -la3 "X" "Y" "Z"
                -nrb 3
                "primaryAxisRadioButton"`;
            string $secondaryAxisRadioButton = `radioButtonGrp
                // -bgc 0.25 0.25 0.5
                -cw4 80 60 60 60
                -en false
                -l "Secondary Axis:"
                -la3 "X" "Y" "Z"
                -nrb 3
                "secondaryAxisRadioButton"`;
            string $invertAxisCheckBoxGrp = `checkBoxGrp
                -cw3 80 60 60
                -en false
                -l "Invert Axis:"
                -la2 "Primary" "Secondary"
                -ncb 2
                "invertAxisCheckBoxGrp"`;
          setParent ..;
        setParent ..;
      setParent ..;

      string $buttonsForm = `formLayout "buttonsForm"`;
        string $okButton = `button -h 26 -l $modeLabel "okButton"`;
        string $applyButton = `button -h 26 -l "Apply" "applyButton"`;
        string $cancelButton = `button -h 26 -l "Cancel" "cancelButton"`;
      setParent ..;
    setParent ..;

  formLayout -e
      -af $poseNameText "top" 5
      -af $poseNameText "left" 5
      -af $poseNameText "right" 5
      -ac $nodeList "top" 3 $poseNameText
      -af $nodeList "left" 3
      -af $nodeList "right" 3
      -ac $nodeList "bottom" 3 $poseSettingColumn
      -af $poseSettingColumn "left" 3
      -af $poseSettingColumn "right" 3
      -ac $poseSettingColumn "bottom" 3 $buttonsForm
      -af $buttonsForm "left" 5
      -af $buttonsForm "right" 5
      -af $buttonsForm "bottom" 5
      $outerForm;

  formLayout -e
      -af $selectPatternAText "top" 0
      -af $selectPatternAText "left" 0
      -ap $selectPatternAText "right" 0 50
      -af $selectPatternBText "top" 0
      -ap $selectPatternBText "left" 0 50
      -af $selectPatternBText "right" 0
      $selectTextForm;

  formLayout -e
      -af $okButton "top" 2
      -af $okButton "left" 0
      -ap $okButton "right" 2 33
      -af $okButton "bottom" 0
      -af $applyButton "top" 2
      -ap $applyButton "left" 2 33
      -ap $applyButton "right" 2 66
      -af $applyButton "bottom" 0
      -af $cancelButton "top" 2
      -ap $cancelButton "left" 2 66
      -af $cancelButton "right" 0
      -af $cancelButton "bottom" 0
      $buttonsForm;

  window -e -cc "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"cc\", \"nkPoseStackEditorWindow\");" $nkPoseStackEditorWindow;
  textFieldGrp -e -cc "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"cc\", \"poseNameText\");" $poseNameText;
  textScrollList -e -sc "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"sc\", \"nodeList\");" $nodeList;
  checkBoxGrp -e -cc1 "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"cc1\", \"pasteAttributesCheckBoxGrp\");" $pasteAttributesCheckBoxGrp;
  checkBoxGrp -e -cc2 "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"cc2\", \"pasteAttributesCheckBoxGrp\");" $pasteAttributesCheckBoxGrp;
  checkBoxGrp -e -cc3 "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"cc3\", \"pasteAttributesCheckBoxGrp\");" $pasteAttributesCheckBoxGrp;
  textFieldGrp -e -cc "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"cc\", \"selectPatternAText\");" $selectPatternAText;
  textFieldGrp -e -cc "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"cc\", \"selectPatternBText\");" $selectPatternBText;
  radioButtonGrp -e -onc "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"onc\", \"mirrorAxisRadioButton\");" $mirrorAxisRadioButton;
  radioButtonGrp -e -onc "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"onc\", \"primaryAxisRadioButton\");" $primaryAxisRadioButton;
  radioButtonGrp -e -onc "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"onc\", \"secondaryAxisRadioButton\");" $secondaryAxisRadioButton;
  checkBoxGrp -e -cc1 "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"cc1\", \"invertAxisCheckBoxGrp\");" $invertAxisCheckBoxGrp;
  checkBoxGrp -e -cc2 "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"cc2\", \"invertAxisCheckBoxGrp\");" $invertAxisCheckBoxGrp;
  button -e -c "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"c\", \"okButton\");" $okButton;
  button -e -c "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"c\", \"applyButton\");" $applyButton;
  button -e -c "nkPoseStackEventController(\"nkPoseStackEditorWindow\", \"c\", \"cancelButton\");" $cancelButton;

  appendUIControls({
    $nkPoseStackEditorWindow,
    $poseNameText,
    $nodeList,
    $pasteAttributesCheckBoxGrp,
    $selectPatternAText,
    $selectPatternBText,
    $mirrorAxisRadioButton,
    $primaryAxisRadioButton,
    $secondaryAxisRadioButton,
    $invertAxisCheckBoxGrp
  });

  updateNodeList(false);
  showWindow $nkPoseStackEditorWindow;
}

/*-
@returns <>
*/
proc buildMainWindow() {
  // print("buildMainWindow\n"); // debug
  windowClose("nkPoseStackWindow");

  string $sourceDirname = getSourceDirname("nkPoseStack");
  string $iconDir;
  if (`size $sourceDirname`) $iconDir = $sourceDirname + "/nkPoseStackIcons/";
  string $addIcon = $iconDir + "addPose.png";
  string $deleteIcon = $iconDir + "deletePose.png";
  string $editIcon = $iconDir + "editPose.png";
  string $duplicateIcon = $iconDir + "duplicatePose.png";
  string $moveUpIcon = $iconDir + "moveUpPose.png";
  string $moveDownIcon = $iconDir + "moveDownPose.png";
  string $selectSourceIcon = $iconDir + "selectSource.png";
  string $selectOppositeIcon = $iconDir + "selectOpposite.png";
  string $pasteSourceIcon = $iconDir + "pasteSource.png";
  string $pasteOppositeIcon = $iconDir + "pasteOpposite.png";
  string $updateIcon = $iconDir + "updatePose.png";
  // print("  addIcon           :" + $addIcon + "\n"); // debug
  // print("  deleteIcon        :" + $deleteIcon + "\n"); // debug
  // print("  editIcon          :" + $editIcon + "\n"); // debug
  // print("  duplicateIcon     :" + $duplicateIcon + "\n"); // debug
  // print("  moveUpIcon        :" + $moveUpIcon + "\n"); // debug
  // print("  moveDownIcon      :" + $moveDownIcon + "\n"); // debug
  // print("  selectSourceIcon  :" + $selectSourceIcon + "\n"); // debug
  // print("  selectOppositeIcon:" + $selectOppositeIcon + "\n"); // debug
  // print("  pasteSourceIcon   :" + $pasteSourceIcon + "\n"); // debug
  // print("  pasteOppositeIcon :" + $pasteOppositeIcon + "\n"); // debug
  // print("  updateIcon        :" + $updateIcon + "\n"); // debug

  string $nkPoseStackWindow = `window
      -mxb false
      -mnb false
      -s true
      -t "nkPoseStack"
      "nkPoseStackWindow"`;
    string $outerForm = `formLayout "outerForm"`;
      string $menuBar = `menuBarLayout
          // -bgc 0.25 0.5 0.25
          "menuBar"`;
        string $fileMenu = `menu
            -l "File"
            "fileMenu"`;
          string $clearListMenuItem = `menuItem
              -l "Clear List"
              "clearListMenuItem"`;
          menuItem -d true;
          string $openListMenuItem = `menuItem
              -l "Open List"
              "openListMenuItem"`;
          string $importListMenuItem = `menuItem
              -l "Import List"
              "importListMenuItem"`;
          menuItem -d true;
          string $saveListAsMenuItem = `menuItem
              -l "Save List As..."
              "saveListAsMenuItem"`;
          menuItem -d true;
          string $resetWindowMenuItem = `menuItem
              -l "Reset Window"
              "resetWindowMenuItem"`;
          menuItem -d true;
          string $quitMenuItem = `menuItem
              -l "Quit"
              "quitMenuItem"`;
        string $helpMenu = `menu
            -hm true
            -l "Help"
            "helpMenu"`;
          string $aboutMenuItem = `menuItem
              -l "About nkPoseStack"
              "aboutMenuItem"`;
      setParent ..;

      string $topToolRow = `rowLayout
          -adj 12
          // -bgc 0.5 0.25 0.25
          -h 26
          -nc 12
          -rat 1 "bottom" 0
          -rat 2 "bottom" 0
          -rat 3 "bottom" 0
          -rat 4 "bottom" 0
          -rat 5 "bottom" 0
          -rat 6 "bottom" 0
          -rat 7 "bottom" 0
          -rat 8 "bottom" 0
          -rat 9 "bottom" 0
          -rat 10 "bottom" 0
          -rat 11 "bottom" 0
          -rat 12 "bottom" 0
          "topToolRow"`;
        string $addPoseButton = `iconTextButton
            -ann "Add"
            // -bgc 0.25 0.5 0.5
            -i $addIcon
            -w 23
            "addPoseButton"`;
        string $editPoseButton = `iconTextButton
            -ann "Edit"
            // -bgc 0.25 0.5 0.5
            -i $editIcon
            -w 23
            "editPoseButton"`;
        string $duplicatePoseButton = `iconTextButton
            -ann "Duplicate"
            // -bgc 0.25 0.5 0.5
            -i $duplicateIcon
            -w 23
            "duplicatePoseButton"`;
        separator -h 24 -st "single" -vis true;
        string $updatePoseButton = `iconTextButton
            -ann "Update"
            // -bgc 0.25 0.5 0.5
            -i $updateIcon
            -w 23
            "updatePoseButton"`;
        separator -h 24 -st "single" -vis true;
        string $selectSourceButton = `iconTextButton
            -ann "Select Source"
            // -bgc 0.25 0.5 0.5
            -i $selectSourceIcon
            -w 23
            "selectSourceButton"`;
        string $selectOppositeButton = `iconTextButton
            -ann "Select Opposite"
            // -bgc 0.25 0.5 0.5
            -i $selectOppositeIcon
            -w 23
            "selectOppositeButton"`;
        separator -h 24 -st "single" -vis true;
        string $pasteSourceButton = `iconTextButton
            -ann "As Is Paste"
            // -bgc 0.25 0.5 0.5
            -i $pasteSourceIcon
            -w 23
            "pasteSourceButton"`;
        string $pasteOppositeButton = `iconTextButton
            -ann "Mirror Paste"
            // -bgc 0.25 0.5 0.5
            -i $pasteOppositeIcon
            -w 23
            "pasteOppositeButton"`;
        separator -st "none" -vis false;
      setParent ..;

      string $poseList = `textScrollList
          -ams false
          -ekf false
          -h 44
          "poseList"`;

      string $bottomToolRow = `rowLayout
          -adj 1
          // -bgc 0.5 0.25 0.25
          -nc 4
          "bottomToolRow"`;
        separator -st "none" -vis false;
        string $deletePoseButton = `iconTextButton
            -ann "Delete"
            // -bgc 0.25 0.5 0.5
            -i $deleteIcon
            -w 23
            "deletePoseButton"`;
        string $moveUpPoseButton = `iconTextButton
            -ann "Move Up"
            // -bgc 0.25 0.5 0.5
            -i $moveUpIcon
            -w 23
            "moveUpPoseButton"`;
        string $moveDownPoseButton = `iconTextButton
            -ann "Move Down"
            // -bgc 0.25 0.5 0.5
            -i $moveDownIcon
            -w 23
            "moveDownPoseButton"`;
      setParent ..;
    setParent ..;

  formLayout -e
      -af $menuBar "top" 0
      -af $menuBar "left" 0
      -af $menuBar "right" 0
      -ac $topToolRow "top" 0 $menuBar
      -af $topToolRow "left" 5
      -af $topToolRow "right" 5
      -ac $poseList "top" 5 $topToolRow
      -af $poseList "left" 5
      -af $poseList "right" 5
      -ac $poseList "bottom" 5 $bottomToolRow
      -af $bottomToolRow "left" 5
      -af $bottomToolRow "right" 5
      -af $bottomToolRow "bottom" 5
      $outerForm;

  window -e -cc "nkPoseStackEventController(\"nkPoseStackWindow\", \"cc\", \"nkPoseStackWindow\");" $nkPoseStackWindow;
  menuItem -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"clearListMenuItem\");" $clearListMenuItem;
  menuItem -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"openListMenuItem\");" $openListMenuItem;
  menuItem -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"importListMenuItem\");" $importListMenuItem;
  menuItem -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"saveListAsMenuItem\");" $saveListAsMenuItem;
  menuItem -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"resetWindowMenuItem\");" $resetWindowMenuItem;
  menuItem -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"quitMenuItem\");" $quitMenuItem;
  menuItem -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"aboutMenuItem\");" $aboutMenuItem;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"addPoseButton\");" $addPoseButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"editPoseButton\");" $editPoseButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"duplicatePoseButton\");" $duplicatePoseButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"updatePoseButton\");" $updatePoseButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"selectSourceButton\");" $selectSourceButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"selectOppositeButton\");" $selectOppositeButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"pasteSourceButton\");" $pasteSourceButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"pasteOppositeButton\");" $pasteOppositeButton;
  textScrollList -e -dcc "nkPoseStackEventController(\"nkPoseStackWindow\", \"dcc\", \"poseList\");" $poseList;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"deletePoseButton\");" $deletePoseButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"moveUpPoseButton\");" $moveUpPoseButton;
  iconTextButton -e -c "nkPoseStackEventController(\"nkPoseStackWindow\", \"c\", \"moveDownPoseButton\");" $moveDownPoseButton;

  appendUIControls({
    $nkPoseStackWindow,
    $poseList
  });

  subscribePosesObservers();
  updatePoseList("none");
  showWindow $nkPoseStackWindow;
}

// -----------------------------------------------------------------------------
// イベントコントローラ
// -----------------------------------------------------------------------------
/*-
@param $window <string>
@param $event <string>
@param $control <string>
@returns <>
*/
global proc nkPoseStackEventController(
  string $window,
  string $event,
  string $control
) {
  // print("nkPoseStackEventController\n"); // debug
  // print("  window :" + $window + "\n"); // debug
  // print("  event  :" + $event + "\n"); // debug
  // print("  control:" + $control + "\n"); // debug
  switch ($window) {
    case "nkPoseStackEditorWindow":
      switch ($event) {
        case "c":
          switch ($control) {
            case "okButton": okButtonPressed(); break;
            case "applyButton": applyButtonPressed(); break;
            case "cancelButton": cancelButtonPressed(); break;
            default: break;
          }
          break;
        case "cc":
          switch ($control) {
            case "nkPoseStackEditorWindow": nkPoseStackEditorWindowClosed(); break;
            case "poseNameText": poseNameTextEntered(); break;
            case "selectPatternAText": selectPatternATextEntered(); break;
            case "selectPatternBText": selectPatternBTextEntered(); break;
            default: break;
          }
          break;
        case "cc1":
          switch ($control) {
            case "pasteAttributesCheckBoxGrp": pasteAttributesCheckBoxGrp1Changed(); break;
            case "invertAxisCheckBoxGrp": invertAxisCheckBoxGrp1Changed(); break;
            default: break;
          }
          break;
        case "cc2":
          switch ($control) {
            case "pasteAttributesCheckBoxGrp": pasteAttributesCheckBoxGrp2Changed(); break;
            case "invertAxisCheckBoxGrp": invertAxisCheckBoxGrp2Changed(); break;
            default: break;
          }
          break;
        case "cc3":
          switch ($control) {
            case "pasteAttributesCheckBoxGrp": pasteAttributesCheckBoxGrp3Changed(); break;
            default: break;
          }
          break;
        case "onc":
          switch ($control) {
            case "mirrorAxisRadioButton": mirrorAxisRadioButtonOn(); break;
            case "primaryAxisRadioButton": primaryAxisRadioButtonOn(); break;
            case "secondaryAxisRadioButton": secondaryAxisRadioButtonOn(); break;
            default: break;
          }
          break;
        case "sc":
          switch ($control) {
            case "nodeList": nodeListSelected(); break;
            default: break;
          }
          break;
        default: break;
      }
      break;
    case "nkPoseStackWindow":
      switch ($event) {
        case "c":
          switch ($control) {
            case "clearListMenuItem": clearListMenuItemSelected(); break;
            case "openListMenuItem": openListMenuItemSelected(); break;
            case "importListMenuItem": importListMenuItemSelected(); break;
            case "saveListAsMenuItem": saveListAsMenuItemSelected(); break;
            case "resetWindowMenuItem": resetWindowMenuItemSelected(); break;
            case "quitMenuItem": quitMenuItemSelected(); break;
            case "aboutMenuItem": aboutMenuItemSelected(); break;
            case "addPoseButton": addPoseButtonPressed(); break;
            case "editPoseButton": editPoseButtonPressed(); break;
            case "duplicatePoseButton": duplicatePoseButtonPressed(); break;
            case "updatePoseButton": updatePoseButtonPressed(); break;
            case "selectSourceButton": selectButtonPressed(false); break;
            case "selectOppositeButton": selectButtonPressed(true); break;
            case "pasteSourceButton": pasteButtonPressed(false); break;
            case "pasteOppositeButton": pasteButtonPressed(true); break;
            case "deletePoseButton": deletePoseButtonPressed(); break;
            case "moveUpPoseButton": moveUpPoseButtonPressed(); break;
            case "moveDownPoseButton": moveDownPoseButtonPressed(); break;
            default: break;
          }
          break;
        case "cc":
          switch ($control) {
            case "nkPoseStackWindow": nkPoseStackWindowClosed(); break;
            default: break;
          }
          break;
        case "dcc":
          switch ($control) {
            case "poseList": poseListDoubleClicked(); break;
            default: break;
          }
          break;
        case "postc":
          switch ($control) {
            case "addPoseButton": buildEditorWindow(); break;
            case "editPoseButton": buildEditorWindow(); break;
            default: break;
          }
          break;
        default: break;
      }
      break;
    default: break;
  }
}

// /////////////////////////////////////////////////////////////////////////////
// オブザーバ
// /////////////////////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------------
// ドメインオブザーバ
// -----------------------------------------------------------------------------
/*-
@param $selectionMode <string> 更新後の選択状態。
| 値          | 説明                             |
| ----------- | -------------------------------- |
| `none`      | 選択無し                         |
| `keepIndex` | 前回の選択インデックスを引き継ぐ |
| `keepItem`  | 前回の選択アイテムを引き継ぐ     |
| `last`      | 末尾のアイテムを選択             |
| `prev`      | 前に一つずらす                   |
| `next`      | 後に一つずらす                   |
@returns <>
*/
global proc nkPoseStackPosesChanged(string $selectionMode) {
  // print("nkPoseStackPosesChanged\n"); // debug
  // print("  selectionMode:" + $selectionMode + "\n"); // debug
  updatePoseList($selectionMode);
}

/*-
@param $nodes <string[]>
@returns <>
*/
global proc nkPoseStackScriptNodesRetrieved(string $nodes[]) {
  // print("nkPoseStackScriptNodesRetrieved\n"); // debug
  // print("  nodes:{\n    " + stringArrayToString($nodes, ",\n    ") + "\n  }\n"); // debug
  for ($n in $nodes) {
    if (`size $n`) registerNodeJob($n);
  }
}

// -----------------------------------------------------------------------------
// イベントオブザーバ
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
global proc nkPoseStackNewSceneOpened() {
  // print("nkPoseStackNewSceneOpened\n"); // debug
  updatePoseList("keepIndex");
}

/*-
@returns <>
*/
global proc nkPoseStackPostSceneRead() {
  // print("nkPoseStackPostSceneRead\n"); // debug
  updatePoseList("keepIndex");
}

// -----------------------------------------------------------------------------
// ノードオブザーバ
// -----------------------------------------------------------------------------
/*-
@param $nodeId <string>
@returns <>
*/
global proc nkPoseStackAttributeDeleted(string $nodeId) {
  // print("nkPoseStackAttributeDeleted\n"); // debug
  // print("  nodeId:" + $nodeId + "\n"); // debug
  unregisterNodeJob($nodeId);
  updatePoseList("keepIndex");
}

// /////////////////////////////////////////////////////////////////////////////
// メイン
// /////////////////////////////////////////////////////////////////////////////
/*-
@returns <string>
*/
global proc string nkPoseStackVersion() {
  return "4.0.8";
}

/*-
@returns <>
*/
global proc nkPoseStack() {
  initializeInitParameters();
  initializeScriptJobParameters();
  buildMainWindow();
  registerEventJob();
}

/*
eval ("source \"" + `getenv "MAYA_APP_DIR"` + "/dev/nkPoseStack/nkPoseStack.mel\"");
nkPoseStack;
*/

// /////////////////////////////////////////////////////////////////////////////
// テスト
// /////////////////////////////////////////////////////////////////////////////
/*-
@returns <>
@remarks データ変換。
*/
proc test0() {
  string $pv = getPoseVersion() + "\n";

  print("test0 start\n");
  string $r;

  // serialize
  $r = assertStringEqual("", serialize({})); if (`size $r`) warning $r;
  $r = assertStringEqual($pv + "a\n", serialize({"a"})); if (`size $r`) warning $r;
  $r = assertStringEqual($pv + "a\nb\n", serialize({"a", "b"})); if (`size $r`) warning $r;
  $r = assertStringEqual($pv + "a\nb\n", serialize({"a", "", "b"})); if (`size $r`) warning $r;

  // deserialize
  $r = assertStringArrayEqual({}, deserialize("")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({}, deserialize("\n")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({"a", "b"}, deserialize("a\nb\n")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({"a", "b"}, deserialize("a\n\nb\n")); if (`size $r`) warning $r;

  // makePoseSetting
  $r = assertStringEqual("//", makePoseSetting({}, {}, {})); if (`size $r`) warning $r;
  $r = assertStringEqual("0,1/a,b/2,3", makePoseSetting({0, 1}, {"a", "b"}, {2, 3})); if (`size $r`) warning $r;

  // makeTransformHeader
  $r = assertStringEqual("[]", makeTransformHeader("", "")); if (`size $r`) warning $r;
  $r = assertStringEqual("a[b]", makeTransformHeader("a", "b")); if (`size $r`) warning $r;

  // makePoseTransform
  $r = assertStringEqual("", makePoseTransform("", {})); if (`size $r`) warning $r;
  $r = assertStringEqual("a0.1,0.2", makePoseTransform("a", {0.1, 0.2})); if (`size $r`) warning $r;

  // makePose
  $r = assertStringEqual("", makePose("", {})); if (`size $r`) warning $r;
  $r = assertStringEqual("", makePose("a", {})); if (`size $r`) warning $r;
  $r = assertStringEqual("", makePose("", {"b"})); if (`size $r`) warning $r;
  $r = assertStringEqual("a=b;", makePose("a", {"b"})); if (`size $r`) warning $r;
  $r = assertStringEqual("a=b;c;", makePose("a", {"b", "c"})); if (`size $r`) warning $r;

  // extractPoseName
  $r = assertStringEqual("", extractPoseName("")); if (`size $r`) warning $r;
  $r = assertStringEqual("", extractPoseName("a")); if (`size $r`) warning $r;
  $r = assertStringEqual("a", extractPoseName("a=b")); if (`size $r`) warning $r;
  $r = assertStringEqual("", extractPoseName("a=b=c")); if (`size $r`) warning $r;

  // extractPoseTransforms
  $r = assertStringArrayEqual({}, extractPoseTransforms("")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({}, extractPoseTransforms("a")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({}, extractPoseTransforms("a=b=c")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({"b"}, extractPoseTransforms("a=b")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({"b"}, extractPoseTransforms("a=b;")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({"b", "c"}, extractPoseTransforms("a=b;c;")); if (`size $r`) warning $r;

  // extractTransformHeader
  $r = assertStringArrayEqual({}, extractTransformHeader("")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({}, extractTransformHeader("a")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({}, extractTransformHeader("a]b")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({}, extractTransformHeader("a[b")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({}, extractTransformHeader("a[b][c]0")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({}, extractTransformHeader("a[b[c]0")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({"a", "b"}, extractTransformHeader("a[b]0")); if (`size $r`) warning $r;

  // extractTransformNode
  $r = assertStringEqual("", extractTransformNode("")); if (`size $r`) warning $r;
  $r = assertStringEqual("", extractTransformNode("a")); if (`size $r`) warning $r;
  $r = assertStringEqual("", extractTransformNode("a]b")); if (`size $r`) warning $r;
  $r = assertStringEqual("", extractTransformNode("a[b")); if (`size $r`) warning $r;
  $r = assertStringEqual("", extractTransformNode("a[b][c]0")); if (`size $r`) warning $r;
  $r = assertStringEqual("", extractTransformNode("a[b[c]0")); if (`size $r`) warning $r;
  $r = assertStringEqual("a", extractTransformNode("a[b]0")); if (`size $r`) warning $r;

  // extractPoseSetting
  $r = assertStringEqual("", extractPoseSetting("")); if (`size $r`) warning $r;
  $r = assertStringEqual("", extractPoseSetting("a")); if (`size $r`) warning $r;
  $r = assertStringEqual("", extractPoseSetting("a]b")); if (`size $r`) warning $r;
  $r = assertStringEqual("", extractPoseSetting("a[b")); if (`size $r`) warning $r;
  $r = assertStringEqual("", extractPoseSetting("a[b][c]0")); if (`size $r`) warning $r;
  $r = assertStringEqual("", extractPoseSetting("a[b[c]0")); if (`size $r`) warning $r;
  $r = assertStringEqual("b", extractPoseSetting("a[b]0")); if (`size $r`) warning $r;

  // extractPoseSettings
  $r = assertStringArrayEqual({}, extractPoseSettings("")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({}, extractPoseSettings("a")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({}, extractPoseSettings("a/b")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({"a", "b", "c"}, extractPoseSettings("a/b/c")); if (`size $r`) warning $r;
  $r = assertStringArrayEqual({}, extractPoseSettings("a/b/c/d")); if (`size $r`) warning $r;

  // extractPasteSetting
  {
    int $eFailure[] = {1, 1, 0};
    int $eSuccess[] = {2, 3, 4};
    $r = assertIntArrayEqual($eFailure, extractPasteSetting("")); if (`size $r`) warning $r;
    $r = assertIntArrayEqual($eFailure, extractPasteSetting("a")); if (`size $r`) warning $r;
    $r = assertIntArrayEqual($eFailure, extractPasteSetting("a/b")); if (`size $r`) warning $r;
    $r = assertIntArrayEqual($eFailure, extractPasteSetting("a/b/c")); if (`size $r`) warning $r;
    $r = assertIntArrayEqual($eFailure, extractPasteSetting("2/b/c")); if (`size $r`) warning $r;
    $r = assertIntArrayEqual($eFailure, extractPasteSetting("2,3/b/c")); if (`size $r`) warning $r;
    $r = assertIntArrayEqual($eSuccess, extractPasteSetting("2,3,4/b/c")); if (`size $r`) warning $r;
    $r = assertIntArrayEqual($eFailure, extractPasteSetting("2,3,4,5/b/c")); if (`size $r`) warning $r;
  }

  // extractSelectSetting
  {
    string $eFailure[] = {"_L", "_R"};
    string $eSuccess[] = {"b", "d"};
    $r = assertStringArrayEqual($eFailure, extractSelectSetting("")); if (`size $r`) warning $r;
    $r = assertStringArrayEqual($eFailure, extractSelectSetting("a")); if (`size $r`) warning $r;
    $r = assertStringArrayEqual($eFailure, extractSelectSetting("a/b")); if (`size $r`) warning $r;
    $r = assertStringArrayEqual($eFailure, extractSelectSetting("a/b/c")); if (`size $r`) warning $r;
    $r = assertStringArrayEqual($eSuccess, extractSelectSetting("a/b,d/c")); if (`size $r`) warning $r;
    $r = assertStringArrayEqual($eFailure, extractSelectSetting("a/b,d,e/c")); if (`size $r`) warning $r;
  }

  // extractMirrorSetting
  {
    int $eFailure[] = {0, 0, 1, 0, 0};
    int $eSuccess[] = {2, 3, 4, 5, 6};
    $r = assertIntArrayEqual($eFailure, extractMirrorSetting("")); if (`size $r`) warning $r;
    $r = assertIntArrayEqual($eFailure, extractMirrorSetting("a")); if (`size $r`) warning $r;
    $r = assertIntArrayEqual($eFailure, extractMirrorSetting("a/b")); if (`size $r`) warning $r;
    $r = assertIntArrayEqual($eFailure, extractMirrorSetting("a/b/2")); if (`size $r`) warning $r;
    $r = assertIntArrayEqual($eFailure, extractMirrorSetting("a/b/2,3")); if (`size $r`) warning $r;
    $r = assertIntArrayEqual($eFailure, extractMirrorSetting("a/b/2,3,4")); if (`size $r`) warning $r;
    $r = assertIntArrayEqual($eFailure, extractMirrorSetting("a/b/2,3,4,5")); if (`size $r`) warning $r;
    $r = assertIntArrayEqual($eSuccess, extractMirrorSetting("a/b/2,3,4,5,6")); if (`size $r`) warning $r;
    $r = assertIntArrayEqual($eFailure, extractMirrorSetting("a/b/2,3,4,5,6,7")); if (`size $r`) warning $r;
  }

  // extractTransformValues
  {
    float $eFailure[] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0};
    float $eSuccess[] = {2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5};
    $r = assertFloatArrayEqual($eFailure, extractTransformValues(""), 0.0); if (`size $r`) warning $r;
    $r = assertFloatArrayEqual($eFailure, extractTransformValues("a"), 0.0); if (`size $r`) warning $r;
    $r = assertFloatArrayEqual($eFailure, extractTransformValues("a]b"), 0.0); if (`size $r`) warning $r;
    $r = assertFloatArrayEqual($eFailure, extractTransformValues("a[b"), 0.0); if (`size $r`) warning $r;
    $r = assertFloatArrayEqual($eFailure, extractTransformValues("a[b][c]0"), 0.0); if (`size $r`) warning $r;
    $r = assertFloatArrayEqual($eFailure, extractTransformValues("a[b]"), 0.0); if (`size $r`) warning $r;
    $r = assertFloatArrayEqual($eFailure, extractTransformValues("a[b]2"), 0.0); if (`size $r`) warning $r;
    $r = assertFloatArrayEqual($eFailure, extractTransformValues("a[b]2,2,2,3,3,3,3,4,4,4,5,5"), 0.0); if (`size $r`) warning $r;
    $r = assertFloatArrayEqual($eSuccess, extractTransformValues("a[b]2,2,2,3,3,3,3,4,4,4,5,5,5"), 0.0); if (`size $r`) warning $r;
    $r = assertFloatArrayEqual($eFailure, extractTransformValues("a[b]2,2,2,3,3,3,3,4,4,4,5,5,5,6"), 0.0); if (`size $r`) warning $r;
  }

  // convertDataVersion
  {
    string $pv = getPoseVersion() + "\n";

    $r = assertStringEqual("", convertDataVersion("")); if (`size $r`) warning $r;
    $r = assertStringEqual("", convertDataVersion($pv)); if (`size $r`) warning $r;
    $r = assertStringEqual("a\n", convertDataVersion($pv + "a\n")); if (`size $r`) warning $r;
    $r = assertStringEqual("xa\nxb\n", convertDataVersion("0\na\nb\n")); if (`size $r`) warning $r;
  }

  // resolveNamespace
  {
    testNewScene();

    string $n = `createNode -n "nkPoseStackData" -ss "transform"`;
    string $nT = `createNode -n "test:nkPoseStackData" -ss "transform"`;
    string $poseA = "A=|A|a_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;|A|a_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
    string $poseB = "B=|B|b_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;|B|b_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
    string $ePoses[] = {$poseA, $poseB};
    string $aPoses[] = {$poseA, $poseB};

    string $poseAr = "A=|test:A|test:a_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;|test:A|test:a_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
    string $poseBr = "B=|test:B|test:b_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;|test:B|test:b_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
    string $posesR[] = {$poseAr, $poseBr};

    $r = assertStringArrayEqual({}, resolveNamespace("", {})); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({}, resolveNamespace($nT, {})); if (`size $r`) warning $r;
    $r = assertStringArrayEqual($ePoses, resolveNamespace("", $aPoses)); if (`size $r`) warning $r;
    $r = assertStringArrayEqual($ePoses, resolveNamespace($n, $aPoses)); if (`size $r`) warning $r;
    $r = assertStringArrayEqual($posesR, resolveNamespace($nT, $aPoses)); if (`size $r`) warning $r;
    $r = assertStringArrayEqual($posesR, $aPoses); if (`size $r`) warning $r;

    if (`objExists $n`) delete $n;
    if (`objExists $nT`) delete $nT;
  }

  print("test0 end\n");
}

/*-
@returns <>
@remarks トランスフォーム。
*/
proc test1() {
  print("test1 start\n");
  string $r;

  // getTransformAttributeValues
  {
    select -cl;
    string $n = `joint -a -ax 15 -ay 30 -az 45 -p 2 0 1 -roo "xyz"`;
    select -cl;
    float $eValues[] = {
      2.0, 0.0, 1.0,
      // ZYX x:15 y:30 z:45 https://www.andre-gaschler.com/rotationconverter/
      0.018283, 0.2853201, 0.3352703, 0.8976926,
      1.0, 1.0, 1.0,
      0.0, 0.0, 0.0
    };
    $r = assertFloatArrayEqual($eValues, getTransformAttributeValues($n), 0.001); if (`size $r`) warning $r;

    if (`objExists $n`) delete $n;
  }

  // makePoseTransforms
  {
    select -cl;
    string $n1 = `joint -a -ax 0 -ay 0 -az 0 -p 1 1 1 -roo "xyz"`;
    select -cl;
    string $n2 = `joint -a -ax 0 -ay 0 -az 0 -p 2 2 2 -roo "xyz"`;
    select -cl;
    string $eValues[] = {
      $n1 + "[a]1,1,1,0,0,0,1,1,1,1,0,0,0",
      $n2 + "[b]2,2,2,0,0,0,1,1,1,1,0,0,0"
    };
    $r = assertStringArrayEqual($eValues, makePoseTransforms({$n1, $n2}, {"a", "b"})); if (`size $r`) warning $r;

    if (`objExists $n1`) delete $n1;
    if (`objExists $n2`) delete $n2;
  }

  // setTransformAttributes
  {
    string $n1 = `joint -a -ax 0 -ay 0 -az 0 -p 0 0 0 -roo "xyz" -s 1 1 1`;
    float $m[] = {
      1.0, 2.0, 3.0,
      15.0, 30.0, 45.0,
      4.0, 5.0, 6.0,
      0.0, 0.0, 0.0
    };
    $r = assertFloatArrayEqual({0.0, 0.0, 0.0}, `getAttr ($n1 + ".t")`, 0.001); if (`size $r`) warning $r;
    $r = assertFloatArrayEqual({0.0, 0.0, 0.0}, `getAttr ($n1 + ".r")`, 0.001); if (`size $r`) warning $r;
    $r = assertFloatArrayEqual({1.0, 1.0, 1.0}, `getAttr ($n1 + ".s")`, 0.001); if (`size $r`) warning $r;
    setTransformAttributes($n1, $m, false, false, false);
    $r = assertFloatArrayEqual({0.0, 0.0, 0.0}, `getAttr ($n1 + ".t")`, 0.001); if (`size $r`) warning $r;
    $r = assertFloatArrayEqual({0.0, 0.0, 0.0}, `getAttr ($n1 + ".r")`, 0.001); if (`size $r`) warning $r;
    $r = assertFloatArrayEqual({1.0, 1.0, 1.0}, `getAttr ($n1 + ".s")`, 0.001); if (`size $r`) warning $r;
    setTransformAttributes($n1, $m, true, false, false);
    $r = assertFloatArrayEqual({1.0, 2.0, 3.0}, `getAttr ($n1 + ".t")`, 0.001); if (`size $r`) warning $r;
    setTransformAttributes($n1, $m, false, true, false);
    $r = assertFloatArrayEqual({15.0, 30.0, 45.0}, `getAttr ($n1 + ".r")`, 0.001); if (`size $r`) warning $r;
    setTransformAttributes($n1, $m, false, false, true);
    $r = assertFloatArrayEqual({4.0, 5.0, 6.0}, `getAttr ($n1 + ".s")`, 0.001); if (`size $r`) warning $r;

    if (`objExists $n1`) delete $n1;
  }

  // asIsTransform
  {
    select -cl;
    string $n1 = `joint -a -ax 0 -ay 0 -az 0 -p -2 0 1`;
    setAttr ($n1 + ".jox") -180;
    select -cl;
    float $m[] = {
      2.0, 0.0, 1.0,
      // ZYX x:15 y:30 z:45 https://www.andre-gaschler.com/rotationconverter/
      0.018283, 0.2853201, 0.3352703, 0.8976926,
      1.0, 1.0, 1.0,
      0.0, 0.0, 0.0
    };
    float $eValues[] = {
      2.0, 0.0, 1.0,
      -165.0, -30.0, -45.0,
      1.0, 1.0, 1.0,
      0.0, 0.0, 0.0
    };
    $r = assertFloatArrayEqual($eValues, asIsTransform($n1, $m), 0.001); if (`size $r`) warning $r;

    if (`objExists $n1`) delete $n1;
  }

  // mirrorTransform
  {
    select -cl;
    string $n1 = `joint -a -ax 0 -ay 0 -az 0 -p -2 0 1`;
    setAttr ($n1 + ".jox") -180;
    select -cl;
    float $m[] = {
      2.0, 0.0, 1.0,
      // ZYX x:15 y:30 z:45 https://www.andre-gaschler.com/rotationconverter/
      0.018283, 0.2853201, 0.3352703, 0.8976926,
      1.0, 1.0, 1.0,
      0.0, 0.0, 0.0
    };
    float $eValues[] = {
      -2.0, 0.0, 1.0,
      15.0, 30.0, 45.0,
      1.0, 1.0, 1.0,
      0.0, 0.0, 0.0
    };
    $r = assertFloatArrayEqual($eValues, mirrorTransform($n1, $m, true, 0, 0, 1, true, true), 0.001); if (`size $r`) warning $r;

    if (`objExists $n1`) delete $n1;
  }

  print("test1 end\n");
}

/*-
@var <string>
*/
global string $nkPoseStackScriptNodeTestNodes[];

/*-
@param $nodes <string[]>
@returns <>
*/
global proc nkPoseStackScriptNodeTestObserver(string $nodes[]) {
  global string $nkPoseStackScriptNodeTestNodes[];
  string $r = assertStringArrayEqual($nkPoseStackScriptNodeTestNodes, $nodes); if (`size $r`) warning $r;
  clear $nkPoseStackScriptNodeTestNodes;
}

/*-
@returns <>
@remarks スクリプトノード。
*/
proc test2() {
  global string $nkPoseStackScriptNodeTestNodes[];

  string $testDirname = `getenv "MAYA_APP_DIR"` + "/dev/nkPoseStack/test";
  string $scriptNodeFilename = $testDirname + "/scriptNodeTest.ma";
  string $nsScriptNodeFilename = $testDirname + "/ns_scriptNodeTest.ma";

  string $pdA = "A=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $pdB = "B=|locatorB_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $pdC = "C=|locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $pdD = "D=|locatorD_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\n";

  string $poseA = "A=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $poseB = "B=|locatorB_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $poseC = "C=|locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $poseD = "D=|locatorD_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";

  string $poseAr = "!A=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $poseCr = "!C=|locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";

  string $nsPdA = "A_L=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nA_R=|locatorA_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $nsPdB = "B_L=|locatorB_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nB_R=|locatorB_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $nsPdC = "C_L=|c:locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nC_R=|c:locatorC_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $nsPdD = "D_L=|d:locatorD_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nD_R=|d:locatorD_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $nsPdE = "E_L=|locatorE_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nE_R=|locatorE_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";

  string $nsPoseAL = "A_L=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseAR = "A_R=|locatorA_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseBL = "B_L=|locatorB_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseBR = "B_R=|locatorB_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCL = "C_L=|c:locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCR = "C_R=|c:locatorC_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseDL = "D_L=|d:locatorD_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseDR = "D_R=|d:locatorD_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseEL = "E_L=|locatorE_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseER = "E_R=|locatorE_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";

  string $nsPoseALr = "!A_L=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseARr = "!A_R=|locatorA_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCLr = "!C_L=|referenced_one:c:locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCRr = "!C_R=|referenced_one:c:locatorC_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseELr = "!E_L=|referenced_two:e:locatorE_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseERr = "!E_R=|referenced_two:e:locatorE_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";

  print("test2 start\n");
  string $r;
  string $nodes[];

  // isValidScriptNode / createScriptNode
  {
    testNewScene();

    string $n1 = `createNode -ss "transform"`;
    $r = assertFalse(isValidScriptNode($n1)); if (`size $r`) warning $r;
    string $n2 = createScriptNode();
    $r = assertTrue(isValidScriptNode($n2)); if (`size $r`) warning $r;
    $r = assertStringEqual("nkPoseStackData", $n2); if (`size $r`) warning $r;
    string $n3 = createScriptNode();
    $r = assertTrue(isValidScriptNode($n3)); if (`size $r`) warning $r;
    $r = assertStringEqual("nkPoseStackData1", $n3); if (`size $r`) warning $r;

    if (`objExists $n1`) delete $n1;
    if (`objExists $n2`) delete $n2;
    if (`objExists $n3`) delete $n3;
  }

  // isNodeReferenced
  {
    testNewScene();

    string $n = createScriptNode();
    $r = assertFalse(isNodeReferenced($n)); if (`size $r`) warning $r;
    if (`objExists $n`) delete $n;

    testOpenScene($scriptNodeFilename);

    $r = assertTrue(isNodeReferenced("nkPoseStackDataA")); if (`size $r`) warning $r;
    $r = assertFalse(isNodeReferenced("nkPoseStackDataB")); if (`size $r`) warning $r;
    $r = assertTrue(isNodeReferenced("nkPoseStackDataC")); if (`size $r`) warning $r;
    $r = assertFalse(isNodeReferenced("nkPoseStackDataD")); if (`size $r`) warning $r;
  }

  // getPoseStackDataAttr / setPoseStackDataAttr
  {
    string $pv = getPoseVersion() + "\n";
    string $value = $pv + "a\nb\n";

    testNewScene();

    string $n1 = `createNode -ss "transform"`;
    $r = assertStringEqual("", getPoseStackDataAttr($n1)); if (`size $r`) warning $r;
    setPoseStackDataAttr($n1, $value);
    $r = assertStringEqual("", getPoseStackDataAttr($n1)); if (`size $r`) warning $r;

    string $n2 = createScriptNode();
    $r = assertStringEqual("", getPoseStackDataAttr($n2)); if (`size $r`) warning $r;
    setPoseStackDataAttr($n2, $value);
    $r = assertStringEqual($value, getPoseStackDataAttr($n2)); if (`size $r`) warning $r;

    if (`objExists $n1`) delete $n1;
    if (`objExists $n2`) delete $n2;
  }

  // mergeScriptNodes
  {
    string $pv = getPoseVersion() + "\n";
    string $valueA = $pv + "a\n";
    string $valueB = $pv + "b\n";
    string $valueC = $pv + "c\n";

    string $nM;

    testNewScene();

    string $nX = `rename (createScriptNode()) "nkPoseStackDataX"`;
    string $nY = `rename (createScriptNode()) "nkPoseStackDataY"`;
    $r = assertTrue(isValidScriptNode($nX)); if (`size $r`) warning $r;
    $r = assertTrue(isValidScriptNode($nY)); if (`size $r`) warning $r;
    $r = assertStringEqual("", mergeScriptNodes({$nX, $nY})); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nX`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nY`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({}, `ls -l "::nkPoseStackData*"`); if (`size $r`) warning $r;

    string $nT = `createNode -ss "transform"`;
    string $nA = `rename (createScriptNode()) "nkPoseStackDataA"`;
    string $nB = `rename (createScriptNode()) "nkPoseStackDataB"`;
    string $nC = `rename (createScriptNode()) "nkPoseStackDataC"`;
    setPoseStackDataAttr($nA, $valueA);
    setPoseStackDataAttr($nB, $valueB);
    setPoseStackDataAttr($nC, $valueC);
    $r = assertStringEqual($valueA, getPoseStackDataAttr($nA)); if (`size $r`) warning $r;
    $r = assertStringEqual($valueB, getPoseStackDataAttr($nB)); if (`size $r`) warning $r;
    $r = assertStringEqual($valueC, getPoseStackDataAttr($nC)); if (`size $r`) warning $r;
    $nM = mergeScriptNodes({$nA, $nB, $nC, $nT});
    $r = assertTrue(isValidScriptNode($nM)); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nb\nc\n", getPoseStackDataAttr($nM)); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nA`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nB`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nC`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists $nT`); if (`size $r`) warning $r;

    if (`objExists $nT`) delete $nT;
    if (`objExists $nM`) delete $nM;

    testOpenScene($scriptNodeFilename);

    $r = assertTrue(`objExists "nkPoseStackDataA"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataB"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataC"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataD"`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists "nkPoseStackData"`); if (`size $r`) warning $r;
    $nM = mergeScriptNodes({"nkPoseStackDataA", "nkPoseStackDataB", "nkPoseStackDataC", "nkPoseStackDataD"});
    $r = assertTrue(isValidScriptNode($nM)); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + $pdB + $pdD, getPoseStackDataAttr($nM)); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataA"`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists "nkPoseStackDataB"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataC"`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists "nkPoseStackDataD"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackData"`); if (`size $r`) warning $r;
  }

  // getScriptNodes
  {
    string $pv = getPoseVersion() + "\n";
    string $valueA = $pv + "a\n";
    string $valueB = $pv + "b\n";
    string $valueC = $pv + "c\n";

    subscribe("nkPoseStackScriptNodesRetrieved", "nkPoseStackScriptNodeTestObserver");

    testNewScene();

    string $nA = `rename (createScriptNode()) "nkPoseStackDataA"`;
    string $nB = `rename (createScriptNode()) "nkPoseStackDataB"`;
    string $nC = `rename (createScriptNode()) "nkPoseStackDataC"`;
    setPoseStackDataAttr($nA, $valueA);
    setPoseStackDataAttr($nB, $valueB);
    setPoseStackDataAttr($nC, $valueC);
    $r = assertStringEqual($valueA, getPoseStackDataAttr($nA)); if (`size $r`) warning $r;
    $r = assertStringEqual($valueB, getPoseStackDataAttr($nB)); if (`size $r`) warning $r;
    $r = assertStringEqual($valueC, getPoseStackDataAttr($nC)); if (`size $r`) warning $r;

    $nkPoseStackScriptNodeTestNodes = {"nkPoseStackData"};
    $nodes = getScriptNodes();
    $r = assertStringArrayEqual({}, $nkPoseStackScriptNodeTestNodes); if (`size $r`) warning $r;

    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({"nkPoseStackData"}, $nodes); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackData"`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nA`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nB`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nC`); if (`size $r`) warning $r;
    $r = assertTrue(isValidScriptNode($nodes[0])); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nb\nc\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $nkPoseStackScriptNodeTestNodes = {"nkPoseStackDataA", "nkPoseStackDataC", "nkPoseStackData"};
    $nodes = getScriptNodes();
    $r = assertStringArrayEqual({}, $nkPoseStackScriptNodeTestNodes); if (`size $r`) warning $r;

    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC", "nkPoseStackData"}, $nodes); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + $pdB + $pdD, getPoseStackDataAttr($nodes[2])); if (`size $r`) warning $r;

    unsubscribe("nkPoseStackScriptNodesRetrieved", "nkPoseStackScriptNodeTestObserver");
  }

  // getEditableScriptNode
  {
    string $pv = getPoseVersion() + "\n";
    string $valueA = $pv + "a\n";
    string $valueB = $pv + "b\n";

    testNewScene();

    $r = assertStringEqual("", getEditableScriptNode({})); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({}, getScriptNodes()); if (`size $r`) warning $r;
    string $nA = `rename (createScriptNode()) "nkPoseStackDataA"`;
    setPoseStackDataAttr($nA, $valueA);
    $r = assertStringEqual("nkPoseStackDataA", getEditableScriptNode({})); if (`size $r`) warning $r;
    $r = assertTrue(`objExists $nA`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists "nkPoseStackData"`); if (`size $r`) warning $r;
    string $nB = `rename (createScriptNode()) "nkPoseStackDataB"`;
    setPoseStackDataAttr($nB, $valueB);
    $r = assertStringEqual("", getEditableScriptNode({$nA, $nB})); if (`size $r`) warning $r; // 警告表示
    $r = assertStringEqual("nkPoseStackData", getEditableScriptNode({})); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nB`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackData"`); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $r = assertStringEqual("", getEditableScriptNode(`ls -l "::nkPoseStackData*"`)); if (`size $r`) warning $r; // 警告表示
    $r = assertTrue(`objExists "nkPoseStackDataA"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataB"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataC"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataD"`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists "nkPoseStackData"`); if (`size $r`) warning $r;
    $r = assertStringEqual("nkPoseStackData", getEditableScriptNode({})); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataA"`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists "nkPoseStackDataB"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataC"`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists "nkPoseStackDataD"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackData"`); if (`size $r`) warning $r;
  }

  // deleteScriptNodes
  {
    testNewScene();

    string $nA = `rename (createScriptNode()) "nkPoseStackDataA"`;
    string $nB = `rename (createScriptNode()) "nkPoseStackDataB"`;
    string $nC = `rename (createScriptNode()) "nkPoseStackDataC"`;
    deleteScriptNodes();
    $r = assertFalse(`objExists $nA`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nB`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nC`); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    deleteScriptNodes();
    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC"}, getScriptNodes()); if (`size $r`) warning $r;
  }

  print("test2 end\n");
}

/*-
@returns <>
@remarks スクリプトノードアトリビュート。
*/
proc test3() {
  string $testDirname = `getenv "MAYA_APP_DIR"` + "/dev/nkPoseStack/test";
  string $scriptNodeFilename = $testDirname + "/scriptNodeTest.ma";
  string $nsScriptNodeFilename = $testDirname + "/ns_scriptNodeTest.ma";

  string $pdA = "A=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $pdB = "B=|locatorB_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $pdC = "C=|locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $pdD = "D=|locatorD_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\n";

  string $poseA = "A=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $poseB = "B=|locatorB_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $poseC = "C=|locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $poseD = "D=|locatorD_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";

  string $poseAr = "!A=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $poseCr = "!C=|locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";

  string $nsPdA = "A_L=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nA_R=|locatorA_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $nsPdB = "B_L=|locatorB_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nB_R=|locatorB_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $nsPdC = "C_L=|c:locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nC_R=|c:locatorC_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $nsPdD = "D_L=|d:locatorD_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nD_R=|d:locatorD_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $nsPdE = "E_L=|locatorE_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nE_R=|locatorE_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";

  string $nsPoseAL = "A_L=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseAR = "A_R=|locatorA_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseBL = "B_L=|locatorB_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseBR = "B_R=|locatorB_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCL = "C_L=|c:locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCR = "C_R=|c:locatorC_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseDL = "D_L=|d:locatorD_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseDR = "D_R=|d:locatorD_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseEL = "E_L=|locatorE_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseER = "E_R=|locatorE_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";

  string $nsPoseALr = "!A_L=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseARr = "!A_R=|locatorA_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCLr = "!C_L=|referenced_one:c:locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCRr = "!C_R=|referenced_one:c:locatorC_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseELr = "!E_L=|referenced_two:e:locatorE_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseERr = "!E_R=|referenced_two:e:locatorE_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";

  print("test3 start\n");
  string $r;
  string $nodes[];

  // isPoseReferenced
  $r = assertFalse(isPoseReferenced("")); if (`size $r`) warning $r;
  $r = assertFalse(isPoseReferenced("a")); if (`size $r`) warning $r;
  $r = assertFalse(isPoseReferenced("!")); if (`size $r`) warning $r;
  $r = assertTrue(isPoseReferenced("!a")); if (`size $r`) warning $r;

  // readAttrPoses
  {
    string $pv = getPoseVersion() + "\n";
    string $valueA = $pv + "a\n";
    string $valueB = $pv + "b\n";
    string $valueC = $pv + "c\n";
    string $valueD = "0\nd\n"; // バージョン違い

    testNewScene();

    string $nA = `rename (createScriptNode()) "nkPoseStackDataA"`;
    string $nB = `rename (createScriptNode()) "nkPoseStackDataB"`;
    string $nC = `rename (createScriptNode()) "nkPoseStackDataC"`;
    string $nD = `rename (createScriptNode()) "nkPoseStackDataD"`;
    setPoseStackDataAttr($nA, $valueA);
    setPoseStackDataAttr($nB, $valueB);
    setPoseStackDataAttr($nC, $valueC);
    setPoseStackDataAttr($nD, $valueD);
    $r = assertStringEqual($valueA, getPoseStackDataAttr($nA)); if (`size $r`) warning $r;
    $r = assertStringEqual($valueB, getPoseStackDataAttr($nB)); if (`size $r`) warning $r;
    $r = assertStringEqual($valueC, getPoseStackDataAttr($nC)); if (`size $r`) warning $r;
    $r = assertStringEqual($valueD, getPoseStackDataAttr($nD)); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({"a", "c"}, readAttrPoses({$nA, $nC})); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({"c", "b"}, readAttrPoses({$nC, $nB})); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({"xd"}, readAttrPoses({$nD})); if (`size $r`) warning $r;
    $r = assertStringEqual($valueA, getPoseStackDataAttr($nA)); if (`size $r`) warning $r;
    $r = assertStringEqual($valueB, getPoseStackDataAttr($nB)); if (`size $r`) warning $r;
    $r = assertStringEqual($valueC, getPoseStackDataAttr($nC)); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "xd\n", getPoseStackDataAttr($nD)); if (`size $r`) warning $r;
    $r = assertTrue(`objExists $nA`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists $nB`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists $nC`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists $nD`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists "nkPoseStackData"`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({"a", "b", "c", "xd"}, readAttrPoses({})); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nA`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nB`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nC`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nD`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackData"`); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $r = assertStringArrayEqual({$poseAr, $poseCr}, readAttrPoses({"nkPoseStackDataA", "nkPoseStackDataC"})); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataA"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataB"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataC"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataD"`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists "nkPoseStackData"`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseAr, $poseCr, $poseB, $poseD}, readAttrPoses({})); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataA"`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists "nkPoseStackDataB"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataC"`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists "nkPoseStackDataD"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackData"`); if (`size $r`) warning $r;

    testOpenScene($nsScriptNodeFilename);

    $r = assertStringArrayEqual({$nsPoseALr, $nsPoseARr, $nsPoseCLr, $nsPoseCRr}, readAttrPoses({"nkPoseStackDataA", "referenced_one:nkPoseStackDataC"})); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataA"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataB"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "referenced_one:nkPoseStackDataC"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "imported:nkPoseStackDataD"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "referenced_two:e:nkPoseStackDataE"`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists "nkPoseStackData"`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$nsPoseALr, $nsPoseARr, $nsPoseCLr, $nsPoseCRr, $nsPoseELr, $nsPoseERr, $nsPoseDL, $nsPoseDR, $nsPoseBL, $nsPoseBR}, readAttrPoses({})); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackDataA"`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists "nkPoseStackDataB"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "referenced_one:nkPoseStackDataC"`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists "imported:nkPoseStackDataD"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "referenced_two:e:nkPoseStackDataE"`); if (`size $r`) warning $r;
    $r = assertTrue(`objExists "nkPoseStackData"`); if (`size $r`) warning $r;
  }

  // appendAttrPoses
  {
    string $pv = getPoseVersion() + "\n";

    testNewScene();

    $nodes = getScriptNodes();
    $r = assertIntEqual(0, `size $nodes`); if (`size $r`) warning $r;
    $r = assertTrue(appendAttrPoses({"a", "b"})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nb\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $r = assertTrue(appendAttrPoses({"e", "f"})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC", "nkPoseStackData"}, $nodes); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + $pdB + $pdD + "e\nf\n", getPoseStackDataAttr($nodes[2])); if (`size $r`) warning $r;
  }

  // writeAttrPoses
  {
    string $pv = getPoseVersion() + "\n";

    testNewScene();

    $nodes = getScriptNodes();
    $r = assertIntEqual(0, `size $nodes`); if (`size $r`) warning $r;
    $r = assertTrue(writeAttrPoses({})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(0, `size $nodes`); if (`size $r`) warning $r;
    $r = assertTrue(writeAttrPoses({"a", "b"})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nb\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $r = assertTrue(writeAttrPoses({})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(0, `size $nodes`); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $r = assertTrue(writeAttrPoses({"e", "f"})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC", "nkPoseStackData"}, $nodes); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "e\nf\n", getPoseStackDataAttr($nodes[2])); if (`size $r`) warning $r;
  }

  // makeEditablePoses
  {
    string $pv = getPoseVersion() + "\n";
    string $valueA = $pv + "!a\n";
    string $valueB = $pv + "b\n";
    string $valueC = $pv + "c\n";
    string $poses[];

    testNewScene();

    $r = assertIntEqual(0, makeEditablePoses({}, $poses)); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({}, $poses); if (`size $r`) warning $r;
    string $nA = `rename (createScriptNode()) "nkPoseStackDataA"`;
    string $nB = `rename (createScriptNode()) "nkPoseStackDataB"`;
    string $nC = `rename (createScriptNode()) "nkPoseStackDataC"`;
    setPoseStackDataAttr($nA, $valueA);
    setPoseStackDataAttr($nB, $valueB);
    setPoseStackDataAttr($nC, $valueC);
    $r = assertStringEqual($valueA, getPoseStackDataAttr($nA)); if (`size $r`) warning $r;
    $r = assertStringEqual($valueB, getPoseStackDataAttr($nB)); if (`size $r`) warning $r;
    $r = assertStringEqual($valueC, getPoseStackDataAttr($nC)); if (`size $r`) warning $r;
    $r = assertIntEqual(1, makeEditablePoses({$nA, $nB, $nC}, $poses)); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({"b", "c"}, $poses); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $nodes = getScriptNodes();
    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC", "nkPoseStackData"}, $nodes); if (`size $r`) warning $r;
    $r = assertIntEqual(2, makeEditablePoses($nodes, $poses)); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseB, $poseD}, $poses); if (`size $r`) warning $r;
  }

  // insertPose
  {
    string $pv = getPoseVersion() + "\n";

    testNewScene();

    $nodes = getScriptNodes();
    $r = assertIntEqual(0, `size $nodes`); if (`size $r`) warning $r;
    // $r = assertFalse(insertPose(-1, "x")); if (`size $r`) warning $r;
    $r = assertFalse(insertPose(0, "")); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(0, `size $nodes`); if (`size $r`) warning $r;
    $r = assertTrue(insertPose(0, "x")); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "x\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $r = assertTrue(insertPose(-1, "y")); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "y\nx\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $r = assertTrue(writeAttrPoses({"a", "c"})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nc\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $r = assertTrue(insertPose(1, "b")); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nb\nc\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $r = assertTrue(insertPose(10, "d")); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nb\nc\nd\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $r = assertFalse(insertPose(1, "")); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC", "nkPoseStackData"}, $nodes); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + $pdB + $pdD, getPoseStackDataAttr($nodes[2])); if (`size $r`) warning $r;
    $r = assertTrue(insertPose(2, "e")); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC", "nkPoseStackData"}, $nodes); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "e\n" + $pdB + $pdD, getPoseStackDataAttr($nodes[2])); if (`size $r`) warning $r;
    $r = assertTrue(insertPose(3, "f")); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC", "nkPoseStackData"}, $nodes); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "e\nf\n" + $pdB + $pdD, getPoseStackDataAttr($nodes[2])); if (`size $r`) warning $r;
  }

  // movePose
  {
    string $pv = getPoseVersion() + "\n";

    testNewScene();

    $r = assertFalse(movePose(0, 0)); if (`size $r`) warning $r;
    $r = assertFalse(movePose(0, 1)); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(0, `size $nodes`); if (`size $r`) warning $r;
    $r = assertTrue(writeAttrPoses({"a"})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $r = assertFalse(movePose(0, 1)); if (`size $r`) warning $r;
    $r = assertTrue(writeAttrPoses({"a", "b"})); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nb\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $r = assertTrue(movePose(0, 1)); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "b\na\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $r = assertTrue(movePose(1, 0)); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nb\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $r = assertTrue(writeAttrPoses({"a", "b", "c"})); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nb\nc\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $r = assertFalse(movePose(0, -1)); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nb\nc\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $r = assertFalse(movePose(2, 3)); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nb\nc\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $r = assertFalse(movePose(0, 0)); if (`size $r`) warning $r;
    $r = assertFalse(movePose(-1, 1)); if (`size $r`) warning $r;
    $r = assertFalse(movePose(0, 1)); if (`size $r`) warning $r;
    $r = assertFalse(movePose(1, -1)); if (`size $r`) warning $r;
    $r = assertFalse(movePose(1, 0)); if (`size $r`) warning $r;
    $r = assertFalse(movePose(2, 4)); if (`size $r`) warning $r;
    $r = assertFalse(movePose(3, 1)); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC", "nkPoseStackData"}, $nodes); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + $pdB + $pdD, getPoseStackDataAttr($nodes[2])); if (`size $r`) warning $r;
    $r = assertTrue(movePose(2, 3)); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC", "nkPoseStackData"}, $nodes); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + $pdD + $pdB, getPoseStackDataAttr($nodes[2])); if (`size $r`) warning $r;
    $r = assertTrue(movePose(3, 2)); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC", "nkPoseStackData"}, $nodes); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + $pdB + $pdD, getPoseStackDataAttr($nodes[2])); if (`size $r`) warning $r;
  }

  // removePose
  {
    string $pv = getPoseVersion() + "\n";

    testNewScene();

    $r = assertFalse(removePose(-1)); if (`size $r`) warning $r;
    $r = assertFalse(removePose(0)); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(0, `size $nodes`); if (`size $r`) warning $r;
    $r = assertTrue(writeAttrPoses({"a", "b", "c"})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nb\nc\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $r = assertFalse(removePose(-1)); if (`size $r`) warning $r;
    $r = assertFalse(removePose(3)); if (`size $r`) warning $r;
    $r = assertTrue(removePose(1)); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nc\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $r = assertTrue(removePose(1)); if (`size $r`) warning $r;
    $r = assertTrue(removePose(0)); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(0, `size $nodes`); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $r = assertFalse(removePose(-1)); if (`size $r`) warning $r;
    $r = assertFalse(removePose(4)); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC", "nkPoseStackData"}, $nodes); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + $pdB + $pdD, getPoseStackDataAttr($nodes[2])); if (`size $r`) warning $r;
    $r = assertTrue(removePose(2)); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + $pdD, getPoseStackDataAttr($nodes[2])); if (`size $r`) warning $r;
    $r = assertTrue(removePose(2)); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC"}, $nodes); if (`size $r`) warning $r;
  }

  // replacePose
  {
    string $pv = getPoseVersion() + "\n";

    testNewScene();

    $r = assertFalse(replacePose(0, "")); if (`size $r`) warning $r;
    $r = assertFalse(replacePose(-1, "x")); if (`size $r`) warning $r;
    $r = assertFalse(replacePose(0, "x")); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(0, `size $nodes`); if (`size $r`) warning $r;
    $r = assertTrue(writeAttrPoses({"a", "b"})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nb\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $r = assertFalse(replacePose(0, "")); if (`size $r`) warning $r;
    $r = assertFalse(replacePose(-1, "x")); if (`size $r`) warning $r;
    $r = assertFalse(replacePose(3, "x")); if (`size $r`) warning $r;
    $r = assertTrue(replacePose(0, "x")); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "x\nb\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $r = assertFalse(replacePose(0, "")); if (`size $r`) warning $r;
    $r = assertFalse(replacePose(-1, "x")); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC", "nkPoseStackData"}, $nodes); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + $pdB + $pdD, getPoseStackDataAttr($nodes[2])); if (`size $r`) warning $r;
    $r = assertFalse(replacePose(0, "x")); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + $pdB + $pdD, getPoseStackDataAttr($nodes[2])); if (`size $r`) warning $r;
    $r = assertFalse(replacePose(4, "x")); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + $pdB + $pdD, getPoseStackDataAttr($nodes[2])); if (`size $r`) warning $r;
    $r = assertTrue(replacePose(2, "x")); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "x\n" + $pdD, getPoseStackDataAttr($nodes[2])); if (`size $r`) warning $r;
  }

  print("test3 end\n");
}

// /*-
// @returns <>
// */
// global proc nkPoseStackTestNegativeIndex(int $index) {
//   print("// nkPoseStackTestNegativeIndex(" + $index + ")\n"); // debug
//   string $r = assertIntEqual(-1, $index); if (`size $r`) warning $r;
// }

/*-
@var <string>
*/
global string $nkPoseStackPoseOpsTestSelectionMode;

/*-
@param $selectionMode <string>
@returns <>
*/
global proc nkPoseStackPoseOpsTestObserver(string $selectionMode) {
  global string $nkPoseStackPoseOpsTestSelectionMode;
  string $r = assertStringEqual($nkPoseStackPoseOpsTestSelectionMode, $selectionMode); if (`size $r`) warning $r;
  $nkPoseStackPoseOpsTestSelectionMode = "";
}

/*-
@returns <>
@remarks ポーズ操作。
*/
proc test4() {
  global string $nkPoseStackPoseOpsTestSelectionMode;

  string $testDirname = `getenv "MAYA_APP_DIR"` + "/dev/nkPoseStack/test";
  string $scriptNodeFilename = $testDirname + "/scriptNodeTest.ma";
  string $nsScriptNodeFilename = $testDirname + "/ns_scriptNodeTest.ma";

  string $pdA = "A=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $pdB = "B=|locatorB_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $pdC = "C=|locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $pdD = "D=|locatorD_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\n";

  string $poseA = "A=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $poseB = "B=|locatorB_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $poseC = "C=|locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $poseD = "D=|locatorD_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";

  string $poseAr = "!A=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $poseCr = "!C=|locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";

  string $nsPdA = "A_L=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nA_R=|locatorA_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $nsPdB = "B_L=|locatorB_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nB_R=|locatorB_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $nsPdC = "C_L=|c:locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nC_R=|c:locatorC_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $nsPdD = "D_L=|d:locatorD_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nD_R=|d:locatorD_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $nsPdE = "E_L=|locatorE_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nE_R=|locatorE_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";

  string $nsPoseAL = "A_L=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseAR = "A_R=|locatorA_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseBL = "B_L=|locatorB_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseBR = "B_R=|locatorB_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCL = "C_L=|c:locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCR = "C_R=|c:locatorC_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseDL = "D_L=|d:locatorD_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseDR = "D_R=|d:locatorD_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseEL = "E_L=|locatorE_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseER = "E_R=|locatorE_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";

  string $nsPoseALr = "!A_L=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseARr = "!A_R=|locatorA_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCLr = "!C_L=|referenced_one:c:locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCRr = "!C_R=|referenced_one:c:locatorC_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseELr = "!E_L=|referenced_two:e:locatorE_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseERr = "!E_R=|referenced_two:e:locatorE_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";

  string $nsPoseALd = "A_L=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseARd = "A_R=|locatorA_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCLd = "C_L=|referenced_one:c:locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCRd = "C_R=|referenced_one:c:locatorC_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseELd = "E_L=|referenced_two:e:locatorE_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseERd = "E_R=|referenced_two:e:locatorE_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";

  print("test4 start\n");
  string $r;
  string $nodes[];

  // clearPoses
  {
    subscribe("nkPoseStackPosesCleared", "nkPoseStackPoseOpsTestObserver");

    testNewScene();

    string $nA = `rename (createScriptNode()) "nkPoseStackDataA"`;
    string $nB = `rename (createScriptNode()) "nkPoseStackDataB"`;
    string $nC = `rename (createScriptNode()) "nkPoseStackDataC"`;
    $nkPoseStackPoseOpsTestSelectionMode = "none";
    $r = assertTrue(clearPoses()); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nA`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nB`); if (`size $r`) warning $r;
    $r = assertFalse(`objExists $nC`); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC", "nkPoseStackData"}, getScriptNodes()); if (`size $r`) warning $r;
    $nkPoseStackPoseOpsTestSelectionMode = "none";
    $r = assertTrue(clearPoses()); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC"}, getScriptNodes()); if (`size $r`) warning $r;

    unsubscribe("nkPoseStackPosesCleared", "nkPoseStackPoseOpsTestObserver");
  }

  // openPoses / importPoses
  {
    string $xFilename = $testDirname + "/x.posestack";
    string $openFilename = $testDirname + "/openPosesTest.posestack";
    string $importFilename = $testDirname + "/importPosesTest.posestack";
    string $openConvertFilename = $testDirname + "/openPosesConvertTest.posestack";
    string $importConvertFilename = $testDirname + "/importPosesConvertTest.posestack";

    string $pv = getPoseVersion() + "\n";

    subscribe("nkPoseStackPosesOpened", "nkPoseStackPoseOpsTestObserver");
    subscribe("nkPoseStackPosesImported", "nkPoseStackPoseOpsTestObserver");

    testNewScene();

    $nodes = getScriptNodes();
    $r = assertIntEqual(0, `size $nodes`); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "none";
    $r = assertFalse(openPoses($xFilename)); if (`size $r`) warning $r;
    $r = assertStringEqual("none", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $r = assertTrue(openPoses($openFilename)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nb\nc\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $nkPoseStackPoseOpsTestSelectionMode = "none";
    $r = assertFalse(importPoses($xFilename)); if (`size $r`) warning $r;
    $r = assertStringEqual("none", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $r = assertTrue(importPoses($importFilename)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "a\nb\nc\nd\ne\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "none";
    $r = assertTrue(openPoses($openConvertFilename)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "xa\nxb\nxc\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $nkPoseStackPoseOpsTestSelectionMode = "none";
    $r = assertTrue(importPoses($importConvertFilename)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "xa\nxb\nxc\nxd\nxe\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;

    unsubscribe("nkPoseStackPosesOpened", "nkPoseStackPoseOpsTestObserver");
    unsubscribe("nkPoseStackPosesImported", "nkPoseStackPoseOpsTestObserver");
  }

  // savePoses
  {
    string $saveFilename = `getenv "MAYA_APP_DIR"` + "/dev/nkPoseStack/test/savePosesTest.posestack";

    string $pv = getPoseVersion() + "\n";

    testNewScene();

    $nodes = getScriptNodes();
    $r = assertIntEqual(0, `size $nodes`); if (`size $r`) warning $r;
    $r = assertFalse(savePoses($saveFilename)); if (`size $r`) warning $r;
    $r = assertTrue(writeAttrPoses({"f", "g"})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "f\ng\n", getPoseStackDataAttr($nodes[0])); if (`size $r`) warning $r;
    $r = assertTrue(savePoses($saveFilename)); if (`size $r`) warning $r;
    $r = assertTrue(existsFilename($saveFilename)); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + "f\ng\n", readAllText($saveFilename, "")); if (`size $r`) warning $r;

    $r = assertTrue(deleteFile($saveFilename)); if (`size $r`) warning $r;
    $r = assertFalse(existsFilename($saveFilename)); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $nodes = `ls -l "::nkPoseStackData*"`;
    $nodes = `sort $nodes`;
    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataB", "nkPoseStackDataC", "nkPoseStackDataD"}, $nodes); if (`size $r`) warning $r;
    $r = assertTrue(savePoses($saveFilename)); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertStringArrayEqual({"nkPoseStackDataA", "nkPoseStackDataC", "nkPoseStackData"}, $nodes); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + $pdB + $pdD, getPoseStackDataAttr($nodes[2])); if (`size $r`) warning $r;
    $r = assertTrue(existsFilename($saveFilename)); if (`size $r`) warning $r;
    $r = assertStringEqual($pv + $pdB + $pdD, readAllText($saveFilename, "")); if (`size $r`) warning $r;

    $r = assertTrue(deleteFile($saveFilename)); if (`size $r`) warning $r;
    $r = assertFalse(existsFilename($saveFilename)); if (`size $r`) warning $r;
  }

  // getPoseNames
  {
    testNewScene();

    $r = assertTrue(writeAttrPoses({"a=x", "b=y", "c=z"})); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({"a", "b", "c"}, getPoseNames()); if (`size $r`) warning $r;
  }

  // addPose
  {
    subscribe("nkPoseStackPoseAdded", "nkPoseStackPoseOpsTestObserver");

    testNewScene();

    select -cl;
    string $nA = `joint -a -ax 0 -ay 0 -az 0 -n "joint1_L" -p 1 1 1 -roo "xyz"`;
    select -cl;
    string $nB = `joint -a -ax 0 -ay 0 -az 0 -n "joint2_L" -p 2 2 2 -roo "xyz"`;
    select -cl;

    string $psA = "1,1,0/_L,_R/0,0,1,1,0";
    string $psB = "1,1,0/_L,_R/0,0,1,1,0";
    string $pA = "a=" + $nA + "[" + $psA + "]1,1,1,0,0,0,1,1,1,1,0,0,0;";
    string $pB = "b=" + $nB + "[" + $psB + "]2,2,2,0,0,0,1,1,1,1,0,0,0;";

    $nkPoseStackPoseOpsTestSelectionMode = "last";
    $r = assertFalse(addPose("a", {}, {})); if (`size $r`) warning $r;
    $r = assertStringEqual("last", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $r = assertFalse(addPose("a", {$nA}, {})); if (`size $r`) warning $r;
    $r = assertStringEqual("last", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $r = assertFalse(addPose("", {$nA}, {$psA})); if (`size $r`) warning $r;
    $r = assertStringEqual("last", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(0, `size $nodes`); if (`size $r`) warning $r;
    $r = assertTrue(addPose("a", {$nA}, {$psA})); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pA}, readAttrPoses($nodes)); if (`size $r`) warning $r;
    $nkPoseStackPoseOpsTestSelectionMode = "last";
    $r = assertTrue(addPose("b", {$nB}, {$psB})); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pA, $pB}, readAttrPoses($nodes)); if (`size $r`) warning $r;

    if (`objExists $nA`) delete $nA;
    if (`objExists $nB`) delete $nB;

    unsubscribe("nkPoseStackPoseAdded", "nkPoseStackPoseOpsTestObserver");
  }

  // editPose
  {
    subscribe("nkPoseStackPoseEdited", "nkPoseStackPoseOpsTestObserver");

    testNewScene();

    string $psA = "1,1,0/_L,_R/0,0,1,1,0";
    string $psB = "1,1,0/_L,_R/0,0,1,1,0";
    string $pA = "a=joint1_L[" + $psA + "]1,1,1,0,0,0,1,1,1,1,0,0,0;";
    string $pB = "b=joint2_L[" + $psB + "]2,2,2,0,0,0,1,1,1,1,0,0,0;";

    string $psC = "1,0,0/_L,_R/0,1,2,0,0";
    string $psD = "1,0,0/_L,_R/0,1,2,0,0";
    string $pC = "c=joint1_L[" + $psC + "]1,1,1,0,0,0,1,1,1,1,0,0,0;";
    string $pD = "d=joint2_L[" + $psD + "]2,2,2,0,0,0,1,1,1,1,0,0,0;";

    string $psE = "0,1,0/_L,_R/0,2,0,0,1";
    string $psF = "0,1,0/_L,_R/0,2,0,0,1";
    string $pE = "e=joint1_L[" + $psE + "]1,1,1,0,0,0,1,1,1,1,0,0,0;";
    string $pF = "f=joint2_L[" + $psF + "]2,2,2,0,0,0,1,1,1,1,0,0,0;";

    $nkPoseStackPoseOpsTestSelectionMode = "keepIndex";
    $r = assertFalse(editPose(0, "c", {$psC})); if (`size $r`) warning $r;
    $r = assertStringEqual("keepIndex", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;

    $r = assertTrue(writeAttrPoses({$pA, $pB})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pA, $pB}, readAttrPoses($nodes)); if (`size $r`) warning $r;

    $r = assertFalse(editPose(-1, "c", {$psC})); if (`size $r`) warning $r;
    $r = assertFalse(editPose(2, "c", {$psC})); if (`size $r`) warning $r;
    $r = assertStringEqual("keepIndex", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;

    $r = assertTrue(editPose(0, "c", {$psC})); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pC, $pB}, readAttrPoses($nodes)); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "keepIndex";
    $r = assertTrue(editPose(1, "d", {$psD})); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pC, $pD}, readAttrPoses($nodes)); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $r = assertTrue(appendAttrPoses({$pA, $pB})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(3, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseAr, $poseCr, $poseB, $poseD, $pA, $pB}, readAttrPoses({})); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "keepIndex";
    $r = assertFalse(editPose(0, "e", {$psE})); if (`size $r`) warning $r;
    $r = assertStringEqual("keepIndex", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $r = assertTrue(editPose(4, "e", {$psE})); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nkPoseStackPoseOpsTestSelectionMode = "keepIndex";
    $r = assertTrue(editPose(5, "f", {$psF})); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseAr, $poseCr, $poseB, $poseD, $pE, $pF}, readAttrPoses({})); if (`size $r`) warning $r;

    unsubscribe("nkPoseStackPoseEdited", "nkPoseStackPoseOpsTestObserver");
  }

  // duplicatePose
  {
    subscribe("nkPoseStackPoseDuplicated", "nkPoseStackPoseOpsTestObserver");

    testNewScene();

    string $psA = "1,1,0/_L,_R/0,0,1,1,0";
    string $psB = "1,1,0/_L,_R/0,0,1,1,0";
    string $pA = "a=joint1_L[" + $psA + "]1,1,1,0,0,0,1,1,1,1,0,0,0;";
    string $pB = "b=joint2_L[" + $psB + "]2,2,2,0,0,0,1,1,1,1,0,0,0;";

    $nkPoseStackPoseOpsTestSelectionMode = "next";
    $r = assertFalse(duplicatePose(0)); if (`size $r`) warning $r;
    $r = assertStringEqual("next", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;

    $r = assertTrue(writeAttrPoses({$pA, $pB})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pA, $pB}, readAttrPoses($nodes)); if (`size $r`) warning $r;

    $r = assertFalse(duplicatePose(-1)); if (`size $r`) warning $r;
    $r = assertFalse(duplicatePose(2)); if (`size $r`) warning $r;
    $r = assertStringEqual("next", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;

    $r = assertTrue(duplicatePose(0)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pA, $pA, $pB}, readAttrPoses($nodes)); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $r = assertTrue(appendAttrPoses({$pA, $pB})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(3, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseAr, $poseCr, $poseB, $poseD, $pA, $pB}, readAttrPoses({})); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "next";
    $r = assertTrue(duplicatePose(4)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseAr, $poseCr, $poseB, $poseD, $pA, $pA, $pB}, readAttrPoses({})); if (`size $r`) warning $r;
    $nkPoseStackPoseOpsTestSelectionMode = "last";
    $r = assertTrue(duplicatePose(0)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseAr, $poseCr, $poseB, $poseD, $pA, $pA, $pB, $poseA}, readAttrPoses({})); if (`size $r`) warning $r;
    $nkPoseStackPoseOpsTestSelectionMode = "last";
    $r = assertTrue(duplicatePose(1)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseAr, $poseCr, $poseB, $poseD, $pA, $pA, $pB, $poseA, $poseC}, readAttrPoses({})); if (`size $r`) warning $r;

    testOpenScene($nsScriptNodeFilename);

    $r = assertTrue(appendAttrPoses({$pA, $pB})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(4, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$nsPoseALr, $nsPoseARr, $nsPoseCLr, $nsPoseCRr, $nsPoseELr, $nsPoseERr, $nsPoseDL, $nsPoseDR, $nsPoseBL, $nsPoseBR, $pA, $pB}, readAttrPoses({})); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "next";
    $r = assertTrue(duplicatePose(10)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$nsPoseALr, $nsPoseARr, $nsPoseCLr, $nsPoseCRr, $nsPoseELr, $nsPoseERr, $nsPoseDL, $nsPoseDR, $nsPoseBL, $nsPoseBR, $pA, $pA, $pB}, readAttrPoses({})); if (`size $r`) warning $r;
    $nkPoseStackPoseOpsTestSelectionMode = "last";
    $r = assertTrue(duplicatePose(0)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$nsPoseALr, $nsPoseARr, $nsPoseCLr, $nsPoseCRr, $nsPoseELr, $nsPoseERr, $nsPoseDL, $nsPoseDR, $nsPoseBL, $nsPoseBR, $pA, $pA, $pB, $nsPoseALd}, readAttrPoses({})); if (`size $r`) warning $r;
    $nkPoseStackPoseOpsTestSelectionMode = "last";
    $r = assertTrue(duplicatePose(2)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$nsPoseALr, $nsPoseARr, $nsPoseCLr, $nsPoseCRr, $nsPoseELr, $nsPoseERr, $nsPoseDL, $nsPoseDR, $nsPoseBL, $nsPoseBR, $pA, $pA, $pB, $nsPoseALd, $nsPoseCLd}, readAttrPoses({})); if (`size $r`) warning $r;
    $nkPoseStackPoseOpsTestSelectionMode = "last";
    $r = assertTrue(duplicatePose(4)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$nsPoseALr, $nsPoseARr, $nsPoseCLr, $nsPoseCRr, $nsPoseELr, $nsPoseERr, $nsPoseDL, $nsPoseDR, $nsPoseBL, $nsPoseBR, $pA, $pA, $pB, $nsPoseALd, $nsPoseCLd, $nsPoseELd}, readAttrPoses({})); if (`size $r`) warning $r;

    unsubscribe("nkPoseStackPoseDuplicated", "nkPoseStackPoseOpsTestObserver");
  }

  // updatePose
  {
    subscribe("nkPoseStackPoseUpdated", "nkPoseStackPoseOpsTestObserver");

    testNewScene();

    select -cl;
    string $nA = `joint -a -ax 0 -ay 0 -az 0 -n "joint1_L" -p 1 1 1 -roo "xyz"`;
    select -cl;

    string $psA = "1,1,0/_L,_R/0,0,1,1,0";
    string $pA1 = "a=" + $nA + "[" + $psA + "]1,1,1,0,0,0,1,1,1,1,0,0,0;";
    string $pA2 = "a=" + $nA + "[" + $psA + "]2,2,2,0,0,0,1,1,1,1,0,0,0;";

    $nkPoseStackPoseOpsTestSelectionMode = "keepIndex";
    $r = assertFalse(updatePose(0)); if (`size $r`) warning $r;
    $r = assertStringEqual("keepIndex", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;

    $r = assertTrue(addPose("a", {$nA}, {$psA})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pA1}, readAttrPoses($nodes)); if (`size $r`) warning $r;

    $r = assertFalse(updatePose(-1)); if (`size $r`) warning $r;
    $r = assertFalse(updatePose(1)); if (`size $r`) warning $r;
    $r = assertStringEqual("keepIndex", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;

    $r = assertTrue(updatePose(0)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pA1}, readAttrPoses($nodes)); if (`size $r`) warning $r;

    $r = assertFloatArrayEqual({1.0, 1.0, 1.0}, `getAttr ($nA + ".t")`, 0.001); if (`size $r`) warning $r;
    setAttr ($nA + ".t") 2 2 2;
    $r = assertFloatArrayEqual({2.0, 2.0, 2.0}, `getAttr ($nA + ".t")`, 0.001); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "keepIndex";
    $r = assertTrue(updatePose(0)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pA2}, readAttrPoses($nodes)); if (`size $r`) warning $r;

    if (`objExists $nA`) delete $nA;

    testOpenScene($scriptNodeFilename);

    select -cl;
    string $nB = `joint -a -ax 0 -ay 0 -az 0 -n "joint1_L" -p 1 1 1 -roo "xyz"`;
    select -cl;

    string $psB = "1,1,0/_L,_R/0,0,1,1,0";
    string $pB1 = "a=" + $nB + "[" + $psB + "]1,1,1,0,0,0,1,1,1,1,0,0,0;";
    string $pB2 = "a=" + $nB + "[" + $psB + "]2,2,2,0,0,0,1,1,1,1,0,0,0;";

    $r = assertTrue(addPose("a", {$nB}, {$psB})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(3, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseB, $poseD, $pB1}, readAttrPoses({$nodes[2]})); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "keepIndex";
    $r = assertFalse(updatePose(0)); if (`size $r`) warning $r;
    $r = assertFalse(updatePose(1)); if (`size $r`) warning $r;
    $r = assertStringEqual("keepIndex", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(3, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseB, $poseD, $pB1}, readAttrPoses({$nodes[2]})); if (`size $r`) warning $r;

    $r = assertFloatArrayEqual({1.0, 1.0, 1.0}, `getAttr ($nB + ".t")`, 0.001); if (`size $r`) warning $r;
    setAttr ($nB + ".t") 2 2 2;
    $r = assertFloatArrayEqual({2.0, 2.0, 2.0}, `getAttr ($nB + ".t")`, 0.001); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "keepIndex";
    $r = assertTrue(updatePose(4)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(3, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseB, $poseD, $pB2}, readAttrPoses({$nodes[2]})); if (`size $r`) warning $r;

    if (`objExists $nB`) delete $nB;

    unsubscribe("nkPoseStackPoseUpdated", "nkPoseStackPoseOpsTestObserver");
  }

  // deletePose
  {
    subscribe("nkPoseStackPoseDeleted", "nkPoseStackPoseOpsTestObserver");

    testNewScene();

    string $psA = "1,1,0/_L,_R/0,0,1,1,0";
    string $psB = "1,1,0/_L,_R/0,0,1,1,0";
    string $psC = "1,1,0/_L,_R/0,0,1,1,0";
    string $pA = "a=joint1_L[" + $psA + "]1,1,1,0,0,0,1,1,1,1,0,0,0;";
    string $pB = "b=joint2_L[" + $psB + "]2,2,2,0,0,0,1,1,1,1,0,0,0;";
    string $pC = "b=joint3_L[" + $psC + "]3,3,3,0,0,0,1,1,1,1,0,0,0;";

    $nkPoseStackPoseOpsTestSelectionMode = "keepIndex";
    $r = assertFalse(deletePose(0)); if (`size $r`) warning $r;
    $r = assertStringEqual("keepIndex", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;

    $r = assertTrue(writeAttrPoses({$pA, $pB, $pC})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pA, $pB, $pC}, readAttrPoses({})); if (`size $r`) warning $r;

    $r = assertFalse(deletePose(-1)); if (`size $r`) warning $r;
    $r = assertFalse(deletePose(3)); if (`size $r`) warning $r;
    $r = assertStringEqual("keepIndex", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;

    $r = assertTrue(deletePose(0)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pB, $pC}, readAttrPoses({})); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "last";
    $r = assertTrue(deletePose(1)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pB}, readAttrPoses({})); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "none";
    $r = assertTrue(deletePose(0)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(0, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({}, readAttrPoses({})); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $nodes = getScriptNodes();
    $r = assertIntEqual(3, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseAr, $poseCr, $poseB, $poseD}, readAttrPoses({})); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "keepIndex";
    $r = assertFalse(deletePose(-1)); if (`size $r`) warning $r;
    $r = assertFalse(deletePose(0)); if (`size $r`) warning $r;
    $r = assertFalse(deletePose(1)); if (`size $r`) warning $r;
    $r = assertFalse(deletePose(4)); if (`size $r`) warning $r;
    $r = assertStringEqual("keepIndex", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;

    $r = assertTrue(deletePose(2)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(3, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseAr, $poseCr, $poseD}, readAttrPoses({})); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "last";
    $r = assertTrue(deletePose(2)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(2, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseAr, $poseCr}, readAttrPoses({})); if (`size $r`) warning $r;

    $r = assertFalse(deletePose(0)); if (`size $r`) warning $r;
    $r = assertFalse(deletePose(1)); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(2, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseAr, $poseCr}, readAttrPoses({})); if (`size $r`) warning $r;

    unsubscribe("nkPoseStackPoseDeleted", "nkPoseStackPoseOpsTestObserver");
  }

  // movePrevPose
  {
    subscribe("nkPoseStackPoseMovedPrev", "nkPoseStackPoseOpsTestObserver");

    testNewScene();

    string $psA = "1,1,0/_L,_R/0,0,1,1,0";
    string $psB = "1,1,0/_L,_R/0,0,1,1,0";
    string $psC = "1,1,0/_L,_R/0,0,1,1,0";
    string $pA = "a=joint1_L[" + $psA + "]1,1,1,0,0,0,1,1,1,1,0,0,0;";
    string $pB = "b=joint2_L[" + $psB + "]2,2,2,0,0,0,1,1,1,1,0,0,0;";
    string $pC = "b=joint3_L[" + $psC + "]3,3,3,0,0,0,1,1,1,1,0,0,0;";

    $nkPoseStackPoseOpsTestSelectionMode = "prev";
    $r = assertFalse(movePrevPose(1)); if (`size $r`) warning $r;
    $r = assertStringEqual("prev", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;

    $r = assertTrue(writeAttrPoses({$pA, $pB, $pC})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pA, $pB, $pC}, readAttrPoses({})); if (`size $r`) warning $r;

    $r = assertFalse(movePrevPose(-1)); if (`size $r`) warning $r;
    $r = assertFalse(movePrevPose(0)); if (`size $r`) warning $r;
    $r = assertFalse(movePrevPose(3)); if (`size $r`) warning $r;
    $r = assertStringEqual("prev", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;

    $r = assertTrue(movePrevPose(1)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pB, $pA, $pC}, readAttrPoses({})); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "prev";
    $r = assertTrue(movePrevPose(2)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pB, $pC, $pA}, readAttrPoses({})); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $nodes = getScriptNodes();
    $r = assertIntEqual(3, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseAr, $poseCr, $poseB, $poseD}, readAttrPoses({})); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "prev";
    $r = assertFalse(movePrevPose(-1)); if (`size $r`) warning $r;
    $r = assertFalse(movePrevPose(0)); if (`size $r`) warning $r;
    $r = assertFalse(movePrevPose(1)); if (`size $r`) warning $r;
    $r = assertFalse(movePrevPose(2)); if (`size $r`) warning $r;
    $r = assertFalse(movePrevPose(4)); if (`size $r`) warning $r;
    $r = assertStringEqual("prev", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;

    $r = assertTrue(movePrevPose(3)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(3, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseAr, $poseCr, $poseD, $poseB}, readAttrPoses({})); if (`size $r`) warning $r;

    unsubscribe("nkPoseStackPoseMovedPrev", "nkPoseStackPoseOpsTestObserver");
  }

  // moveNextPose
  {
    subscribe("nkPoseStackPoseMovedNext", "nkPoseStackPoseOpsTestObserver");

    testNewScene();

    string $psA = "1,1,0/_L,_R/0,0,1,1,0";
    string $psB = "1,1,0/_L,_R/0,0,1,1,0";
    string $psC = "1,1,0/_L,_R/0,0,1,1,0";
    string $pA = "a=joint1_L[" + $psA + "]1,1,1,0,0,0,1,1,1,1,0,0,0;";
    string $pB = "b=joint2_L[" + $psB + "]2,2,2,0,0,0,1,1,1,1,0,0,0;";
    string $pC = "b=joint3_L[" + $psC + "]3,3,3,0,0,0,1,1,1,1,0,0,0;";

    $nkPoseStackPoseOpsTestSelectionMode = "next";
    $r = assertFalse(moveNextPose(1)); if (`size $r`) warning $r;
    $r = assertStringEqual("next", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;

    $r = assertTrue(writeAttrPoses({$pA, $pB, $pC})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pA, $pB, $pC}, readAttrPoses({})); if (`size $r`) warning $r;

    $r = assertFalse(moveNextPose(-1)); if (`size $r`) warning $r;
    $r = assertFalse(moveNextPose(2)); if (`size $r`) warning $r;
    $r = assertFalse(moveNextPose(3)); if (`size $r`) warning $r;
    $r = assertStringEqual("next", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;

    $r = assertTrue(moveNextPose(1)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pA, $pC, $pB}, readAttrPoses({})); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "next";
    $r = assertTrue(moveNextPose(0)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pC, $pA, $pB}, readAttrPoses({})); if (`size $r`) warning $r;

    testOpenScene($scriptNodeFilename);

    $nodes = getScriptNodes();
    $r = assertIntEqual(3, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseAr, $poseCr, $poseB, $poseD}, readAttrPoses({})); if (`size $r`) warning $r;

    $nkPoseStackPoseOpsTestSelectionMode = "next";
    $r = assertFalse(moveNextPose(-1)); if (`size $r`) warning $r;
    $r = assertFalse(moveNextPose(0)); if (`size $r`) warning $r;
    $r = assertFalse(moveNextPose(1)); if (`size $r`) warning $r;
    $r = assertFalse(moveNextPose(3)); if (`size $r`) warning $r;
    $r = assertFalse(moveNextPose(4)); if (`size $r`) warning $r;
    $r = assertStringEqual("next", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;

    $r = assertTrue(moveNextPose(2)); if (`size $r`) warning $r;
    $r = assertStringEqual("", $nkPoseStackPoseOpsTestSelectionMode); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(3, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$poseAr, $poseCr, $poseD, $poseB}, readAttrPoses({})); if (`size $r`) warning $r;

    unsubscribe("nkPoseStackPoseMovedNext", "nkPoseStackPoseOpsTestObserver");
  }

  print("test4 end\n");
}

/*-
@returns <>
@remarks ノード操作。
*/
proc test5() {
  string $testDirname = `getenv "MAYA_APP_DIR"` + "/dev/nkPoseStack/test";
  string $scriptNodeFilename = $testDirname + "/scriptNodeTest.ma";
  string $nsScriptNodeFilename = $testDirname + "/ns_scriptNodeTest.ma";

  string $pdA = "A=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $pdB = "B=|locatorB_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $pdC = "C=|locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $pdD = "D=|locatorD_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\n";

  string $poseA = "A=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $poseB = "B=|locatorB_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $poseC = "C=|locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $poseD = "D=|locatorD_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";

  string $poseAr = "!A=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $poseCr = "!C=|locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";

  string $nsPdA = "A_L=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nA_R=|locatorA_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $nsPdB = "B_L=|locatorB_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nB_R=|locatorB_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $nsPdC = "C_L=|c:locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nC_R=|c:locatorC_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $nsPdD = "D_L=|d:locatorD_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nD_R=|d:locatorD_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";
  string $nsPdE = "E_L=|locatorE_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;\nE_R=|locatorE_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;\n";

  string $nsPoseAL = "A_L=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseAR = "A_R=|locatorA_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseBL = "B_L=|locatorB_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseBR = "B_R=|locatorB_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCL = "C_L=|c:locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCR = "C_R=|c:locatorC_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseDL = "D_L=|d:locatorD_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseDR = "D_R=|d:locatorD_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseEL = "E_L=|locatorE_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseER = "E_R=|locatorE_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";

  string $nsPoseALr = "!A_L=|locatorA_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseARr = "!A_R=|locatorA_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCLr = "!C_L=|referenced_one:c:locatorC_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseCRr = "!C_R=|referenced_one:c:locatorC_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseELr = "!E_L=|referenced_two:e:locatorE_L[1,1,0/_L,_R/0,0,1,0,0]1,0,0,0,0,0,1,1,1,1,0,0,0;";
  string $nsPoseERr = "!E_R=|referenced_two:e:locatorE_R[1,1,0/_L,_R/0,0,1,0,0]-1,0,0,0,0,0,1,1,1,1,0,0,0;";

  print("test5 start\n");
  string $r;
  string $nodes[];

  // selectNodes
  {
    testNewScene();

    select -cl;
    string $nL = `joint -a -ax 0 -ay 0 -az 0 -n "joint1_L" -p 0 0 0 -roo "xyz"`;
    $nL = longNameOf($nL);
    select -cl;
    string $nR = `joint -a -ax 0 -ay 0 -az 0 -n "joint1_R" -p 0 0 0 -roo "xyz"`;
    $nR = longNameOf($nR);
    select -cl;
    string $nD = `joint -a -ax 0 -ay 0 -az 0 -n "joint1_D" -p 0 0 0 -roo "xyz"`;
    $nD = longNameOf($nD);
    select -cl;

    string $psL = "1,1,0/_L,_R/0,0,1,0,0";
    string $pL = "L=" + $nL + "[" + $psL + "]0,0,0,0,0,0,1,1,1,1,0,0,0;";
    string $psD = "1,1,0/_L,_R/0,0,1,0,0";
    string $pD = "D=" + $nD + "[" + $psD + "]0,0,0,0,0,0,1,1,1,1,0,0,0;";

    $r = assertFalse(selectNodes(0, false, 0)); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({}, `ls -l -sl`); if (`size $r`) warning $r;

    $r = assertTrue(addPose("L", {$nL}, {$psL})); if (`size $r`) warning $r;
    $r = assertTrue(addPose("D", {$nD}, {$psD})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pL, $pD}, readAttrPoses($nodes)); if (`size $r`) warning $r;

    $r = assertFalse(selectNodes(-1, false, 0)); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertFalse(selectNodes(2, false, 0)); if (`size $r`) warning $r; // 置き換え
    $r = assertStringArrayEqual({}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertFalse(selectNodes(2, false, 5)); if (`size $r`) warning $r; // 追加
    $r = assertStringArrayEqual({}, `ls -l -sl`); if (`size $r`) warning $r;

    $r = assertTrue(selectNodes(0, false, 0)); if (`size $r`) warning $r; // 置き換え
    $r = assertStringArrayEqual({$nL}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(0, true, 0)); if (`size $r`) warning $r; // 反対側に置き換え
    $r = assertStringArrayEqual({$nR}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(0, false, 1)); if (`size $r`) warning $r; // トグル
    $r = assertStringArrayEqual({$nR, $nL}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(0, false, 1)); if (`size $r`) warning $r; // トグル
    $r = assertStringArrayEqual({$nR}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(0, false, 5)); if (`size $r`) warning $r; // 追加
    $r = assertStringArrayEqual({$nR, $nL}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(0, true, 4)); if (`size $r`) warning $r; // 反対側を解除
    $r = assertStringArrayEqual({$nL}, `ls -l -sl`); if (`size $r`) warning $r;

    if (`objExists $nD`) delete $nD;
    $r = assertFalse(`objExists $nD`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(1, false, 0)); if (`size $r`) warning $r; // 置き換え
    $r = assertStringArrayEqual({}, `ls -l -sl`); if (`size $r`) warning $r;

    if (`objExists $nL`) delete $nL;
    if (`objExists $nR`) delete $nR;

    testOpenScene($nsScriptNodeFilename);

    string $nAL = "|locatorA_L";
    string $nAR = "|locatorA_R";
    string $nBL = "|locatorB_L";
    string $nBR = "|locatorB_R";
    string $nCL = "|referenced_one:c:locatorC_L";
    string $nCR = "|referenced_one:c:locatorC_R";
    string $nDL = "|imported:d:locatorD_L";
    string $nDR = "|imported:d:locatorD_R";
    string $nEL = "|referenced_two:e:locatorE_L";
    string $nER = "|referenced_two:e:locatorE_R";

    $r = assertTrue(selectNodes(0, false, 0)); if (`size $r`) warning $r; // 置き換え
    $r = assertStringArrayEqual({$nAL}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(0, true, 0)); if (`size $r`) warning $r; // 反対側に置き換え
    $r = assertStringArrayEqual({$nAR}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(1, false, 0)); if (`size $r`) warning $r; // 置き換え
    $r = assertStringArrayEqual({$nAR}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(1, true, 0)); if (`size $r`) warning $r; // 反対側に置き換え
    $r = assertStringArrayEqual({$nAL}, `ls -l -sl`); if (`size $r`) warning $r;

    $r = assertTrue(selectNodes(2, false, 0)); if (`size $r`) warning $r; // 置き換え
    $r = assertStringArrayEqual({$nCL}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(2, true, 0)); if (`size $r`) warning $r; // 反対側に置き換え
    $r = assertStringArrayEqual({$nCR}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(3, false, 0)); if (`size $r`) warning $r; // 置き換え
    $r = assertStringArrayEqual({$nCR}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(3, true, 0)); if (`size $r`) warning $r; // 反対側に置き換え
    $r = assertStringArrayEqual({$nCL}, `ls -l -sl`); if (`size $r`) warning $r;

    $r = assertTrue(selectNodes(4, false, 0)); if (`size $r`) warning $r; // 置き換え
    $r = assertStringArrayEqual({$nEL}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(4, true, 0)); if (`size $r`) warning $r; // 反対側に置き換え
    $r = assertStringArrayEqual({$nER}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(5, false, 0)); if (`size $r`) warning $r; // 置き換え
    $r = assertStringArrayEqual({$nER}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(5, true, 0)); if (`size $r`) warning $r; // 反対側に置き換え
    $r = assertStringArrayEqual({$nEL}, `ls -l -sl`); if (`size $r`) warning $r;

    $r = assertTrue(selectNodes(6, false, 0)); if (`size $r`) warning $r; // 置き換え
    $r = assertStringArrayEqual({}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(6, true, 0)); if (`size $r`) warning $r; // 反対側に置き換え
    $r = assertStringArrayEqual({}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(7, false, 0)); if (`size $r`) warning $r; // 置き換え
    $r = assertStringArrayEqual({}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(7, true, 0)); if (`size $r`) warning $r; // 反対側に置き換え
    $r = assertStringArrayEqual({}, `ls -l -sl`); if (`size $r`) warning $r;

    $r = assertTrue(selectNodes(8, false, 0)); if (`size $r`) warning $r; // 置き換え
    $r = assertStringArrayEqual({$nBL}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(8, true, 0)); if (`size $r`) warning $r; // 反対側に置き換え
    $r = assertStringArrayEqual({$nBR}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(9, false, 0)); if (`size $r`) warning $r; // 置き換え
    $r = assertStringArrayEqual({$nBR}, `ls -l -sl`); if (`size $r`) warning $r;
    $r = assertTrue(selectNodes(9, true, 0)); if (`size $r`) warning $r; // 反対側に置き換え
    $r = assertStringArrayEqual({$nBL}, `ls -l -sl`); if (`size $r`) warning $r;
  }

  // pastePose
  {
    testNewScene();

    select -cl;
    string $nL = `joint -a -ax 0 -ay 0 -az 0 -n "joint1_L" -p 1 1 1 -roo "xyz"`;
    $nL = longNameOf($nL);
    select -cl;
    string $nR = `joint -a -ax 0 -ay 0 -az 0 -n "joint1_R" -p 0 0 0 -roo "xyz"`;
    $nR = longNameOf($nR);
    select -cl;

    string $psL = "1,0,0/_L,_R/0,0,1,1,0";
    string $pL = "L=" + $nL + "[" + $psL + "]1,1,1,0,0,0,1,1,1,1,0,0,0;";

    $r = assertFalse(pastePose(0, false, {})); if (`size $r`) warning $r;
    $r = assertFalse(pastePose(0, false, {$nR})); if (`size $r`) warning $r;

    $r = assertTrue(addPose("L", {$nL}, {$psL})); if (`size $r`) warning $r;
    $nodes = getScriptNodes();
    $r = assertIntEqual(1, `size $nodes`); if (`size $r`) warning $r;
    $r = assertStringArrayEqual({$pL}, readAttrPoses($nodes)); if (`size $r`) warning $r;

    $r = assertFalse(pastePose(-1, false, {$nR})); if (`size $r`) warning $r;
    $r = assertFalse(pastePose(1, false, {$nR})); if (`size $r`) warning $r;
    $r = assertFalse(pastePose(0, false, {})); if (`size $r`) warning $r;

    $r = assertFloatArrayEqual({0.0, 0.0, 0.0}, `getAttr ($nR + ".t")`, 0.001); if (`size $r`) warning $r;
    $r = assertTrue(pastePose(0, false, {$nR})); if (`size $r`) warning $r;
    $r = assertFloatArrayEqual({1.0, 1.0, 1.0}, `getAttr ($nR + ".t")`, 0.001); if (`size $r`) warning $r;

    setAttr ($nR + ".t") 0 0 0;
    $r = assertFloatArrayEqual({0.0, 0.0, 0.0}, `getAttr ($nR + ".t")`, 0.001); if (`size $r`) warning $r;
    $r = assertTrue(pastePose(0, true, {$nR})); if (`size $r`) warning $r;
    $r = assertFloatArrayEqual({-1.0, 1.0, 1.0}, `getAttr ($nR + ".t")`, 0.001); if (`size $r`) warning $r;

    if (`objExists $nL`) delete $nL;
    if (`objExists $nR`) delete $nR;
  }

  print("test5 end\n");
}

/*-
@param $flags <boolean[]>
@returns <>
*/
global proc nkPoseStackTest(int $flags[]) {
  if ($flags[0]) test0();
  if ($flags[1]) test1();
  if ($flags[2]) test2();
  if ($flags[3]) test3();
  if ($flags[4]) test4();
  if ($flags[5]) test5();
}

/*-
@param $rotateOrder <int> 回転順序。`0`から`5`の値。既定値は`0`。
@param $isOpposite <boolean> ミラーするかどうか。既定値は`false`。
@param $pasteSetting <int[]> 貼り付け先アトリビュート。TRSの順。既定値は`{1, 1, 0}`。
@returns <>
@remarks ポーズ貼り付けテスト。
*/
global proc nkPoseStackPastePoseTest(
  int $rotateOrder,
  int $isOpposite,
  int $pasteSetting[]
) {
  string $testFilename = `getenv "MAYA_APP_DIR"` + "/dev/nkPoseStack/test/2022-pastePoseTest.ma";
  testOpenScene($testFilename);

  print("nkPoseStackPastePoseTest start\n");

  // ミラー軸:{0, 1, 2}
  int $axisFlags[] = {0, 1, 2};
  // 対称化平面:{0, 1, 2, 3, 4, 5}
  int $planeFlags[] = {0, 1, 2, 3, 4, 5};
  // 対称化階層:{0, 1, 2}
  int $depthFlags[] = {0, 1, 2};

  string $selectSetting[] = {"_L", "_R"};
  int $mirrorSetting[] = {0, 0, 1, 0, 0};

  string $roNames[] = {"XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"};
  string $axisNames[] = {"X", "Y", "Z"};
  string $planeNames[] = {"XY", "XZ", "YX", "YZ", "ZX", "ZY"};
  int $mirrorAxes[] = {0, 1, 2};
  int $primaryAxes[] = {0, 0, 1, 1, 2, 2};
  int $secondaryAxes[] = {1, 2, 0, 2, 0, 1};

  for ($i = 0; $i < `size $axisFlags`; $i++) {
    int $axisIndex = $axisFlags[$i];
    $mirrorSetting[0] = $mirrorAxes[$axisIndex];
    for ($j = 0; $j < `size $planeFlags`; $j++) {
      int $planeIndex = $planeFlags[$j];
      $mirrorSetting[1] = $primaryAxes[$planeIndex];
      $mirrorSetting[2] = $secondaryAxes[$planeIndex];

      string $poseSetting = makePoseSetting(
        $pasteSetting, $selectSetting, $mirrorSetting
      );

      string $baseName = "|" + $axisNames[$axisIndex] + "|ROOT";
      string $nL = $baseName;
      string $nR = $baseName;
      for ($k = 0; $k < `size $depthFlags`; $k++) {
        clearPoses();

        int $depthIndex = $depthFlags[$k] + 1;
        $nL += "|" + $planeNames[$planeIndex] + "_L" + $depthIndex;
        $nR += "|" + $planeNames[$planeIndex] + "_R" + $depthIndex;

        setAttr ($nL + ".rotateOrder") $rotateOrder;
        select -r $nL;
        addPose("a", {$nL}, {$poseSetting});

        setAttr ($nR + ".rotateOrder") $rotateOrder;
        select -r $nR;
        pastePose(0, $isOpposite, {$nR});
      }
    }
  }
  print("nkPoseStackPastePoseTest end\n");
}

/*
eval ("source \"" + `getenv "MAYA_APP_DIR"` + "/dev/nkPoseStack/nkPoseStack.mel\"");
nkPoseStackTest({1, 1, 1, 1, 1, 1});
// nkPoseStackPastePoseTest(0, 0, {1, 1, 0});
*/
